import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
%matplotlib inline
import plotly.express as px
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor
from sklearn.svm import SVR
from sklearn import metrics
import xgboost as xgb
import plotly.io as pio
pio.renderers.default='notebook'
df=pd.read_csv('../input/world-happiness/2016.csv')
df.head(1)
df.shape
df.info()
df.drop(['Lower Confidence Interval','Upper Confidence Interval'],axis=1,inplace=True)
df.columns=df.columns.str.lower().str.replace(' ','_')
df.columns=['country', 'region', 'happiness_rank', 'happiness_score', 'economy', 'family', 'health', 'freedom', 'trust','generosity', 'dystopia_residual']
df.head()
df.describe()
plt.figure(figsize=(10,10))
corr = df.corr()
mask = np.zeros_like(corr)
mask[np.triu_indices_from(mask)] = True
with sns.axes_style("white"):
    ax = sns.heatmap(corr, mask=mask, square=True, annot=True, cmap='ocean')
plt.title('\nCorrelation Plot of Happiness Data', fontsize=18)
plt.show()
plt.figure(figsize=(10,7))
df.corr()['happiness_score'].sort_values(ascending=False).drop(['happiness_score']).plot(kind='bar',color='c')
plt.xlabel('Feature',fontsize=14)
plt.ylabel('Correlation with Happiness Score',fontsize=14)
plt.title('Correlation of Features with Happiness Score',fontsize=18)
plt.show()
plt.figure(figsize=(10,7))
sns.distplot(df['happiness_score'], bins=50, kde=True, hist_kws=dict(edgecolor='w'), color='b')
plt.xlabel('Happiness Score', fontsize=12)
plt.ylabel('Frequency', fontsize=12)
plt.title('Distribution of Happiness Score', fontsize=15)
plt.show()
df_region=df.groupby('region').mean().sort_values(by='happiness_score', ascending=False).reset_index()
plt.figure(figsize=(10,7))
sns.barplot(x='region', y='happiness_score', data=df_region, palette='rainbow')
plt.xlabel('Region', fontsize=14)
plt.ylabel('Happiness Rank', fontsize=14)
plt.xticks(rotation=90)
plt.title('Mean Happiness Score Versus Regions\n', fontsize=18)
plt.show()
plt.figure(figsize=(10,7))
sns.boxplot(x='region',y='happiness_score',data=df,palette='Dark2')
plt.xlabel('Region', fontsize=14)
plt.ylabel('Happiness Rank', fontsize=14)
plt.xticks(rotation=90,fontsize=12)
plt.yticks(fontsize=12)
plt.title('Distribution Of Happiness Score In Different Regions\n', fontsize=18)
plt.show()
df_country=df.groupby('country').mean().sort_values(by='happiness_score', ascending=False).reset_index().head(10)
plt.figure(figsize=(10,10))
plt.pie(x=df_country['happiness_score'], labels=df_country['country'], autopct='%1.2f%%', pctdistance=0.6,labeldistance=1.1,shadow=True, colors=['limegreen', 'deeppink','cyan','pink', 'teal', 'lime','paleturquoise', 'mediumpurple','violet','royalblue'], textprops={'fontsize':14}, explode=(0.2,0,0,0,0,0,0,0,0,0))
plt.title('Top 10 Countries With The Highest Mean Happiness Scores', fontsize=18)
plt.show()
n=sns.PairGrid(df, x_vars=['happiness_score','economy','family','health','freedom'],y_vars=['happiness_score','economy','family','health','freedom'],height=2, aspect=1.2)
n.map_upper(plt.scatter,color='teal')
n.map_diag(sns.distplot,color='lime')
n.map_lower(sns.regplot,color='royalblue')
plt.suptitle('Relationship Between Happiness Score, Economy, Family, Health And Freedom',y=1.05,fontsize=14)
plt.show()
fig=px.scatter_3d(data_frame=df, x='trust', y='generosity', z='dystopia_residual', color='happiness_score',color_continuous_scale='algae')
fig.update_layout(
    title={
        'text': 'Relationship Between Happiness Score, Trust, Generosity, And Dystopia Residual',
        'y':0.92,
        'x':0.5,
        'xanchor': 'center',
        'yanchor': 'top'})
fig.show()
sns.lmplot (x='economy', y='happiness_score', data=df, scatter=False, hue='region', legend=False, height=6.5)
plt.title('The Influence Of Economy On Happiness Score In Different Regions', fontsize=18)
plt.legend(title='Region', fontsize=12, title_fontsize=13, bbox_to_anchor=(1.6,0.7), borderaxespad=0, loc='right')
plt.xlabel('Economy', fontsize=14)
plt.ylabel('Happiness Score', fontsize=14)
plt.show()
le1=LabelEncoder()
le1.fit(df['country'])
df['country']=le1.transform(df['country'])
le2=LabelEncoder()
le2.fit(df['region'])
df['region']=le2.transform(df['region'])
X=df[['country', 'region', 'economy','family', 'health', 'freedom', 'trust', 'generosity','dystopia_residual']]
y=df['happiness_score']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=0)
lr=LinearRegression()
lr.fit(X,y)
predictions_lr=lr.predict(X_test)
print('MAE_Linear Regression=', metrics.mean_absolute_error(y_test,predictions_lr))
print('MSE_Linear Regression=', metrics.mean_squared_error(y_test,predictions_lr))
print('RMSE_Linear Regression=', np.sqrt(metrics.mean_squared_error(y_test,predictions_lr)))
print('MAPE_Linear Regression=', 100*metrics.mean_absolute_error(y_test,predictions_lr)/df['happiness_score'].mean())
print('R2 Score_Linear Regression=',metrics.r2_score(y_test,predictions_lr))
plt.figure(figsize=(8,6))
plt.scatter(x=y_test,y=predictions_lr, color='r')
plt.plot(y_test,y_test, color='b')
plt.xlabel('Actual Happiness Score',fontsize=14)
plt.ylabel('Predicted Happiness Score',fontsize=14)
plt.title('Linear Regression',fontsize=18)
plt.show()
dtr=DecisionTreeRegressor()
dtr.fit(X_train,y_train)
predictions_dtr=dtr.predict(X_test)
print('MAE_Decision Tree Regression=', metrics.mean_absolute_error(y_test,predictions_dtr))
print('MSE_Decision Tree Regression=', metrics.mean_squared_error(y_test,predictions_dtr))
print('RMSE_Decision Tree Regression=', np.sqrt(metrics.mean_squared_error(y_test,predictions_dtr)))
print('MAPE_Decision Tree Regression=', 100*metrics.mean_absolute_error(y_test,predictions_dtr)/df['happiness_score'].mean())
print('R2 Score_Decision Tree Regression=',metrics.r2_score(y_test,predictions_dtr))
plt.figure(figsize=(8,6))
plt.scatter(x=y_test, y=predictions_dtr, color='r')
plt.plot(y_test,y_test, color='b')
plt.xlabel('Actual Sensitivity',fontsize=14)
plt.ylabel('Predicted Sensitivity',fontsize=14)
plt.title('Decision Tree Regression',fontsize=18)
plt.show()
rfr=RandomForestRegressor(n_estimators=200)
rfr.fit(X_train,y_train)
predictions_rfr=rfr.predict(X_test)
print('MAE_Random Forest Regression=', metrics.mean_absolute_error(y_test,predictions_rfr))
print('MSE_Random Forest Regression=', metrics.mean_squared_error(y_test,predictions_rfr))
print('RMSE_Random Forest Regression=', np.sqrt(metrics.mean_squared_error(y_test,predictions_rfr)))
print('MAPE_Random Forest Regression=', 100*metrics.mean_absolute_error(y_test,predictions_rfr)/df['happiness_score'].mean())
print('R2 Score_Random Forest Regression=',metrics.r2_score(y_test,predictions_rfr))
plt.figure(figsize=(8,6))
plt.scatter(x=y_test, y=predictions_rfr, color='r')
plt.plot(y_test,y_test, color='b')
plt.xlabel('Actual Sensitivity',fontsize=14)
plt.ylabel('Predicted Sensitivity',fontsize=14)
plt.title('Random Forest Regression' ,fontsize=18)
plt.show()
svr=SVR(gamma='auto')
svr.fit(X_train,y_train)
predictions_svr=svr.predict(X_test)
print('MAE_Support Vector Regression=', metrics.mean_absolute_error(y_test,predictions_svr))
print('MSE_Support Vector Regression=', metrics.mean_squared_error(y_test,predictions_svr))
print('RMSE_Support Vector Regression=', np.sqrt(metrics.mean_squared_error(y_test,predictions_svr)))
print('MAPE_Support Vector Regression=', 100*metrics.mean_absolute_error(y_test,predictions_svr)/df['happiness_score'].mean())
print('R2 Score_Support Vector Regression=',metrics.r2_score(y_test,predictions_svr))
plt.figure(figsize=(8,6))
plt.scatter(x=y_test, y=predictions_svr, color='r')
plt.plot(y_test,y_test, color='b')
plt.xlabel('Actual Sensitivity',fontsize=14)
plt.ylabel('Predicted Sensitivity',fontsize=14)
plt.title('Support Vector Regression',fontsize=18)
plt.show()
xgbr= xgb.XGBRegressor(n_estimators=100, learning_rate=0.08, gamma=0, subsample=0.75, colsample_bytree=1, max_depth=7)
xgbr.fit(X_train,y_train)
predictions_xgbr=xgbr.predict(X_test)
print('MAE_XGBoost Regression=', metrics.mean_absolute_error(y_test,predictions_xgbr))
print('MSE_XGBoost Regression=', metrics.mean_squared_error(y_test,predictions_xgbr))
print('RMSE_XGBoost Regression=', np.sqrt(metrics.mean_squared_error(y_test,predictions_xgbr)))
print('MAPE_XGBoost Regression=', 100*metrics.mean_absolute_error(y_test,predictions_xgbr)/df['happiness_score'].mean())
print('R2 Score_XGBoost Regression=',metrics.r2_score(y_test,predictions_svr))
plt.figure(figsize=(8,6))
plt.scatter(x=y_test, y=predictions_xgbr, color='r')
plt.plot(y_test,y_test, color='b')
plt.xlabel('Actual Sensitivity',fontsize=14)
plt.ylabel('Predicted Sensitivity',fontsize=14)
plt.title('XGBoost Regression',fontsize=18)
plt.show()