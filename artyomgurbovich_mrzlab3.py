########################################################################################

# Лабораторная работа 3 по дисциплине МРЗвИС

# Выполнена студентом группы 721702

# БГУИР Гурбович Артём Игоревич

#

# Вариант 9

#

# 25.10.2019



from matplotlib import pyplot as plt

import numpy as np
def show_image_from_array(arr):

    plt.imshow(arr, interpolation='nearest', cmap='gray')

    plt.show()

    

def activation_function(arr):

    return np.tanh(arr)
h, w = 7, 7

W = np.zeros((h*w, w*h))
X = [[[ -1,  1, -1, -1, -1, -1, -1],

      [ -1,  1, -1, -1, -1, -1, -1],

      [ -1,  1, -1, -1, -1, -1, -1],

      [ -1,  1, -1, -1, -1, -1, -1],

      [ -1,  1, -1, -1, -1, -1, -1],

      [ -1,  1, -1, -1, -1, -1, -1],

      [ -1,  1,  1,  1,  1, -1, -1]],

     

     [[ -1, -1,  1,  1,  1, -1, -1],

      [ -1,  1, -1, -1, -1,  1, -1],

      [ -1,  1, -1, -1, -1,  1, -1],

      [ -1,  1,  1,  1,  1,  1, -1],

      [ -1,  1, -1, -1, -1,  1, -1],

      [ -1,  1, -1, -1, -1,  1, -1],

      [ -1,  1, -1, -1, -1,  1, -1]],

     

     [[ -1,  1,  1,  1,  1, -1, -1],

      [ -1,  1, -1, -1, -1,  1, -1],

      [ -1,  1, -1, -1, -1,  1, -1],

      [ -1,  1,  1,  1,  1, -1, -1],

      [ -1,  1, -1, -1, -1,  1, -1],

      [ -1,  1, -1, -1, -1,  1, -1],

      [ -1,  1,  1,  1,  1, -1, -1]],

     

     [[ -1,  1,  1,  1,  1, -1, -1],

      [ -1, -1, -1, -1, -1,  1, -1],

      [ -1, -1, -1, -1, -1,  1, -1],

      [ -1,  1,  1,  1,  1, -1, -1],

      [ -1, -1, -1, -1, -1,  1, -1],

      [ -1, -1, -1, -1, -1,  1, -1],

      [ -1,  1,  1,  1,  1, -1, -1]]]



noisy_images = [[[  1, -1, -1, -1, -1, -1, -1],

                 [ -1,  1, -1, -1, -1, -1, -1],

                 [ -1, -1,  1, -1, -1, -1, -1],

                 [ -1,  1, -1, -1, -1, -1, -1],

                 [ -1,  1, -1, -1, -1, -1, -1],

                 [ -1,  1, -1,  1, -1, -1, -1],

                 [ -1,  1,  1, -1,  1, -1, -1]],

                

                [[ -1, -1,  1,  1,  1, -1, -1],

                 [ -1,  1, -1, -1, -1, -1,  1],

                 [  1, -1, -1, -1, -1,  1, -1],

                 [ -1,  1,  1,  1,  1,  1, -1],

                 [ -1,  1, -1, -1, -1,  1, -1],

                 [ -1,  1, -1, -1, -1, -1,  1],

                 [  1, -1, -1, -1, -1,  1, -1]],

                

                [[ -1,  1,  1,  1, -1, -1, -1],

                 [  1, -1, -1, -1,  1,  1, -1],

                 [ -1,  1, -1, -1, -1,  1, -1],

                 [ -1,  1,  1,  1,  1, -1, -1],

                 [ -1,  1, -1, -1, -1,  1, -1],

                 [ -1,  1, -1,  1, -1,  1, -1],

                 [ -1,  1,  1, -1,  1, -1, -1]],

                

                [[ -1,  1, -1,  1,  1, -1, -1],

                 [ -1, -1,  1, -1, -1,  1, -1],

                 [ -1, -1, -1, -1, -1,  1, -1],

                 [ -1,  1,  1,  1,  1, -1, -1],

                 [ -1, -1, -1, -1, -1,  1, -1],

                 [ -1,  1, -1,  1, -1, -1,  1],

                 [ -1, -1,  1, -1,  1, -1, -1]]]



X = np.array(X).reshape((4,1, h*w))

noisy_images = np.array(noisy_images).reshape((4,1, h*w))
for i in range(4):

    W += ((((W @ np.transpose(X[i]) - np.transpose(X[i]))) @ np.transpose((W @ np.transpose(X[i])) - np.transpose(X[i]))) / ((X[i] @ np.transpose(X[i])) - ((X[i] @ W) @ np.transpose(X[i]))))

    

# https://www.researchgate.net/publication/306105318_SRAVNENIE_ALGORITMOV_RASPOZNAVANIA_OBRAZOV_NEJRONNYMI_SETAMI_HOPFILDA
result = np.zeros((4, 1, h*w))

for i in range(4):

    result[i] = activation_function(noisy_images[i] @ W)

    for j in range(10000):

        result[i] = activation_function(result[i] @ W)
result = result.reshape((4, h, w))

show_image_from_array(result[0])

show_image_from_array(result[1])

show_image_from_array(result[2])

show_image_from_array(result[3])