import os

with open('../input/niu-dime-novels/nickelsDimes_text/dimenovels_32793.txt') as novel_file:

    novel_text = novel_file.read()



print('Sweet; you have the novel text available to you now.')
working_numbers = [100, 101, 102, 104, 105, 106, 107, 109, 110, 112, 113, 114, 115, 116, 117,

118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132,

133, 134, 135, 136, 13623, 13695, 137, 13702, 13706, 13720, 13727, 13748,

13754, 13760, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150,

151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166,

16754, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182,

183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199,

200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 21262, 213,

214, 215, 216, 217, 21755, 21756, 21759, 21760, 21761, 21764, 21772, 21773,

21774, 21776, 21777, 21778, 21779, 21780, 21783, 21785, 21786, 21788, 21792,

21794, 21795, 21796, 21798, 218, 21803, 21807, 21808, 21810, 21813, 21814,

21817, 21818, 21822, 21823, 21826, 21827, 21829, 21831, 21833, 21837, 21838,

21839, 21840, 21845, 21849, 21851, 21852, 21853, 21858, 21859, 21861, 21862,

21864, 21866, 21871, 21872, 21874, 21875, 21877, 21879, 21880, 21883, 21885,

21888, 21890, 21895, 21896, 21897, 219, 21909, 21910, 21911, 21912, 21917,

21918, 21919, 21922, 21924, 21925, 21926, 21931, 21932, 21945, 21948, 21950,

21951, 21963, 21964, 21966, 21968, 21970, 21971, 21974, 21980, 21982, 21983,

21984, 21985, 21986, 21987, 21992, 21993, 21995, 21997, 21998, 220, 22000,

22004, 22006, 22007, 22008, 22009, 22010, 22011, 22012, 22013, 22014, 22015,

22016, 22017, 22018, 22019, 22020, 22021, 22022, 22023, 22024, 22025, 22026,

22027, 22028, 22029, 22030, 22031, 22032, 22033, 22034, 22035, 22036, 22037,

22038, 22039, 22040, 22041, 22042, 22043, 22044, 22045, 22046, 22047, 22048,

22049, 22050, 22051, 22052, 22053, 22054, 22055, 22056, 22057, 22058, 22059,

22060, 22061, 22062, 22063, 22064, 22065, 22066, 22067, 22068, 22069, 22070,

221, 222, 223, 224, 225, 226, 227, 22764, 22767, 22769, 22771, 228, 229, 230,

231, 232, 233, 234, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247,

248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 27617,

28425, 28426, 28427, 28428, 28429, 28431, 28432, 28433, 28434, 28435, 28436,

28437, 28439, 28440, 28441, 28442, 28443, 28444, 29950, 29951, 29952, 29953,

29965, 29967, 29968, 29969, 29970, 31700, 31702, 31703, 31704, 31709, 31711,

31713, 31715, 31719, 32196, 32233, 32270, 32792, 32793, 32794, 32795, 32796,

32814, 32815, 32816, 32818, 32819, 32823, 32824, 32971, 32972, 33660, 33697,

33735, 33772, 33809, 33846, 33883, 34191, 35578, 35615, 35858, 35895, 35932,

36069, 36288, 36308, 36342, 36344, 37686, 37722, 37758, 37794, 37864, 37898,

37933, 37967, 38001, 38036, 38069, 38506, 38543, 38578, 38612, 38647, 38680,

38715, 38752, 38788, 38824, 38858, 38892, 38926, 38960, 38994, 39029, 39064,

39099, 39134, 39168, 39203, 39238, 39273, 39309, 39344, 39380, 39414, 39448,

39482, 39516, 39550, 39585, 39620, 39655, 39690, 39725, 39760, 39794, 39829,

39864, 39899, 39933, 39967, 40002, 40037, 40071, 40106, 40140, 40174, 40208,

40244, 40280, 40316, 40352, 40389, 40424, 40458, 40492, 40526, 40560, 40597,

40631, 40701, 40737, 40771, 40805, 40839, 40873, 40907, 40941, 40975, 41009,

41043, 41077, 41111, 41145, 41247, 41280, 41315, 41350, 41385, 41419, 41454,

41491, 41528, 41563, 41598, 41635, 41670, 41705, 41741, 41776, 41811, 41846,

41881, 41916, 41951, 41986, 42, 42021, 42057, 42093, 42128, 42160, 42193,

42226, 42260, 42293, 42328, 42363, 42398, 42433, 42466, 42501, 42536, 42570,

42603, 42636, 42671, 42706, 42743, 42780, 42817, 42852, 42889, 42926, 42963,

43, 43000, 43037, 43074, 43148, 43185, 43222, 43259, 43296, 43333, 43370,

43407, 43444, 43481, 43518, 43555, 43592, 43629, 43666, 43703, 43740, 43775,

43812, 43849, 43884, 43919, 43954, 43991, 44, 44028, 44063, 44098, 44133,

44168, 44203, 44238, 44275, 44312, 44349, 44386, 44423, 44460, 44497, 44534,

44571, 44608, 44643, 44680, 44717, 44754, 44791, 44826, 44861, 44896, 44933,

44968, 45, 45003, 45480, 45517, 45552, 45587, 45624, 45661, 45698, 45735,

45772, 45809, 45846, 45883, 45920, 45957, 45994, 46, 46031, 46068, 46105,

46142, 46179, 46216, 46253, 46290, 46327, 46364, 46401, 46438, 46475, 46510,

46545, 46582, 46617, 46652, 46687, 46722, 46757, 46794, 46831, 46868, 46905,

46940, 46975, 47, 47012, 47047, 47082, 47117, 47154, 47189, 47224, 47261,

47298, 47335, 47372, 47409, 47446, 47483, 47520, 47557, 47594, 47629, 47666,

47703, 47740, 47777, 47814, 47847, 47884, 47918, 47953, 47990, 48, 48025,

48060, 48095, 48132, 48169, 48206, 48243, 48278, 48315, 48352, 48389, 48426,

48461, 48496, 48533, 48570, 48607, 48644, 48681, 48716, 48753, 48790, 48827,

48864, 48901, 48938, 48975, 49, 49012, 49049, 49086, 49122, 49155, 49194,

49231, 49268, 49303, 49338, 49373, 49408, 49443, 49478, 49513, 49548, 49583,

49620, 49657, 49694, 49731, 49766, 49801, 49836, 49873, 49910, 49947, 49984,

50, 50021, 50058, 50095, 50132, 50169, 50206, 50243, 50280, 50317, 50354,

50391, 50428, 50463, 50500, 50537, 50574, 50611, 50648, 50685, 50722, 50759,

50796, 50833, 50870, 50907, 50944, 50979, 51, 51014, 51049, 51086, 51122,

51159, 51196, 51233, 51270, 51307, 51344, 51380, 51417, 51454, 51491, 51528,

51565, 51600, 51637, 51674, 51711, 51748, 51787, 51824, 51858, 51895, 51932,

51969, 52, 52006, 52041, 52074, 52109, 52144, 52179, 52214, 52249, 52284,

52319, 52354, 52389, 52424, 52461, 52498, 52535, 52572, 52609, 52646, 52683,

52720, 52757, 52794, 52831, 52868, 52905, 52940, 52975, 53, 53012, 53049,

53086, 53123, 53160, 53197, 53234, 53269, 53304, 53339, 53374, 53406, 53441,

53476, 53511, 53546, 53581, 53616, 53651, 53686, 53721, 53756, 53791, 53826,

53861, 53896, 53931, 53964, 53999, 54, 54036, 54073, 54110, 54147, 54184,

54221, 54256, 54293, 54330, 54365, 54399, 54436, 54473, 54508, 54548, 54585,

54620, 54655, 54690, 54721, 54754, 54789, 54824, 54859, 54894, 54929, 54964,

54999, 55, 55034, 55069, 55104, 55139, 55174, 55209, 55244, 55279, 55316,

55353, 55390, 55425, 55462, 55499, 55536, 55573, 55610, 55647, 55684, 55721,

55758, 55795, 55832, 55869, 55906, 55943, 55980, 56, 56017, 56054, 56091,

56128, 56165, 56202, 56239, 56276, 56313, 56350, 56387, 56424, 56461, 56498,

56535, 56572, 56609, 56646, 56683, 56720, 56757, 56792, 56829, 56866, 56903,

56938, 56975, 57, 57006, 57041, 57076, 57111, 57144, 57179, 57213, 57248,

57283, 57318, 57352, 57387, 57422, 57457, 57494, 57531, 57568, 57605, 57642,

57679, 57716, 57753, 57788, 57821, 57856, 57891, 57963, 57999, 58, 58036,

58073, 58108, 58143, 58176, 58211, 58246, 58279, 58512, 58549, 58586, 58623,

58638, 58675, 58712, 58749, 58786, 58823, 58860, 58897, 58934, 58971, 59,

59008, 59045, 59082, 59119, 59156, 59193, 59230, 59267, 59304, 59341, 59363,

59398, 59435, 59472, 59509, 59546, 59583, 59620, 59657, 59694, 59731, 59768,

59805, 59842, 59879, 59916, 59953, 59990, 60, 60064, 60101, 60138, 60175,

60212, 60451, 60488, 60525, 60562, 60597, 60632, 60667, 60702, 60739, 60776,

60813, 60850, 60885, 60922, 60959, 60994, 61, 61031, 61068, 61105, 61142,

61179, 61216, 61251, 61288, 61325, 61362, 61399, 61436, 61473, 61508, 61543,

61579, 61616, 61653, 61686, 61721, 61758, 61793, 61826, 61861, 61896, 61933,

61970, 62, 62007, 62042, 62077, 62114, 62147, 62384, 62420, 62457, 62494,

62531, 62568, 62605, 62641, 62678, 62715, 62750, 62785, 62820, 62857, 62892,

62927, 62962, 62999, 63, 6302, 63034, 63071, 63108, 63145, 63180, 63215, 6354,

63652, 63687, 63722, 63757, 63794, 63829, 63866, 63903, 63938, 63975, 64,

64010, 64047, 64084, 64121, 6415, 64156, 64193, 64230, 64267, 64304, 64339,

64376, 64411, 64448, 64485, 65, 65205, 65242, 65279, 65316, 65353, 65390,

65427, 65462, 65497, 65534, 65568, 65602, 65639, 65673, 65707, 65741, 65775,

65809, 65843, 65877, 65911, 65946, 65980, 66, 66867, 66904, 66941, 66978, 67,

67015, 67052, 67089, 67126, 67163, 67200, 67237, 67274, 67311, 67349, 67386,

67423, 67459, 67492, 67527, 67564, 67599, 67634, 67669, 67707, 68, 6838, 6840,

6841, 6843, 6844, 6845, 68756, 68794, 68832, 68867, 68902, 68936, 68971, 69,

69041, 69076, 69110, 69180, 69215, 69249, 69284, 69319, 69354, 69388, 69423,

69460, 69498, 70, 70902, 70939, 70976, 71, 71013, 71050, 71087, 71124, 71161,

71198, 71235, 71272, 71309, 71346, 71383, 71420, 71494, 71531, 71568, 71605,

71642, 71679, 71714, 71751, 72, 72333, 72370, 72407, 72444, 72481, 72519,

72556, 72593, 72628, 72663, 72698, 72733, 72768, 72803, 72837, 72872, 72907,

72941, 72977, 73, 73011, 73045, 73079, 73114, 73148, 73504, 73538, 73572,

73606, 73640, 73672, 73706, 73740, 73774, 73808, 73842, 73877, 73911, 73946,

73980, 74, 74014, 74089, 74127, 74164, 74202, 74239, 74276, 74942, 74976, 75,

75010, 75044, 75078, 75112, 75146, 75180, 75214, 75248, 75282, 75316, 75350,

75384, 75421, 75455, 75489, 75523, 75560, 75594, 75628, 75662, 75696, 75730,

75764, 75798, 75835, 75869, 75903, 75937, 75971, 76, 76008, 76042, 76113,

76147, 76181, 76215, 76252, 76286, 76320, 76357, 76390, 76427, 76476, 76513,

76550, 76587, 76624, 76659, 76694, 76729, 76764, 76801, 76838, 76875, 76912,

76949, 76986, 77021, 77056, 77093, 77130, 77167, 77204, 77239, 77276, 77311,

77348, 77385, 77420, 77455, 77492, 77527, 77562, 77598, 77635, 77672, 77708,

77743, 77778, 77813, 77848, 77882, 77917, 77952, 77986, 78, 78022, 78059,

78096, 78133, 78170, 78207, 78244, 78281, 78318, 78355, 78392, 78429, 78466,

78503, 78540, 78577, 78612, 78647, 78682, 78717, 78752, 78787, 78824, 78861,

78898, 78935, 78972, 79, 79009, 79044, 79079, 79114, 79149, 79184, 79219,

79254, 79289, 79324, 79359, 79394, 79429, 79464, 79499, 79533, 79568, 79603,

79638, 79673, 79710, 79745, 79782, 79817, 79854, 79891, 79928, 79962, 79997,

80, 80032, 80066, 80103, 80140, 80175, 80212, 80249, 80286, 80323, 80360,

80397, 80434, 80471, 80508, 80545, 80582, 80619, 80656, 80693, 81220, 81253,

81290, 81327, 81365, 81402, 81438, 81473, 81508, 81543, 81579, 8161, 81614,

8162, 8164, 81651, 8166, 8168, 81688, 8169, 8170, 81725, 81762, 81799, 81835,

81870, 8189, 81905, 81940, 81975, 82, 82010, 82045, 82080, 82115, 82150,

82186, 82221, 82256, 82291, 82326, 82361, 82396, 82431, 82466, 82500, 82535,

82570, 82605, 82640, 82675, 82710, 82745, 82949, 82986, 83, 83023, 83060,

83097, 83134, 83171, 83208, 83245, 83282, 83319, 83356, 83393, 83430, 83467,

83504, 83541, 83578, 83615, 83652, 83689, 83726, 83763, 83800, 83837, 83874,

83911, 83948, 83985, 84, 84022, 84059, 84096, 85, 85835, 85872, 85909, 85946,

85983, 86, 86020, 86057, 86094, 86131, 86168, 86205, 86242, 86279, 86316,

86353, 86390, 86427, 86464, 86501, 86538, 86575, 86612, 86649, 86680, 86717,

86754, 86791, 86828, 86864, 86899, 86934, 86971, 87, 87008, 87045, 87082,

87119, 87156, 87193, 87230, 87267, 87304, 87341, 87378, 87415, 87452, 87489,

87526, 87563, 87600, 87637, 87674, 87711, 87748, 87785, 87820, 87893, 87930,

88, 88003, 88076, 88110, 88144, 88398, 88600, 89, 90, 91, 92, 93, 94, 9475,

95, 96, 97, 98, 99]
from nltk.tokenize import word_tokenize



info = """Here's what we get with the simplest possible tokenization: splitting

the text at each space. I've shown you a sample from a few hundred tokens

into the novel so that we can skip over the front matter (which OCR

doesn't handle very well).

"""

print(info)

print(novel_text.split(' ')[185:285])



info = """

And here's what we get with a more intelligent tokenizer. For

instance, it knows about punctuation, so it tries to split it apart

from words, and also recognizes that periods and newlines can be

word boundaries. We can always throw out this punctuation later if

we only want alphanumeric content.



Watch this example change as we process it more in subsequent code.

"""

print(info)

tokenized_text = word_tokenize(novel_text)

short_example = tokenized_text[309:409]

print(short_example)
import re, string

from nltk.corpus import stopwords



# Remove punctuation and lowercase everything.

punct = set(string.punctuation + '‘' + '“')

word_text = [word.lower() for word in tokenized_text if (set(word) - punct) ]

short_example = [word.lower() for word in short_example if (set(word) - punct) ]

print(short_example)



# Remove stopwords.

stops = set(stopwords.words('english'))

word_text = [word for word in word_text if not word in stops]

short_example = [word for word in short_example if not word in stops]

print(short_example)

from nltk.stem.porter import PorterStemmer



stemmer = PorterStemmer()



word_text = [stemmer.stem(word) for word in word_text]

short_example = [stemmer.stem(word) for word in short_example]



print("""Compare this to the previous example. Do you see how some words have

had grammatical indicators removed? For instance, 'smuggling' is now 'smuggl'.

Why is this important?

""")

print(short_example)
from sklearn.feature_extraction.text import TfidfVectorizer



documents = []

numbers_for_use = working_numbers[360:390]

for number in numbers_for_use:

    filename = '../input/niu-dime-novels/nickelsDimes_text/dimenovels_%d.txt' % number

    with open(filename) as novel_file:

        documents.append(novel_file.read())



# This performs the same preprocessing steps we walked through above, but in

# a format the TfidfVectorizer can use.

class LocalTokenizer:

    def __call__(self, doc):

        # Tokenize.

        words = word_tokenize(doc)

        # Remove junk.

        words = [word.lower() for word in words if (set(word) - punct) ]

        # Remove stopwords.

        words = [word for word in words if not word in stops]

        # Stemmatize.

        words = [stemmer.stem(word) for word in words]

        return words



print("Time to vectorize (this will take a while)")

vectorizer = TfidfVectorizer(tokenizer=LocalTokenizer())

transformed_documents = vectorizer.fit_transform(documents)

print("Vectorization complete!")

from sklearn.metrics.pairwise import linear_kernel



cosine_similarities = linear_kernel(transformed_documents[0:1], transformed_documents).flatten()

top_five_most_similar = cosine_similarities.argsort()[:-6:-1]



print("Using cosine similarity, I think the most similar documents are...")

for n in top_five_most_similar:

    print("dimenovels_%d.txt" % numbers_for_use[n])



print("Do you think these are similar?")
from sklearn.cluster import KMeans



number_of_clusters = 5

km = KMeans(n_clusters=number_of_clusters, init='k-means++', max_iter=100, n_init=1)



clusters = km.fit(transformed_documents)

clustered_docs = dict.fromkeys(clusters.labels_, [])



for label, doc in zip(clusters.labels_, numbers_for_use):

    clustered_docs[label].append(doc)



for k, v in clustered_docs.items():

    print("Cluster number %d is" % k)

    print(v)

    print("\n")



sample_text = "The heroic Nick Carter"

cluster = km.predict(vectorizer.transform([sample_text]))

print("Example: '{sample_text}'. I think that this example belongs to {cluster}".format(sample_text=sample_text, cluster=cluster))

import spacy



nlp = spacy.load("en_core_web_sm")



# We use our base novel text, with no preprocessing, because 1) spacy expects

# a string, not a list, and 2) stemmatization will confuse the entity recognizer.

doc = nlp(novel_text)



print("""

This will try to extract all people (PERSON); countries, cities, or states (GPE);

and other miscellaneous locations (FAC). It will take a while. For ease of reading,

it will only display any given entity once though it may appear multiple times.

""")

already_seen = []

for ent in doc.ents:

    if ent.label_ not in ['PERSON', 'GPE', 'FAC']:

        continue



    if ent.text not in already_seen:

        print(" %s: %s" % (ent.label_, ent.text))

    

    already_seen.append(ent.text)

from sklearn.decomposition import NMF



number_of_topics = 5

number_of_words = 10



def display_topics(model, feature_names, num):

    for topic_idx, topic in enumerate(model.components_):

        print("Topic %d:" % (topic_idx))

        print(" ".join([feature_names[i]

                        for i in topic.argsort()[:-num - 1:-1]]))

        print("\n")



print("This will take a little while...")



nmf = NMF(n_components=number_of_topics, random_state=1, alpha=.1, l1_ratio=.5, init='nndsvd').fit(transformed_documents)

display_topics(nmf, vectorizer.get_feature_names(), number_of_words)