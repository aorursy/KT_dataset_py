import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
warnings.filterwarnings('ignore')
loan_data = data = pd.read_excel('../input/bank-loan-modelling/Bank_Personal_Loan_Modelling.xlsx','Data')
loan_data.head()
loan_data.shape
loan_data.info()
loan_data.isnull().sum()
loan_data.describe()
edu_exp = loan_data.groupby("Education").Experience.mean().sort_values(ascending=True)
edu_exp
age_exp = loan_data.groupby('Age')['Experience'].mean().sort_values(ascending=False).reset_index()
age_exp
plt.figure(figsize=(10,7))
sns.lmplot(x="Age", y="Experience", data=age_exp)
plt.ylabel("Experience (Average)")
plt.title("Average of Experience by Age")
loan_data.Experience.unique()
loan_data[loan_data["Experience"]<0][["Age","Experience"]]
neg_age_exp = loan_data[loan_data["Experience"]<0][["Age","Experience"]]
neg_age_exp.Age.unique()
loan_data["Experience"] = loan_data["Experience"].abs()
loan_data[loan_data["Experience"]<0][["Age","Experience"]]
summ = loan_data.describe()
pd.DataFrame(summ, columns=summ.columns).transpose()
corr = loan_data.corr()
plt.subplots(figsize=(10,10));
sns.heatmap(corr, annot=True, cmap="RdBu", square=True)
plt.title("Correlation Matrix")
plt.tight_layout()
plt.figure(figsize=(16,5))
corr["Personal Loan"].sort_values(ascending=True)[:-1].plot(kind="barh")
plt.title("Correlation of features to Personal Loan\n", fontsize=15)
plt.xlabel("\nCorrelation to Personal Loan")
plt.tight_layout()
plt.show()
sns.distplot(loan_data["Mortgage"])
plt.title("Mortgage Distribution with KDE")
SingleLog_y = np.log1p(loan_data["Mortgage"])
sns.distplot(SingleLog_y, color ="r")
plt.title("Mortgage Distribution after First Log Transformation")
DoubleLog_y = np.log1p(SingleLog_y)
sns.distplot(DoubleLog_y, color ="g")
plt.title("Mortgage Distribution after Second Transformation")
loan_data["Mortgage"] = DoubleLog_y
sns.distplot(loan_data['Experience'])
plt.title("Distribution of Experience")
fig, axes = plt.subplots(1, 2, figsize=(10,5))
sns.distplot(loan_data['Income'], ax=axes[0])
sns.boxplot(loan_data['Income'], orient="v", palette="Set2", ax=axes[1])
plt.tight_layout()
income_log = np.log(loan_data["Income"])
sns.distplot(income_log, color ="g")
plt.title("Income Distribution after Log Transformation")
income_2nd_log = np.log(income_log)
sns.distplot(income_2nd_log, color ="g")
plt.title("Income Distribution after Second Log Transformation")
from sklearn.preprocessing import PowerTransformer
pt = PowerTransformer(method="yeo-johnson", standardize=False)
pt.fit(loan_data["Income"].values.reshape(-1, 1))

temp_income = pt.transform(loan_data["Income"].values.reshape(-1, 1))

fig, axes = plt.subplots(1, 2, figsize=(10,5))
sns.distplot(temp_income, ax=axes[0])
sns.boxplot(temp_income, orient="v", palette="Set2", ax=axes[1])
plt.tight_layout()
loan_data['Income'] = temp_income
fig, axes = plt.subplots(1, 2, figsize=(10,5))
sns.distplot(loan_data['CCAvg'], ax=axes[0])
sns.boxplot(loan_data['CCAvg'], orient="v", palette="Set2", ax=axes[1])
plt.tight_layout()
from sklearn.preprocessing import PowerTransformer
pt = PowerTransformer(method="yeo-johnson", standardize=False)
pt.fit(loan_data["CCAvg"].values.reshape(-1, 1))

temp_ccavg = pt.transform(loan_data["CCAvg"].values.reshape(-1, 1))

fig, axes = plt.subplots(1, 2, figsize=(10,5))
sns.distplot(temp_ccavg, ax=axes[0])
sns.boxplot(temp_ccavg, orient="v", palette="Set2", ax=axes[1])
plt.tight_layout()
loan_data['CCAvg'] = temp_ccavg
sns.distplot(loan_data['Education'])
plt.title("Distribution of Education")
loan_data["Personal Loan"].value_counts()
fig1, ax1 = plt.subplots()
explode = (0, 0.10, 0.10)
ax1.pie(loan_data["Education"].value_counts(), explode=explode, labels=["1 : Advanced/Professional", "2 : Graduate", "3: Undergrad"], autopct='%1.1f%%',
        shadow=True, startangle=70)
ax1.axis('equal')
plt.title("Education Level Percentage")
plt.show()
fig1, ax1 = plt.subplots()
explode = (0.10, 0.10, 0.10, 0.10)
ax1.pie(loan_data["Family"].value_counts(), explode=explode, labels=["1 : Family of 1", "2 : Family of 2", "3 : Family of 3", "4 : Family of 4"], autopct='%1.1f%%',
        shadow=True, startangle=70)
ax1.axis('equal')
plt.title("Education Level Percentage")
plt.show()
fig1, ax1 = plt.subplots()
explode = (0, 0.15)
ax1.pie(loan_data["Personal Loan"].value_counts(), explode=explode, labels=["0 : Didn't Bought", "1 : Bought"], autopct='%1.1f%%',
        shadow=True, startangle=70)
ax1.axis('equal')
plt.title("Personal Loan Percentage")
plt.show()
plt.figure(figsize=(10,6))
sns.distplot(loan_data[loan_data["Personal Loan"] == 0]['Income'], color = 'r',label='Personal Loan=0',kde=True)
sns.distplot(loan_data[loan_data["Personal Loan"] == 1]['Income'], color = 'b',label='Personal Loan=1',kde=True)
plt.legend()
plt.title("Income Distribution", fontsize=15)
plt.figure(figsize=(10,6))
sns.distplot(loan_data[loan_data["Personal Loan"] == 0]['CCAvg'], color = 'r',label='Personal Loan=0',kde=True)
sns.distplot(loan_data[loan_data["Personal Loan"] == 1]['CCAvg'], color = 'b',label='Personal Loan=1',kde=True)
plt.legend()
plt.title("CCAvg Distribution")
plt.figure(figsize=(10,6))
sns.distplot(loan_data[loan_data["Personal Loan"] == 0]['Age'], color = 'r',label='Personal Loan=0',kde=True)
sns.distplot(loan_data[loan_data["Personal Loan"] == 1]['Age'], color = 'b',label='Personal Loan=1',kde=True)
plt.legend()
plt.title("Age Distribution")
plt.figure(figsize=(10,6))
sns.distplot(loan_data[loan_data["Personal Loan"] == 0]['Experience'], color = 'r',label='Personal Loan=0',kde=True)
sns.distplot(loan_data[loan_data["Personal Loan"] == 1]['Experience'], color = 'b',label='Personal Loan=1',kde=True)
plt.legend()
plt.title("Experience Distribution")
plt.figure(figsize=(9,6))
sns.countplot(x="Securities Account", hue="Personal Loan", data=loan_data)
plt.xticks(horizontalalignment='center')
plt.yticks(horizontalalignment='right')
plt.title('Securities Account Countplot', fontsize=15)
plt.xlabel('Securities Account', fontsize=15)
plt.ylabel('Count', fontsize=15)
plt.figure(figsize=(9,6))
sns.countplot(x="Family", hue="Personal Loan", data=loan_data)
plt.xticks(horizontalalignment='center')
plt.yticks(horizontalalignment='right')
plt.title('Family Countplot', fontsize=15)
plt.xlabel('Family', fontsize=15)
plt.ylabel('Count', fontsize=15)
plt.figure(figsize=(9,6))
sns.countplot(x="Education", hue="Personal Loan", data=loan_data)
plt.xticks(horizontalalignment='center')
plt.yticks(horizontalalignment='right')
plt.title('Education Countplot', fontsize=15)
plt.xlabel('Education', fontsize=15)
plt.ylabel('Count', fontsize=15)
plt.figure(figsize=(9,6))
sns.countplot(x="Online", hue="Personal Loan", data=loan_data)
plt.xticks(horizontalalignment='center')
plt.yticks(horizontalalignment='right')
plt.title('Online Countplot', fontsize=15)
plt.xlabel('Online', fontsize=15)
plt.ylabel('Count', fontsize=15)
plt.figure(figsize=(9,6))
sns.countplot(x="CreditCard", hue="Personal Loan", data=loan_data)
plt.xticks(horizontalalignment='center')
plt.yticks(horizontalalignment='right')
plt.title('CreditCard Countplot', fontsize=15)
plt.xlabel('CreditCard', fontsize=15)
plt.ylabel('Count', fontsize=15)
plt.figure(figsize=(9,6))
sns.countplot(x="CD Account", hue="Personal Loan", data=loan_data)
plt.xticks(horizontalalignment='center')
plt.yticks(horizontalalignment='right')
plt.title('CD Account Countplot', fontsize=15)
plt.xlabel('CD Account', fontsize=15)
plt.ylabel('Count', fontsize=15)
plt.figure(figsize=(9,6))
plt.scatter(x=loan_data["Age"], y=loan_data["Income"])
plt.title("Scatter Plot between Age and Income", fontsize=20)
plt.xlabel("Age", fontsize=15)
plt.ylabel("Income", fontsize=15)
plt.xticks(horizontalalignment='center')
plt.yticks(horizontalalignment='right')
plt.tight_layout()
plt.figure(figsize=(9,6))
plt.scatter(x=loan_data["Experience"], y=loan_data["Income"])
plt.title("Scatter Plot between Experience and Income", fontsize=20)
plt.xlabel("Experience", fontsize=15)
plt.ylabel("Income", fontsize=15)
plt.xticks(horizontalalignment='center')
plt.yticks(horizontalalignment='right')
plt.tight_layout()
plt.figure(figsize=(9,6))
plt.scatter(x=loan_data["Income"], y=loan_data["Mortgage"])
plt.title("Scatter Plot between Income and Mortgage", fontsize=20)
plt.xlabel("Income", fontsize=15)
plt.ylabel("Mortgage", fontsize=15)
plt.xticks(horizontalalignment='center')
plt.yticks(horizontalalignment='right')
plt.tight_layout()
plt.figure(figsize=(9,6))
plt.scatter(x=loan_data["Age"], y=loan_data["CCAvg"])
plt.title("Scatter Plot between Age and CCAvg", fontsize=20)
plt.xlabel("Age", fontsize=15)
plt.ylabel("CCAvg", fontsize=15)
plt.xticks(horizontalalignment='center')
plt.yticks(horizontalalignment='right')
plt.tight_layout()
plt.figure(figsize=(9,6))
plt.scatter(x=loan_data["Income"], y=loan_data["CCAvg"])
plt.title("Scatter Plot between Income and CCAvg", fontsize=20)
plt.xlabel("Income", fontsize=15)
plt.ylabel("CCAvg", fontsize=15)
plt.xticks(horizontalalignment='center')
plt.yticks(horizontalalignment='right')
plt.tight_layout()
plt.figure(figsize=(9,6))
plt.scatter(x=loan_data["CCAvg"], y=loan_data["Mortgage"])
plt.title("Scatter Plot between CCAvg and Mortgage", fontsize=20)
plt.xlabel("CCAvg", fontsize=15)
plt.ylabel("Mortgage", fontsize=15)
plt.xticks(horizontalalignment='center')
plt.yticks(horizontalalignment='right')
plt.tight_layout()
plt.figure(figsize=(15,7))
plt.subplot(1,2,1)
ax = sns.boxplot(x='Education',  y='Income', data=loan_data, palette="coolwarm")
ax.set_title("Education and Income Boxplot", fontsize=20)
ax.set_xlabel("Education", fontsize=15)
ax.set_ylabel("Income", fontsize=15)

plt.subplot(1,2,2)
ax1 = sns.boxplot(x='Education',  y='Income', hue='Personal Loan', data=loan_data, palette="Greens")
ax1.set_title("Education and Income Boxplot w.r.t Personal Loan", fontsize=20)
plt.legend(loc='upper center', ncol=2)
ax1.set_xlabel("Education", fontsize=15)
ax1.set_ylabel("Income", fontsize=15)
plt.figure(figsize=(15,7))
plt.subplot(1,2,1)
ax = sns.boxplot(x='Family',  y='Income', data=loan_data, palette="coolwarm")
ax.set_title("Family and Income Boxplot", fontsize=20)
ax.set_xlabel("Family", fontsize=15)
ax.set_ylabel("Income", fontsize=15)

plt.subplot(1,2,2)
ax1 = sns.boxplot(x='Family',  y='Income', hue='Personal Loan', data=loan_data, palette="Greens")
ax1.set_title("Family and Income Boxplot w.r.t Personal Loan", fontsize=20)
plt.legend(loc='upper center', ncol=2)
ax1.set_xlabel("Family", fontsize=15)
ax1.set_ylabel("Income", fontsize=15)
plt.figure(figsize=(15,7))
plt.subplot(1,2,1)
ax = sns.boxplot(x='Securities Account',  y='Income', data=loan_data, palette="coolwarm")
ax.set_title("Securities Account and Income Boxplot", fontsize=15)
ax.set_xlabel("Securities Account", fontsize=15)
ax.set_ylabel("Income", fontsize=15)

plt.subplot(1,2,2)
ax1 = sns.boxplot(x='Securities Account',  y='Income', hue='Personal Loan', data=loan_data, palette="Greens")
ax1.set_title("Securities Account and Income Boxplot w.r.t Personal Loan", fontsize=15)
plt.legend(loc='upper center', ncol=2)
ax1.set_xlabel("Securities Account", fontsize=15)
ax1.set_ylabel("Income", fontsize=15)
plt.figure(figsize=(15,7))
plt.subplot(1,2,1)
ax = sns.boxplot(x='CD Account',  y='Income', data=loan_data, palette="coolwarm")
ax.set_title("CD Account and Income Boxplot", fontsize=20)
ax.set_xlabel("CD Account", fontsize=15)
ax.set_ylabel("Income", fontsize=15)

plt.subplot(1,2,2)
ax1 = sns.boxplot(x='CD Account',  y='Income', hue='Personal Loan', data=loan_data, palette="Greens")
ax1.set_title("CD Account and Income Boxplot w.r.t Personal Loan", fontsize=20)
plt.legend(loc='upper center', ncol=2)
ax1.set_xlabel("CD Account", fontsize=15)
ax1.set_ylabel("Income", fontsize=15)
plt.figure(figsize=(15,7))
plt.subplot(1,2,1)
ax = sns.boxplot(x='Online',  y='Income', data=loan_data, palette="coolwarm")
ax.set_title("Online and Income Boxplot", fontsize=20)
ax.set_xlabel("Online", fontsize=15)
ax.set_ylabel("Income", fontsize=15)

plt.subplot(1,2,2)
ax1 = sns.boxplot(x='Online',  y='Income', hue='Personal Loan', data=loan_data, palette="Greens")
ax1.set_title("Online and Income Boxplot w.r.t Personal Loan", fontsize=20)
plt.legend(loc='upper center', ncol=2)
ax1.set_xlabel("Online", fontsize=15)
ax1.set_ylabel("Income", fontsize=15)
plt.figure(figsize=(15,7))
plt.subplot(1,2,1)
ax = sns.boxplot(x='CreditCard',  y='Income', data=loan_data, palette="coolwarm")
ax.set_title("CreditCard and Income Boxplot", fontsize=20)
ax.set_xlabel("CreditCard", fontsize=15)
ax.set_ylabel("Income", fontsize=15)

plt.subplot(1,2,2)
ax1 = sns.boxplot(x='CreditCard',  y='Income', hue='Personal Loan', data=loan_data, palette="Greens")
ax1.set_title("CreditCard and Income Boxplot w.r.t Personal Loan", fontsize=20)
plt.legend(loc='upper center', ncol=2)
ax1.set_xlabel("CreditCard", fontsize=15)
ax1.set_ylabel("Income", fontsize=15)
plt.figure(figsize=(15,7))
plt.subplot(1,2,1)
ax = sns.boxplot(x='Family',  y='CCAvg', data=loan_data, palette="coolwarm")
ax.set_title("Family and CCAvg Boxplot", fontsize=20)
ax.set_xlabel("Family", fontsize=15)
ax.set_ylabel("CCAvg", fontsize=15)

plt.subplot(1,2,2)
ax1 = sns.boxplot(x='Family',  y='CCAvg', hue='Personal Loan', data=loan_data, palette="Greens")
ax1.set_title("Family and CCAvg Boxplot w.r.t Personal Loan", fontsize=20)
plt.legend(loc='upper center', ncol=2)
ax1.set_xlabel("Family", fontsize=15)
ax1.set_ylabel("CCAvg", fontsize=15)
plt.figure(figsize=(15,7))
plt.subplot(1,2,1)
ax = sns.boxplot(x='CreditCard',  y='CCAvg', data=loan_data, palette="coolwarm")
ax.set_title("CreditCard and CCAvg Boxplot", fontsize=20)
ax.set_xlabel("CreditCard", fontsize=15)
ax.set_ylabel("CCAvg", fontsize=15)

plt.subplot(1,2,2)
ax1 = sns.boxplot(x='CreditCard',  y='CCAvg', hue='Personal Loan', data=loan_data, palette="Greens")
ax1.set_title("CreditCard and CCAvg Boxplot w.r.t Personal Loan", fontsize=20)
plt.legend(loc='upper center', ncol=2)
ax1.set_xlabel("CreditCard", fontsize=15)
ax1.set_ylabel("CCAvg", fontsize=15)
plt.figure(figsize=(15,7))
plt.subplot(1,2,1)
ax = sns.boxplot(x='CD Account',  y='CCAvg', data=loan_data, palette="coolwarm")
ax.set_title("CD Account and CCAvg Boxplot", fontsize=20)
ax.set_xlabel("CD Account", fontsize=15)
ax.set_ylabel("CCAvg", fontsize=15)

plt.subplot(1,2,2)
ax1 = sns.boxplot(x='CD Account',  y='CCAvg', hue='Personal Loan', data=loan_data, palette="Greens")
ax1.set_title("CD Account and CCAvg Boxplot w.r.t Personal Loan", fontsize=20)
plt.legend(loc='upper center', ncol=2)
ax1.set_xlabel("CD Account", fontsize=15)
ax1.set_ylabel("CCAvg", fontsize=15)
plt.figure(figsize=(15,7))
plt.subplot(1,2,1)
ax = sns.boxplot(x='Securities Account',  y='CCAvg', data=loan_data, palette="coolwarm")
ax.set_title("Securities Account and CCAvg Boxplot", fontsize=15)
ax.set_xlabel("Securities Account", fontsize=15)
ax.set_ylabel("CCAvg", fontsize=15)

plt.subplot(1,2,2)
ax1 = sns.boxplot(x='Securities Account',  y='CCAvg', hue='Personal Loan', data=loan_data, palette="Greens")
ax1.set_title("Securities Account and CCAvg Boxplot w.r.t Personal Loan", fontsize=15)
plt.legend(loc='upper center', ncol=2)
ax1.set_xlabel("Securities Account", fontsize=15)
ax1.set_ylabel("CCAvg", fontsize=15)
plt.figure(figsize=(15,7))
plt.subplot(1,2,1)
ax = sns.boxplot(x='Online',  y='CCAvg', data=loan_data, palette="coolwarm")
ax.set_title("Online and CCAvg Boxplot", fontsize=15)
ax.set_xlabel("Online", fontsize=15)
ax.set_ylabel("CCAvg", fontsize=15)

plt.subplot(1,2,2)
ax1 = sns.boxplot(x='Online',  y='CCAvg', hue='Personal Loan', data=loan_data, palette="Greens")
ax1.set_title("Online and CCAvg Boxplot w.r.t Personal Loan", fontsize=15)
plt.legend(loc='upper center', ncol=2)
ax1.set_xlabel("Online", fontsize=15)
ax1.set_ylabel("CCAvg", fontsize=15)
plt.figure(figsize=(15,7))
plt.subplot(1,2,1)
ax = sns.boxplot(x='Education',  y='CCAvg', data=loan_data, palette="coolwarm")
ax.set_title("Education and CCAvg Boxplot", fontsize=15)
ax.set_xlabel("Education", fontsize=15)
ax.set_ylabel("CCAvg", fontsize=15)

plt.subplot(1,2,2)
ax1 = sns.boxplot(x='Education',  y='CCAvg', hue='Personal Loan', data=loan_data, palette="Greens")
ax1.set_title("Education and CCAvg Boxplot w.r.t Personal Loan", fontsize=15)
plt.legend(loc='upper center', ncol=2)
ax1.set_xlabel("Education", fontsize=15)
ax1.set_ylabel("CCAvg", fontsize=15)
loan_data.head()
loan_sel = loan_data.drop(['ID', 'Age', 'ZIP Code'], axis=1)
col_names = ['Experience', 'Income', 'Family', 'CCAvg', 'Education', 'Mortgage', 'Securities Account', 'CD Account', 'Online', 'CreditCard', 'Personal Loan']
loan_sel = loan_sel.loc[:,col_names]
loan_sel.head()
X = loan_sel.iloc[:, :-1].values
y = loan_sel.iloc[:, -1].values
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 1)
from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train[:, [0,1,2,3,4,5]] = sc.fit_transform(X_train[:, [0,1,2,3,4,5]])
X_test[:, [0,1,2,3,4,5]] = sc.transform(X_test[:, [0,1,2,3,4,5]])
from sklearn.linear_model import LogisticRegression
classifier_logis = LogisticRegression(random_state = 0, solver='lbfgs')
classifier_logis.fit(X_train, y_train)
y_pred_logis = classifier_logis.predict(X_test)
from sklearn.metrics import confusion_matrix, accuracy_score, classification_report, roc_curve, roc_auc_score

cm = confusion_matrix(y_test, y_pred_logis)
labels_1 = ['Predicted NO', 'Predicted YES']
labels_2 = ['Actual NO', 'Actual YES']
with sns.axes_style('white'):
    plt.figure()
    ax = sns.heatmap(cm, square=True, xticklabels=labels_1, yticklabels=labels_2, annot=True, cmap=plt.cm.jet, fmt='.00f')
    plt.title("Confusion Matrix for Customer will buy Personal Loan or not")  
from sklearn.metrics import precision_score, recall_score
print (classification_report(y_test, y_pred_logis))
print("Accuracy Score : ", accuracy_score(y_test, y_pred_logis))
l_probs = [0 for _ in range(len(y_test))]
logis_probs = classifier_logis.predict_proba(X_test)
logis_probs = logis_probs[:, 1]
l_auc = roc_auc_score(y_test, l_probs)
logis_auc = roc_auc_score(y_test, logis_probs)
print('Logistic Regression: AUROC = %.3f' % (logis_auc))
l_fpr, l_tpr, _ = roc_curve(y_test, l_probs)
logis_fpr, logis_tpr, _ = roc_curve(y_test, logis_probs)
plt.plot(l_fpr, l_tpr, linestyle='--', label='Random prediction (AUROC = %0.3f)' % l_auc)
plt.plot(logis_fpr, logis_tpr, marker='.', label='Logistic Regression (AUROC = %0.3f)' % logis_auc)
plt.title('ROC Plot')
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.legend()
plt.show()
from sklearn.metrics import cohen_kappa_score

kappa = cohen_kappa_score(y_pred_logis,y_test)
print('Random Forest: Kappa Score = %.3f' % (kappa))
from sklearn.metrics import matthews_corrcoef
matthews_corrcoef(y_test, y_pred_logis)
print("Label 1, Before using SMOTE: {} ".format(sum(y_train==1)))
print("Label 0, Before using SMOTE: {} ".format(sum(y_train==0)))
from imblearn.over_sampling import SMOTE
os = SMOTE(random_state=12)
X_train_os, y_train_os = os.fit_sample(X_train, y_train)
print("Label 1, After using SMOTE: {}".format(sum(y_train_os==1)))
print("Label 0, After using SMOTE: {}".format(sum(y_train_os==0)))
classifier_logis_sm = LogisticRegression(random_state = 0, solver='lbfgs')
classifier_logis_sm.fit(X_train_os, y_train_os)
y_pred_logis = classifier_logis_sm.predict(X_test)
cm = confusion_matrix(y_test, y_pred_logis)
labels_1 = ['Predicted NO', 'Predicted YES']
labels_2 = ['Actual NO', 'Actual YES']
with sns.axes_style('white'):
    plt.figure()
    ax = sns.heatmap(cm, square=True, xticklabels=labels_1, yticklabels=labels_2, annot=True, cmap=plt.cm.jet, fmt='.00f')
    plt.title("Confusion Matrix for Customer will buy Personal Loan or not")
print (classification_report(y_test, y_pred_logis))
print("Accuracy Score : ", accuracy_score(y_test, y_pred_logis))
l_probs = [0 for _ in range(len(y_test))]
logis_probs = classifier_logis_sm.predict_proba(X_test)
logis_probs = logis_probs[:, 1]
l_auc = roc_auc_score(y_test, l_probs)
logis_auc = roc_auc_score(y_test, logis_probs)
print('Logistic Regression: AUROC = %.3f' % (logis_auc))
l_fpr, l_tpr, _ = roc_curve(y_test, l_probs)
logis_fpr, logis_tpr, _ = roc_curve(y_test, logis_probs)
plt.plot(l_fpr, l_tpr, linestyle='--', label='Random prediction (AUROC = %0.3f)' % l_auc)
plt.plot(logis_fpr, logis_tpr, marker='.', label='Logistic Regression (AUROC = %0.3f)' % logis_auc)
plt.title('ROC Plot')
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.legend()
plt.show()
kappa = cohen_kappa_score(y_pred_logis,y_test)
print('Random Forest: Kappa Score = %.3f' % (kappa))
matthews_corrcoef(y_test, y_pred_logis)
param_grid = [{'max_depth': [10,20,30,40,50,80,100], 'max_features' : ['Auto', 'sqrt', '0.2'], 'min_samples_leaf' : [5,10,15,20,30,40,50,60],
               'n_estimators': [10,20,30,50,70,80,100]}]
print("List of grids: \n{}" . format(param_grid))
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import GridSearchCV

classifier_rf = RandomForestClassifier(random_state = 100)
grid_search = GridSearchCV(classifier_rf, param_grid, cv=5, n_jobs=-1)
grid_search.fit(X, y)
print("Best parameters: {}" . format(grid_search. best_params_))
print("Best cross-validation score: {:.2f}" . format(grid_search. best_score_))
classifier_rf = RandomForestClassifier(n_estimators = 30, max_depth = 20, max_features = 'sqrt', min_samples_leaf = 5, random_state = 100)
classifier_rf.fit(X_train, y_train)
y_pred_rf = classifier_rf.predict(X_test)
cm = confusion_matrix(y_test, y_pred_rf)
labels_1 = ['Predicted NO', 'Predicted YES']
labels_2 = ['Actual NO', 'Actual YES']
with sns.axes_style('white'):
    plt.figure()
    ax = sns.heatmap(cm, square=True, xticklabels=labels_1, yticklabels=labels_2, annot=True, cmap=plt.cm.jet, fmt='.00f')
    plt.title("Confusion Matrix for Customer will buy Personal Loan or not")    
print (classification_report(y_test, y_pred_rf))
print("Accuracy Score : ", accuracy_score(y_test, y_pred_rf))
r_probs = [0 for _ in range(len(y_test))]
rf_probs = classifier_rf.predict_proba(X_test)
rf_probs = rf_probs[:, 1]
r_auc = roc_auc_score(y_test, r_probs)
rf_auc = roc_auc_score(y_test, rf_probs)
print('Random Forest: AUROC = %.3f' % (rf_auc))
r_fpr, r_tpr, _ = roc_curve(y_test, r_probs)
rf_fpr, rf_tpr, _ = roc_curve(y_test, rf_probs)
plt.plot(r_fpr, r_tpr, linestyle='--', label='Random prediction (AUROC = %0.3f)' % r_auc)
plt.plot(rf_fpr, rf_tpr, marker='.', label='Random Forest (AUROC = %0.3f)' % rf_auc)
plt.title('ROC Plot')
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.legend()
plt.show()
kappa = cohen_kappa_score(y_pred_rf,y_test)
print('Random Forest: Kappa Score = %.3f' % (kappa))
matthews_corrcoef(y_test, y_pred_rf)
classifier_rf_os = RandomForestClassifier(n_estimators = 30, max_depth = 20, max_features = 'sqrt', min_samples_leaf = 5, random_state = 100)
classifier_rf_os.fit(X_train_os, y_train_os)
y_pred_rf = classifier_rf_os.predict(X_test)
cm = confusion_matrix(y_test, y_pred_rf)
labels_1 = ['Predicted NO', 'Predicted YES']
labels_2 = ['Actual NO', 'Actual YES']
with sns.axes_style('white'):
    plt.figure()
    ax = sns.heatmap(cm, square=True, xticklabels=labels_1, yticklabels=labels_2, annot=True, cmap=plt.cm.jet, fmt='.00f')
    plt.title("Confusion Matrix for Customer will buy Personal Loan or not")    
print (classification_report(y_test, y_pred_rf))
print("Accuracy Score : ", accuracy_score(y_test, y_pred_rf))
r_probs = [0 for _ in range(len(y_test))]
rf_probs = classifier_rf_os.predict_proba(X_test)
rf_probs = rf_probs[:, 1]
r_auc = roc_auc_score(y_test, r_probs)
rf_auc = roc_auc_score(y_test, rf_probs)
print('Random Forest: AUROC = %.3f' % (rf_auc))
r_fpr, r_tpr, _ = roc_curve(y_test, r_probs)
rf_fpr, rf_tpr, _ = roc_curve(y_test, rf_probs)
plt.plot(r_fpr, r_tpr, linestyle='--', label='Random prediction (AUROC = %0.3f)' % r_auc)
plt.plot(rf_fpr, rf_tpr, marker='.', label='Random Forest (AUROC = %0.3f)' % rf_auc)
plt.title('ROC Plot')
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.legend()
plt.show()
kappa = cohen_kappa_score(y_pred_rf,y_test)
print('Random Forest: Kappa Score = %.3f' % (kappa))
matthews_corrcoef(y_test, y_pred_rf)