# This Python 3 environment comes with many helpful analytics libraries installed

# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python

# For example, here's several helpful packages to load



import numpy as np # linear algebra

import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)



# Input data files are available in the read-only "../input/" directory

# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory



import os

for dirname, _, filenames in os.walk('/kaggle/input'):

    for filename in filenames:

        print(os.path.join(dirname, filename))



# You can write up to 5GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using "Save & Run All" 

# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session
import random

import pandas as pd



def information():

    print('This is a simple number guessing game.When the game is played, the computer randomly generatesa number between lower and upper bounds (inclusive).These default to 1 and 42, but the user can choose to change them to any valid numbers between 0 and a numbergreater than the lower bound. Each player is promptedto provide name to start playing. The number of attemptsto correctly guess the secret number generated by the computer is recorded. When (Q)uit is selected, the program will displaythe list of players and their respective scores, sorted by score.It will also display the player with the lowest score.')





def menu():

    print("Menu:")

    print("(I)nformation")

    print("(V)iew High Scores")

    print("(P)lay Game")

    print("(S)et Game Limits")

    print("(Q)uit")

    

def scores():

    df.sort_values(by='Score')

    print(df)



def setting():

    global low

    global high

    print("Setting Game Limits.")

    print("Low must be 0 or greater.")

    print("High must be greater than low.")

    m=True

    i=True

    l=int(input("Please enter a valid low bound integer: "))

    while m==True:

        while i==True:

            if l<0:

                l=int(input("Please enter a valid low bound integer: "))

            else:

                i=False

        low=l

        j=True

        h=int(input("Please enter a valid high bound integer: "))

        while j==True:

            if h<low:

                h=int(input("Please enter a valid high bound integer: "))

            else:

                j=False

        high=h

        m=False

        

        

def play():

    global df

    print("See if you can get a best score")

    name=input("Enter your name ")

    num=random.randint(low,high)

    s=int(input("{}, please enter your guess, between {} and {}:".format(name,low,high)))

    c=0

    while s!=num:

        c+=1

        if s>num:

            print("Your guess is too high.")

        else:

            print("Your guess is too low.")

        s=int(input("{}, please enter your guess, between {} and {}:".format(name,low,high)))

    print("Well done,",name,"You guessed it in",c,"guesses.")

    df=df.append({'Name' : name, 'Score' : c},ignore_index = True)

    

    

def end():

    print("Farewell and thank you for playing.")

    print(df.head())

    print("Player(s) with best score is(are):\n",df.head(3))

    

    

low=1

high=42

df=pd.DataFrame(columns=['Name','Score'])

print("Welcome to the Guessing Game!")

print("Written by Jim Tan")

menu()

ch="a"

while ch.lower()!="q":

    ch=input("Enter your choice: ")

    if ch.lower()=="i":

        information()

    elif ch.lower()=="v":

        scores()

    elif ch.lower()=="p":

        play()

    elif ch.lower()=="s":

        setting()

    elif ch.lower()=="q":

        end()

        quit()

    else:

        print("Invalid menu choice.")
