# Loading packages for analytics work
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.patches as mpatches
import seaborn as sns
import numpy as np
plt.style.use('fivethirtyeight')
import folium
import folium.plugins
from folium import IFrame
from matplotlib import animation,rc
from IPython.display import HTML, display
import warnings
warnings.filterwarnings('ignore')
import io
from scipy.misc import imread
import codecs
import base64
from wordcloud import WordCloud, STOPWORDS
# Loading packages for BigQuery work
from bq_helper import BigQueryHelper
bq_assistant = BigQueryHelper("bigquery-public-data", "eclipse_megamovie")
Query="""
Select count(*) as count
From `bigquery-public-data.eclipse_megamovie.photos_v_0_1`"""

size=bq_assistant.query_to_pandas_safe(Query)

print('The dataset1 has record for ',size['count'].values[0],'photos')
Query="""
SELECT(Select count(*) 
From `bigquery-public-data.eclipse_megamovie.photos_v_0_1`)
+
(Select count(*) 
From `bigquery-public-data.eclipse_megamovie.photos_v_0_2`)
+
(Select count(*) 
From `bigquery-public-data.eclipse_megamovie.photos_v_0_3`
) as sum_photos
"""

size = bq_assistant.query_to_pandas_safe(Query)
print('The complete dataset has record for ',size['sum_photos'].values[0],'photos')
%%time
Query="""
Select user
From `bigquery-public-data.eclipse_megamovie.photos_v_0_1`

UNION DISTINCT

Select user
From `bigquery-public-data.eclipse_megamovie.photos_v_0_2`

UNION DISTINCT

Select user
From `bigquery-public-data.eclipse_megamovie.photos_v_0_3`
"""
n_users = bq_assistant.query_to_pandas_safe(Query)
print('The total number of unique users in the dataset are:',n_users.shape[0])

%%time
Query="""
Select Count(Distinct x.user)
From(
     Select user
     From `bigquery-public-data.eclipse_megamovie.photos_v_0_1`
     
     UNION ALL
     
     Select user
     From `bigquery-public-data.eclipse_megamovie.photos_v_0_2`
     
     UNION ALL
     
     Select user
     From `bigquery-public-data.eclipse_megamovie.photos_v_0_3`) x
Group By x.user
"""
n_user = bq_assistant.query_to_pandas_safe(Query)
print('Number of Distinct Users:',n_user.shape[0])
import math
print('Average Photos taken by Each User:',math.ceil(size['sum_photos'].values[0]/n_users.shape[0]))
Query="""
Select Count(Distinct x.model) as distinct_models
From(
     Select model
     From `bigquery-public-data.eclipse_megamovie.photos_v_0_1`
     
     UNION ALL
     
     Select model
     From `bigquery-public-data.eclipse_megamovie.photos_v_0_2`
     
     UNION ALL
     
     Select model
     From `bigquery-public-data.eclipse_megamovie.photos_v_0_3`) x
Group By x.model
"""
n_model = bq_assistant.query_to_pandas_safe(Query)
print('Number of Distinct Camera Devices are:',n_model.shape[0])
Query1="""
Select model,count(Distinct user) as Count
From (
      Select model,user 
      From `bigquery-public-data.eclipse_megamovie.photos_v_0_1`
      
      UNION ALL
      
      Select model,user 
      From `bigquery-public-data.eclipse_megamovie.photos_v_0_2`
      
      UNION ALL
      
      Select model,user 
      From `bigquery-public-data.eclipse_megamovie.photos_v_0_3`
      )
Group By model
Order By Count DESC
"""
model_count = bq_assistant.query_to_pandas_safe(Query1)
ax=model_count[1:16].plot(x='model',y='Count',kind='barh',width=0.9,color=sns.color_palette('winter_r',15))
for i, v in enumerate(model_count[1:16].Count.values): 
    ax.text(.8, i, v,fontsize=12,color='white',weight='bold')
plt.gca().invert_yaxis()
ax.patches[0].set_facecolor('r')
fig=plt.gcf()
fig.set_size_inches(8,10)
plt.title('Most Used Camera Devices')
plt.show()
Query1="""
Select make,count(Distinct user) as Count
From (
      Select make,user
      From`bigquery-public-data.eclipse_megamovie.photos_v_0_1`
      Where is_mobile=True
      UNION ALL
      Select make,user
      From`bigquery-public-data.eclipse_megamovie.photos_v_0_2`
      Where is_mobile=True
      UNION ALL
      Select make,user
      From`bigquery-public-data.eclipse_megamovie.photos_v_0_3`
      Where is_mobile=True)
Group By make
Order By Count DESC
"""
makemob_count=bq_assistant.query_to_pandas_safe(Query1)
Query2="""
Select make,count(Distinct user) as Count
From (
      Select make,user
      From`bigquery-public-data.eclipse_megamovie.photos_v_0_1`
      Where is_mobile=False
      UNION ALL
      Select make,user
      From`bigquery-public-data.eclipse_megamovie.photos_v_0_2`
      Where is_mobile=False
      UNION ALL
      Select make,user
      From`bigquery-public-data.eclipse_megamovie.photos_v_0_3`
      Where is_mobile=False)
Group By make
Order By Count DESC
"""
makecam_count=bq_assistant.query_to_pandas_safe(Query2)

f,ax=plt.subplots(1,2,figsize=(18,8))
ax1=makemob_count[:5].plot(x='make',y='Count',kind='barh',width=0.8,ax=ax[0],color=sns.color_palette('inferno_r',15))
ax[0].invert_yaxis()
ax1.patches[0].set_facecolor('r')
for i, v in enumerate(makemob_count[:5].Count.values): 
    ax1.text(.8, i, v,fontsize=14,color='b',weight='bold')
ax[0].set_title('Top Mobile Camera Makers')
ax2=makecam_count[:5].plot(x='make',y='Count',kind='barh',width=0.8,ax=ax[1],color=sns.color_palette('inferno_r',15))
ax[1].invert_yaxis()
ax2.patches[0].set_facecolor('r')
for i, v in enumerate(makecam_count[:5].Count.values): 
    ax2.text(.8, i, v,fontsize=14,color='b',weight='bold')
ax[1].set_title('Top DSLR Makers')
plt.subplots_adjust(wspace=0.8)
Query="""
Select make,aperture_value
From (
      Select make,aperture_value
      From`bigquery-public-data.eclipse_megamovie.photos_v_0_1`
      Where is_mobile=False
      UNION ALL
      Select make,aperture_value
      From`bigquery-public-data.eclipse_megamovie.photos_v_0_2`
      Where is_mobile=False
      UNION ALL
      Select make,aperture_value
      From`bigquery-public-data.eclipse_megamovie.photos_v_0_3`
      Where is_mobile=False
      )
"""
Query1="""
Select make,aperture_value
From (
      Select make,aperture_value
      From`bigquery-public-data.eclipse_megamovie.photos_v_0_1`
      Where is_mobile=True
      UNION ALL
      Select make,aperture_value
      From`bigquery-public-data.eclipse_megamovie.photos_v_0_2`
      Where is_mobile=True
      UNION ALL
      Select make,aperture_value
      From`bigquery-public-data.eclipse_megamovie.photos_v_0_3`
      Where is_mobile=True
      )
"""
aper_cam=bq_assistant.query_to_pandas_safe(Query)
aper_mob=bq_assistant.query_to_pandas_safe(Query1)
aper_cam=aper_cam.dropna()
aper_mob=aper_mob.dropna()
f,ax=plt.subplots(2,1,figsize=(22,14))
sns.boxplot('make','aperture_value',data=aper_cam[aper_cam['make'].isin(makecam_count['make'][:10])],ax=ax[0])
ax[0].set_title('Aperatures for DSLR')
sns.boxplot('make','aperture_value',data=aper_mob[aper_mob['make'].isin(makemob_count['make'][:10])],ax=ax[1])
ax[1].set_title('Aperatures for Mobile Camera')
Query="""
Select vision_labels 
From `bigquery-public-data.eclipse_megamovie.photos_v_0_1`
"""
labels=bq_assistant.query_to_pandas_safe(Query)
list1=[]
for i in labels[labels['vision_labels']!=''].vision_labels.str.split(','):
    list1.extend(i)
labels=pd.Series(list1)
insta=b''
f1=open("insta.png", "wb")
f1.write(codecs.decode(insta,'base64'))
f1.close()
img1 = imread("insta.png")
hcmask1 = img1
wc = WordCloud(background_color="black", max_words=1000, mask=hcmask1, 
               stopwords=STOPWORDS, max_font_size= 60,width=1000,height=1000)
wc.generate(" ".join(labels))
plt.imshow(wc)
plt.axis('off')
fig=plt.gcf()
fig.set_size_inches(10,10)
plt.show()
Query1="""
Select lon,lat,user,model,storage_uri,state,is_mobile,height,width
From (
      Select lon,lat,user,model,storage_uri,state,is_mobile,height,width
      From`bigquery-public-data.eclipse_megamovie.photos_v_0_1`
      UNION ALL
      Select lon,lat,user,model,storage_uri,state,is_mobile,height,width
      From`bigquery-public-data.eclipse_megamovie.photos_v_0_2`
      UNION ALL
      Select lon,lat,user,model,storage_uri,state,is_mobile,height,width
      From`bigquery-public-data.eclipse_megamovie.photos_v_0_3`
      )
"""
user_loc=bq_assistant.query_to_pandas_safe(Query1)
user_loc.dropna(inplace=True)
Query="""
SELECT user, COUNT(user) 
FROM (
Select user
      From `bigquery-public-data.eclipse_megamovie.photos_v_0_1`
      UNION ALL
      Select user
      From`bigquery-public-data.eclipse_megamovie.photos_v_0_2`
      UNION ALL
      Select user
      From`bigquery-public-data.eclipse_megamovie.photos_v_0_3`
) 
GROUP BY user 
HAVING COUNT (user)=( 
SELECT MAX(mycount) 
FROM ( 
SELECT user, COUNT(user) mycount 
FROM (
Select user
      From `bigquery-public-data.eclipse_megamovie.photos_v_0_1`
      UNION ALL
      Select user
      From`bigquery-public-data.eclipse_megamovie.photos_v_0_2`
      UNION ALL
      Select user
      From`bigquery-public-data.eclipse_megamovie.photos_v_0_3`
)
GROUP BY user))
"""
max_user=bq_assistant.query_to_pandas_safe(Query)
max_user=user_loc[user_loc['user'].isin(max_user['user'])]
print('Maximum Photos was taken by user',max_user['user'].unique()[0],'with',max_user.shape[0],'photos')
ax=max_user['model'].value_counts().plot.barh(width=0.8)
for i, v in enumerate(max_user['model'].value_counts().values): 
    ax.text(.8, i, v,fontsize=12,color='black',weight='bold')
plt.title('Cameras used by the Photographer')
plt.gca().invert_yaxis()
user_loc=user_loc.drop_duplicates(subset=['user'])
locate=user_loc[['lat','lon']]
model=user_loc['model']
state=user_loc['state']
height=user_loc['height']
width=user_loc['width']
img=user_loc['storage_uri']
mob_cam=user_loc['is_mobile']
def color(value):
    if value==True:
        return 'green'
    else:
        return 'red'
map1 = folium.Map(location=[39.50, -98.35],tiles='CartoDB dark_matter',zoom_start=3.5)
for point in user_loc.index:
    info='<b>Model:</b>'+str(model[point])+'<br><b>State</b>: '+str(state[point])+'<br><b>Img Height</b>: '+str(height[point])+'px'+'<br><b>Img Width</b>: '+str(width[point])+'px'+'<br><b>Img Src</b>: '+str(img[point])
    iframe = folium.IFrame(html=info, width=250, height=250)
    folium.CircleMarker(list(locate.loc[point].values),popup=folium.Popup(iframe),radius=1,color=color(mob_cam[point])).add_to(map1)
map1
Query="""
Select lat,lon,EXTRACT(HOUR from image_datetime) as hour
FROM (
Select lat,lon,image_datetime
      From `bigquery-public-data.eclipse_megamovie.photos_v_0_1`
      where image_datetime Is Not Null and lat is not Null and lon is not Null
      UNION ALL
      Select lat,lon,image_datetime
      From`bigquery-public-data.eclipse_megamovie.photos_v_0_2`
      where image_datetime Is Not Null and lat is not Null and lon is not Null
      UNION ALL
      Select lat,lon,image_datetime
      From`bigquery-public-data.eclipse_megamovie.photos_v_0_3`
      where image_datetime Is Not Null and lat is not Null and lon is not Null
) """
rel=bq_assistant.query_to_pandas_safe(Query)
fig=plt.figure(figsize=(10,8))
from mpl_toolkits.basemap import Basemap
from matplotlib import animation,rc
fig.text(.3, .1, '21 August 2017', ha='right')
def animate(Hour):
    ax = plt.axes()
    ax.clear()
    ax.set_title('Photos Clicked '+'\n'+'Hour:' +str(Hour))
    m6 = Basemap(llcrnrlon=-119,llcrnrlat=22,urcrnrlon=-64,urcrnrlat=49,
        projection='lcc',lat_1=33,lat_2=45,lon_0=-95)
    lat_gif1=list(rel[rel['hour']==Hour].lat)
    long_gif1=list(rel[rel['hour']==Hour].lon)
    x_gif1,y_gif1=m6(long_gif1,lat_gif1)
    m6.scatter(x_gif1, y_gif1,color ='r') 
    m6.drawcoastlines()
    m6.drawcountries()
    m6.fillcontinents(color='coral',lake_color='aqua', zorder = 1,alpha=0.4)
    m6.drawmapboundary(fill_color='aqua')
ani = animation.FuncAnimation(fig,animate,list(rel.hour.unique()), interval = 1500)    
ani.save('animation.gif', writer='imagemagick', fps=1)
plt.close(1)
filename = 'animation.gif'
video = io.open(filename, 'r+b').read()
encoded = base64.b64encode(video)
HTML(data='''<img src="data:image/gif;base64,{0}" type="gif" />'''.format(encoded.decode('ascii')))
