!pip install pefile
import os

import pandas

import numpy

import pickle

import pefile

import sklearn.ensemble as ek

from sklearn import tree, linear_model

from sklearn.model_selection import cross_validate

from sklearn.feature_selection import SelectFromModel

import joblib

from sklearn.naive_bayes import GaussianNB

from sklearn.metrics import confusion_matrix

from sklearn.pipeline import make_pipeline

from sklearn import preprocessing

from sklearn import svm

from sklearn.linear_model import LinearRegression

from sklearn.model_selection import train_test_split
# This Python 3 environment comes with many helpful analytics libraries installed

# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python

# For example, here's several helpful packages to load



import numpy as np # linear algebra

import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)



# Input data files are available in the read-only "../input/" directory

# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory



import os

for dirname, _, filenames in os.walk('/kaggle/input/malware-database/data.csv'):

    for filename in filenames:

        print(os.path.join(dirname, filename))



# You can write up to 5GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using "Save & Run All" 

# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session


dataset = pandas.read_csv('/kaggle/input/malware-database/data.csv',sep='|', low_memory=False)

dataset.head()
dataset.describe()
dataset.groupby(dataset['legitimate']).size()
X = dataset.drop(['Name','md5','legitimate'],axis=1).values

y = dataset['legitimate'].values
extratrees = ek.ExtraTreesClassifier().fit(X,y)

model = SelectFromModel(extratrees, prefit=True)

X_new = model.transform(X)

nbfeatures = X_new.shape[1]
nbfeatures
X_train, X_test, y_train, y_test = train_test_split(X_new, y ,test_size=0.2)
features = []

index = numpy.argsort(extratrees.feature_importances_)[::-1][:nbfeatures]
for f in range(nbfeatures):

    print("%d. feature %s (%f)" % (f + 1, dataset.columns[2+index[f]], extratrees.feature_importances_[index[f]]))

    features.append(dataset.columns[2+f])
model = { "DecisionTree":tree.DecisionTreeClassifier(max_depth=10),

         "RandomForest":ek.RandomForestClassifier(n_estimators=50),

         "Adaboost":ek.AdaBoostClassifier(n_estimators=50),

         "GradientBoosting":ek.GradientBoostingClassifier(n_estimators=50),

         "GNB":GaussianNB(),

         "LinearRegression":LinearRegression()   

}
results = {}

for algo in model:

    clf = model[algo]

    clf.fit(X_train,y_train)

    score = clf.score(X_test,y_test)

    print ("%s : %s " %(algo, score))

    results[algo] = score


winner = max(results, key=results.get)
joblib.dump(model[winner],'/kaggle/working/classifier.pkl') 