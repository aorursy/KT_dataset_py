# This Python 3 environment comes with many helpful analytics libraries installed
# It is defined by the kaggle/python docker image: https://github.com/kaggle/docker-python
# For example, here's several helpful packages to load in 

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)

# Input data files are available in the "../input/" directory.
# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory

import os
print(os.listdir("../input"))

# Any results you write to the current directory are saved as output.
import xml
import xml.etree.cElementTree as etree
from xml.etree import ElementTree
import OpenSSL
from cryptography import x509
from cryptography.hazmat.backends import default_backend
xmlDoc = '<?xml version="1.0"?>\n<OKV s="nw3UUkCRd0vFEgkYLDZ028+PtcfTAZgvA9Xos/ljbdBisdumxXrAPm89cv36VxvVU2Ztz/OcKHjdnUYAgt0hLEPbnD/BSFKAWPSRF+V7zrM1D1bdsgUiTki3Ytm2CwHTtfQQRwG2/qyQjoy/K47gD1WsKKnTp/ZuyeYCxERNvdoqQ6Xvi5DLGehhbcKHYdVl/gcHMwjpS/Y1u7CRQ0F/G0URgxwWrc2lWm3c2vTJur+QPqJoqa1GaHq8eM9PnlDd2mMnpQIL+05yUX3fEPXnkbOsyY88MwBZFVlwCzSJdoyn4TI6LKvB7qw19vDVfOBsZWmFo/l+wg2PAKQa07Cg1Q==" r="046720181224104504273" a="S/O Govinda Chandra Behera, Ankushpur, Kukudakhandi, Ankusapur, Ganjam, Orissa - 761100" g="male" m="1c546a88d0604f0951e194b5f894050f5a83f228eef20711d7bb39c03cc8495a" e="ec047afe918ca98e368da0caa5039545db3f39a1118f47890f458b913d192c39" d="11051994" i="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" n="Ashrumochan Behera" v="1"/>'
Tree = etree.XML(xmlDoc)
Tree.keys()
last_4_digit = Tree.get('r')[:4]
last_4_digit
mailstr = Tree.get('e')
mailstr
import hashlib
import sys
 
def Secure(value,sharecode,laadhar):

    value=value+sharecode
    for x in range(0,laadhar):
        value=hashlib.sha256(value.encode('utf-8')).hexdigest()
        #print(value)
    return value

print(Secure('9437607502','1947',7))
print(Secure('erashru@gmail.com','1947',7))
! wget "https://uidai.gov.in/images/okyc-publickey.cer"

cert = open("okyc-publickey.cer").read().encode()
cert = x509.load_pem_x509_certificate(cert, default_backend())
cert
sign = Tree.get('s')
len(sign)
del Tree.attrib['s']
xmlstr = etree.tostring(Tree, encoding='utf8', method='xml')
rstr=str(xmlstr)[45:][:-1]
rstr

try:
    OpenSSL.crypto.verify(cert, sign.encode(), rstr.encode(), 'sha256')
    print("Signature verified OK")
except Exception as e:
    print("Signature verification failed: {}".format(e))
try:
    OpenSSL.crypto.verify(cert, sign.encode(), xmlstr, 'sha256')
    print("Signature verified OK")
except Exception as e:
    print("Signature verification failed: {}".format(e))
! pip install M2Crypto
