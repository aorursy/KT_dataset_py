# This Python 3 environment comes with many helpful analytics libraries installed

# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python

# For example, here's several helpful packages to load



import numpy as np # linear algebra

import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)



# Input data files are available in the read-only "../input/" directory

# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory



import os

for dirname, _, filenames in os.walk('/kaggle/input'):

    for filename in filenames:

        print(os.path.join(dirname, filename))



# You can write up to 5GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using "Save & Run All" 

# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session
import numpy as np

import matplotlib.pyplot as plt

import pandas as pd

dataset = pd.read_csv('../input/star-dataset/6 class csv.csv')

X = dataset.iloc[:,0:6].values

y=dataset.iloc[:,6].values





from sklearn.preprocessing import LabelEncoder

le = LabelEncoder()

X[:, 5] = le.fit_transform(X[:, 5]) #to label encode the Star color field in the dataset

y1=le.fit_transform(y) # to label encode spectral class



from sklearn.cluster import KMeans

wcss = []

for i in range(1, 11):

    kmeans = KMeans(n_clusters = i, init = 'k-means++', random_state = 101)

    kmeans.fit(X)

    wcss.append(kmeans.inertia_)

plt.plot(range(1, 11), wcss)

plt.title('The Elbow Method')

plt.xlabel('Number of clusters')

plt.ylabel('WCSS')

plt.show() #displaying the elbow diagram 











kmeans = KMeans(n_clusters = 7, init = 'k-means++', random_state = 101)

y_kmeans = kmeans.fit_predict(X)

print( "column 0 represent cluster code,ie (spectral class) as per dataset and column 1 represents corresponding clusters codes  generated by algorithm")



print(np.concatenate((y1.reshape(len(y1),1), y_kmeans.reshape(len(y_kmeans),1)),1))

plt.scatter(X[y1 == 0, 0], X[y1 == 0, 1], s = 100, c = 'red', label = 'Cluster 1')

plt.scatter(X[y1 == 1, 0], X[y1 == 1, 1], s = 100, c = 'blue', label = 'Cluster 2')

plt.scatter(X[y1 == 2, 0], X[y1 == 2, 1], s = 100, c = 'green', label = 'Cluster 3')

plt.scatter(X[y1 == 3, 0], X[y1 == 3, 1], s = 100, c = 'cyan', label = 'Cluster 4')

plt.scatter(X[y1 == 4, 0], X[y1 == 4, 1], s = 100, c = 'magenta', label = 'Cluster 5')

plt.scatter(X[y1 == 5, 0], X[y1 == 5, 1], s = 100, c = 'orange', label = 'Cluster 6')

plt.scatter(X[y1 == 6, 0], X[y1 == 6, 1], s = 100, c = 'yellow', label = 'Cluster 7')



plt.title('Clusters as per dataset spectral class')



plt.legend()

plt.show()
plt.scatter(X[y_kmeans == 0, 0], X[y_kmeans == 0, 1], s = 100, c = 'red', label = 'Cluster 1')

plt.scatter(X[y_kmeans == 1, 0], X[y_kmeans == 1, 1], s = 100, c = 'blue', label = 'Cluster 2')

plt.scatter(X[y_kmeans == 2, 0], X[y_kmeans == 2, 1], s = 100, c = 'green', label = 'Cluster 3')

plt.scatter(X[y_kmeans == 3, 0], X[y_kmeans == 3, 1], s = 100, c = 'cyan', label = 'Cluster 4')

plt.scatter(X[y_kmeans == 4, 0], X[y_kmeans == 4, 1], s = 100, c = 'magenta', label = 'Cluster 5')

plt.scatter(X[y_kmeans == 5, 0], X[y_kmeans == 5, 1], s = 100, c = 'orange', label = 'Cluster 6')

plt.scatter(X[y_kmeans == 6, 0], X[y_kmeans == 6, 1], s = 100, c = 'yellow', label = 'Cluster 7')



plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s = 300, c = 'yellow', label = 'Centroids')

plt.title('Cluster as per kmeans clustering')

plt.legend()

plt.show()

import scipy.cluster.hierarchy as sch

dendrogram = sch.dendrogram(sch.linkage(X, method = 'ward'))

plt.title('Dendrogram')

plt.xlabel('Customers')

plt.ylabel('Euclidean distances')

plt.show()



from sklearn.cluster import AgglomerativeClustering

hc = AgglomerativeClustering(n_clusters = 7, affinity = 'euclidean', linkage = 'ward')

y_hc = hc.fit_predict(X)











print( "column 0 represent cluster code as per dataset and column 1 represents corresponding clusters codes  generated by algorithm")

print(np.concatenate((y1.reshape(len(y1),1), y_kmeans.reshape(len(y_kmeans),1)),1))

plt.scatter(X[y1 == 0, 0], X[y1 == 0, 1], s = 100, c = 'red', label = 'Cluster 1')

plt.scatter(X[y1 == 1, 0], X[y1 == 1, 1], s = 100, c = 'blue', label = 'Cluster 2')

plt.scatter(X[y1 == 2, 0], X[y1 == 2, 1], s = 100, c = 'green', label = 'Cluster 3')

plt.scatter(X[y1 == 3, 0], X[y1 == 3, 1], s = 100, c = 'cyan', label = 'Cluster 4')

plt.scatter(X[y1 == 4, 0], X[y1 == 4, 1], s = 100, c = 'magenta', label = 'Cluster 5')

plt.scatter(X[y1 == 5, 0], X[y1 == 5, 1], s = 100, c = 'orange', label = 'Cluster 6')

plt.scatter(X[y1 == 6, 0], X[y1 == 6, 1], s = 100, c = 'yellow', label = 'Cluster 7')



plt.title('Clusters as per spectral class')

plt.legend()

plt.show()
plt.scatter(X[y_hc == 0, 0], X[y_hc == 0, 1], s = 100, c = 'red', label = 'Cluster 1')

plt.scatter(X[y_hc == 1, 0], X[y_hc == 1, 1], s = 100, c = 'blue', label = 'Cluster 2')

plt.scatter(X[y_hc == 2, 0], X[y_hc == 2, 1], s = 100, c = 'green', label = 'Cluster 3')

plt.scatter(X[y_hc == 3, 0], X[y_hc == 3, 1], s = 100, c = 'cyan', label = 'Cluster 4')

plt.scatter(X[y_hc == 4, 0], X[y_hc == 4, 1], s = 100, c = 'magenta', label = 'Cluster 5')

plt.scatter(X[y_hc == 5, 0], X[y_hc == 5, 1], s = 100, c = 'orange', label = 'Cluster 6')

plt.scatter(X[y_hc == 6, 0], X[y_hc == 6, 1], s = 100, c = 'yellow', label = 'Cluster 7')

plt.title('Clusters as per hierarchical clustering model ')



plt.legend()

plt.show()