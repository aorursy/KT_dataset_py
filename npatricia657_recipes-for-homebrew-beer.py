# This Python 3 environment comes with many helpful analytics libraries installed
# It is defined by the kaggle/python docker image: https://github.com/kaggle/docker-python
# For example, here's several helpful packages to load in 

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)
import matplotlib.pyplot as plt
import seaborn as sn

from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier

from keras.models import Sequential

# Input data files are available in the "../input/" directory.
# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory

import os
print(os.listdir("../input"))

# Any results you write to the current directory are saved as output.
recipe = pd.read_csv("../input/recipeData.csv",encoding="latin1")
print(recipe.head(5))
print(recipe.info())
print(recipe.describe())
style = pd.read_csv("../input/styleData.csv",encoding="latin1")
print(style.head(5))
missing = recipe.copy()
missing = missing.T
missed = missing.isnull().sum(axis=1)
missing["valid_count"] = (len(missing.columns)-missed) / len(missing.columns)
missing["na_count"] = missed / len(missing.columns)

missing[["na_count","valid_count"]].sort_values("na_count", ascending=True).plot.barh(stacked=True,figsize=(12,10),color=["c","y"])
plt.title("Beer recipe missing data")
plt.figure(figsize=(12,8))
recipe.Style.value_counts().nlargest(30).sort_values(ascending=False).plot.bar()
plt.title("Largest style for homebrew beer")
plt.xlabel("Style")
plt.ylabel("Number of recipes")
recipe.BrewMethod.value_counts().plot(kind="pie",autopct="%1.1f%%")
plt.title("Brew method distribution")
recipe.SugarScale.value_counts().plot(kind="pie",autopct="%1.1f%%")
plt.title("Sugar scale distribution")
sn.distplot(recipe["Size(L)"],bins=20)
plt.title("Size distribution")
sn.distplot(recipe["Efficiency"],bins=20)
plt.title("Efficiency distribution")
sn.distplot(recipe["Color"],bins=20)
plt.title("Color distribution")
recipe["PrimaryTemp"] = recipe.groupby("StyleID").PrimaryTemp.transform(lambda x: x.fillna(x.mean()))
sn.distplot(recipe["PrimaryTemp"],bins=20)
plt.title("Primary temperature distribution")
sn.distplot(recipe["BoilSize"],bins=20)
plt.title("Boil size distribution")
sn.distplot(recipe["BoilTime"],bins=20)
plt.title("Boil time distribution")
recipe["BoilGravity"] = recipe.groupby("StyleID").BoilGravity.transform(lambda x: x.fillna(x.mean()))
sn.distplot(recipe["BoilGravity"],bins=20)
plt.title("Boil gravity distribution")
recipe["PitchRate"] = recipe.groupby("StyleID").PitchRate.transform(lambda x: x.fillna(x.mean()))
sn.distplot(recipe["PitchRate"])
plt.title("Pitch rate distribution")
sn.distplot(recipe["OG"],bins=10)
plt.title("OG distribution")
sn.distplot(recipe["FG"],bins=10)
plt.title("FG distribution")
sn.distplot(recipe["ABV"],bins=10)
plt.title("ABV distribution")
sn.distplot(recipe["IBU"],bins=10)
plt.title("IBU distribution")
recipe["MashThickness"] = recipe.groupby("StyleID").PitchRate.transform(lambda x: x.fillna(x.mean()))
sn.distplot(recipe["MashThickness"])
plt.title("Mash thickness distribution")
f,ax = plt.subplots(figsize=(18, 18))
recipe["SugarScale_map"] = recipe["SugarScale"].map({"Specific Gravity":1,"Plato":2}).astype(int)
recipe["BrewMethod_map"] = recipe["BrewMethod"].map({"All Grain":1,"extract":2,"BIAB":3,"Partial Mash":4}).astype(int)
sn.heatmap(recipe.corr(), annot=True, linewidths=.5, fmt= '.1f',ax=ax)
plt.figure(figsize=(12,8))
sn.pairplot(recipe,vars=["BoilSize","BoilTime","BoilGravity"],hue="BrewMethod")
boil_grp = recipe.groupby("Size(L)")["BoilSize","BoilTime","BoilGravity"].mean().sort_values(ascending=False,by="BoilSize")[:30]
plt.figure(figsize=(12,8))
sn.pairplot(boil_grp,vars=["BoilSize","BoilTime","BoilGravity"])
fig, ax = plt.subplots(figsize=(12,8))
plt.subplot(221)
sn.kdeplot(boil_grp["BoilSize"],boil_grp["BoilTime"])
plt.subplot(222)
sn.kdeplot(boil_grp["BoilGravity"],boil_grp["BoilTime"])
plt.suptitle("BoilSize and BoilGravity distribution against BoilTime")
plt.figure(figsize=(8,7))
sn.distplot(boil_grp["BoilTime"])
plt.ylabel("Time average")
plt.title("Boil time distribution based on size(L)")
plt.figure(figsize=(8,7))
sn.distplot(boil_grp["BoilGravity"])
plt.ylabel("Gravity average")
plt.title("Boil gravity distribution based on size(L)")
plt.figure(figsize=(8,7))
sn.distplot(boil_grp["BoilSize"])
plt.ylabel("Boil Size average")
plt.title("Boil size distribution based on size(L)")
eff_grp = recipe.groupby("Efficiency")["Color","Size(L)","OG","FG","ABV","IBU"].mean().sort_values(ascending=False,by="Color")
sn.pairplot(eff_grp)
temp_grp = recipe.groupby("PrimaryTemp")["Color","Size(L)","OG","FG","ABV","IBU"].mean().sort_values(ascending=False,by="Color")
sn.pairplot(temp_grp)
style_grp = recipe.groupby("Style")["Color","Size(L)","OG","FG","ABV","IBU"].mean().sort_values(ascending=False,by="Color")[:30]
print(style_grp)
sn.pairplot(style_grp,vars=["Color","Size(L)","OG","FG","ABV","IBU"])
fig, ax = plt.subplots(figsize=(12,10))
plt.subplot(231)
sn.distplot(style_grp["Color"])
plt.ylabel("Average batch")
plt.title("Histogram")
plt.subplot(233)
style_grp["Color"].sort_values(ascending=True).plot.barh(stacked=True)
plt.xlabel("Color")
plt.title("Highest style")
plt.suptitle("Color based on style")
fig, ax = plt.subplots(figsize=(12,10))
plt.subplot(231)
sn.distplot(style_grp["Size(L)"])
plt.ylabel("Average batch")
plt.title("Histogram")
plt.subplot(233)
style_grp["Size(L)"].sort_values(ascending=True).plot.barh(stacked=True)
plt.xlabel("Size(L)")
plt.title("Highest style")
plt.suptitle("Size(L) based on style")
fig, ax = plt.subplots(figsize=(12,10))
plt.subplot(231)
sn.distplot(style_grp["OG"])
plt.ylabel("Average batch")
plt.title("Histogram")
plt.subplot(233)
style_grp["OG"].sort_values(ascending=True).plot.barh(stacked=True)
plt.title("Highest style")
plt.xlabel("OG")
plt.suptitle("OG based on style")
fig, ax = plt.subplots(figsize=(12,10))
plt.subplot(231)
sn.distplot(style_grp["FG"])
plt.ylabel("Average batch")
plt.title("Histogram")
plt.subplot(233)
style_grp["FG"].sort_values(ascending=True).plot.barh(stacked=True)
plt.title("Highest style")
plt.xlabel("FG")
plt.suptitle("FG based on Style")
fig, ax = plt.subplots(figsize=(12,10))
plt.subplot(231)
sn.distplot(style_grp["ABV"])
plt.ylabel("Average batch")
plt.title("Histogram")
plt.subplot(233)
style_grp["ABV"].sort_values(ascending=True).plot.barh(stacked=True)
plt.xlabel("ABV")
plt.title("Highest style")
plt.suptitle("ABV based on style")
fig, ax = plt.subplots(figsize=(12,10))
plt.subplot(231)
sn.distplot(style_grp["IBU"])
plt.ylabel("Average batch")
plt.subplot(233)
style_grp["IBU"].sort_values(ascending=True).plot.barh(stacked=True)
plt.xlabel("IBU")
plt.title("Highest style")
plt.suptitle("IBU based on style")
sn.kdeplot(style_grp["OG"],style_grp["FG"])
plt.title("Distribution between OG and FG")
fig, ax = plt.subplots(figsize=(12,8))
plt.subplot(221)
sn.kdeplot(style_grp["OG"],style_grp["ABV"])
plt.subplot(222)
sn.kdeplot(style_grp["FG"],style_grp["ABV"])
plt.suptitle("Distribution of OG and FG")
sn.kdeplot(style_grp["ABV"],style_grp["IBU"])
plt.title("Distribution between ABV and IBU")
sn.kdeplot(style_grp["Color"],style_grp["Size(L)"])
plt.title("Distribution between Color and Size(L)")
fig, ax = plt.subplots(figsize=(12,8))
plt.subplot(221)
sn.kdeplot(style_grp["OG"],style_grp["IBU"])
plt.subplot(222)
sn.kdeplot(style_grp["FG"],style_grp["IBU"])
plt.suptitle("OG and FG distribution")
ind = np.arange(30)
width = 0.35
fig, ax = plt.subplots(figsize=(12,10))
ax.bar(ind-width/2, style_grp["Color"], width=width, color="SkyBlue", label="Color")
ax.bar(ind+width/2, style_grp["Size(L)"], width=width, color="IndianRed", label="Size(L)")
ax.set_xticks(ind)
ax.set_xticklabels(style_grp.index,rotation=90)
ax.set_xlabel("Style")
ax.set_ylabel("Scale")
ax.legend(["Color","Size(L)"])
ax.set_title("Color-size group by style")
ind = np.arange(30)
width = 0.5
plt.figure(figsize=(12,10))

p1 = plt.bar(ind, style_grp["FG"], width, color="Teal")
p2 = plt.bar(ind, style_grp["OG"], width, color="Brown", bottom=style_grp["FG"])
p3 = plt.bar(ind, style_grp["ABV"], width, color="LimeGreen", bottom=style_grp["OG"])
p4 = plt.bar(ind, style_grp["IBU"], width, color="Tomato", bottom=style_grp["ABV"])

plt.xticks(ind,style_grp.index,rotation=90)
plt.xlabel("Style")
plt.ylabel("Scale")
plt.legend((p1[0],p2[0],p3[0],p4[0]),("FG","OG","ABV","IBU"))
plt.title("Recipe scaling based on style")
plt.figure(figsize=(15,12))
sn.pairplot(recipe,vars=["Color","Size(L)","OG","FG","ABV","IBU"],hue="BrewMethod")
grain = recipe[recipe["BrewMethod"]=="All Grain"]
ag = grain.groupby(["Style","Color"])["Size(L)"].mean().unstack()
plt.figure(figsize=(10,8))
sn.heatmap(ag,cmap="Greens")
ag = grain.groupby(["Style","IBU"])["ABV"].mean().unstack()
plt.figure(figsize=(10,8))
sn.heatmap(ag,cmap="Reds")
ag = grain.groupby(["Style","OG"])["FG"].mean().unstack()
plt.figure(figsize=(10,8))
sn.heatmap(ag,cmap="Blues")
mash = recipe[recipe["BrewMethod"]=="Partial Mash"]
ma = mash.groupby(["Style","Color"])["Size(L)"].mean().unstack()
plt.figure(figsize=(10,8))
sn.heatmap(ma,cmap="Greens")
ma = mash.groupby(["Style","IBU"])["ABV"].mean().unstack()
plt.figure(figsize=(10,8))
sn.heatmap(ma,cmap="Reds")
ma = mash.groupby(["Style","OG"])["FG"].mean().unstack()
plt.figure(figsize=(10,8))
sn.heatmap(ma,cmap="Blues")
ext = recipe[recipe["BrewMethod"]=="extract"]
ex = ext.groupby(["Style","Color"])["Size(L)"].mean().unstack()
plt.figure(figsize=(10,8))
sn.heatmap(ex,cmap="Greens")
ex = ext.groupby(["Style","IBU"])["ABV"].mean().unstack()
plt.figure(figsize=(10,8))
sn.heatmap(ex,cmap="Reds")
ex = ext.groupby(["Style","OG"])["FG"].mean().unstack()
plt.figure(figsize=(10,8))
sn.heatmap(ex,cmap="Blues")
biab = recipe[recipe["BrewMethod"]=="BIAB"]
bi = biab.groupby(["Style","Color"])["Size(L)"].mean().unstack()
plt.figure(figsize=(10,8))
sn.heatmap(bi,cmap="Greens")
bi = biab.groupby(["Style","IBU"])["ABV"].mean().unstack()
plt.figure(figsize=(10,8))
sn.heatmap(bi,cmap="Reds")
bi = biab.groupby(["Style","OG"])["FG"].mean().unstack()
plt.figure(figsize=(10,8))
sn.heatmap(bi,cmap="Blues")
x_dat = recipe.drop(columns=["BeerID","UserId","Style","URL","Name","PrimaryTemp","PrimingMethod","PrimingAmount","StyleID","MashThickness"])
x_dat["SugarScale"] = x_dat["SugarScale"].map({"Specific Gravity":1,"Plato":2}).astype(int)
x_dat["BrewMethod"] = x_dat["BrewMethod"].map({"All Grain":1,"extract":2,"BIAB":3,"Partial Mash":4}).astype(int)
y_dat = recipe["StyleID"]
features = x_dat.columns
print(x_dat.info())
rf = RandomForestClassifier(n_estimators=250,random_state=0)
x_tr, x_te, y_tr, y_te = train_test_split(x_dat,y_dat,test_size=0.33)
rf.fit(x_tr,y_tr)
importances = rf.feature_importances_
std = np.std([t.feature_importances_ for t in rf.estimators_],axis=0)
indices = np.argsort(importances)[::-1]
for f in range(x_dat.shape[1]):
    print("%d. %s (%f)" % (f+1,features[indices[f]],importances[indices[f]]))