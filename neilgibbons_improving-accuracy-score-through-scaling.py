
import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)
from sklearn.model_selection import train_test_split
import seaborn as sns
from sklearn.metrics import accuracy_score


import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

df = pd.read_csv("../input/titanic/train.csv")
#dropping all columns which aren't numerical
df.drop(['Cabin','PassengerId', 'Pclass', 'Name','Sex', 'SibSp','Parch','Ticket','Embarked'], inplace =True, axis = 1)
mean_age = df['Age'].mean()
df['Age'].fillna(mean_age, inplace=True)
X = df.drop('Survived', axis=1)
y = df['Survived']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)
df.head()
from sklearn.neighbors import KNeighborsClassifier
clf = KNeighborsClassifier()
clf.fit(X_train, y_train)
predictions = clf.predict(X_test)
accuracy_score(y_test, predictions)
from sklearn.preprocessing import MinMaxScaler
scaler = MinMaxScaler()
df_both_scaled = df.copy(deep=True)
df_both_scaled[['Age', 'Fare']] = scaler.fit_transform(df[['Age', 'Fare']])
df_both_scaled.head()
X = df_both_scaled.drop('Survived', axis=1)
y = df_both_scaled['Survived']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)
MinMaxClf = KNeighborsClassifier()
MinMaxClf.fit(X_train, y_train)
predictions = MinMaxClf.predict(X_test)
accuracy_score(y_test, predictions)
from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
df_both_scaled = df.copy(deep=True)
df_both_scaled[['Age', 'Fare']] = scaler.fit_transform(df[['Age', 'Fare']])
df_both_scaled.head()
X = df_both_scaled.drop('Survived', axis=1)
y = df_both_scaled['Survived']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)
clf = KNeighborsClassifier()
clf.fit(X_train, y_train)
predictions = clf.predict(X_test)
accuracy_score(y_test, predictions)
scaler = MinMaxScaler()
df_age_scaled = df.copy(deep=True)
df_age_scaled[['Age']] = scaler.fit_transform(df[['Age']])
df_fare_scaled = df.copy(deep=True)
df_fare_scaled[['Fare']] = scaler.fit_transform(df[['Fare']])
df_age_scaled.head()
df_fare_scaled.head()
X = df_age_scaled.drop('Survived', axis=1)
y = df_age_scaled['Survived']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)
MinMaxClf = KNeighborsClassifier()
MinMaxClf.fit(X_train, y_train)
predictions = MinMaxClf.predict(X_test)
print("Accuracy score when MinMaxScaler only applied to age: ", end = " ")
print(accuracy_score(y_test, predictions))
X = df_fare_scaled.drop('Survived', axis=1)
y = df_fare_scaled['Survived']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)
MinMaxClf = KNeighborsClassifier()
MinMaxClf.fit(X_train, y_train)
predictions = MinMaxClf.predict(X_test)
print("Accuracy score when MinMaxScaler only applied to fare: ", end = " ")
print(accuracy_score(y_test, predictions))
scaler = StandardScaler()
df_age_scaled = df.copy(deep=True)
df_age_scaled[['Age']] = scaler.fit_transform(df[['Age']])
df_fare_scaled = df.copy(deep=True)
df_fare_scaled[['Fare']] = scaler.fit_transform(df[['Fare']])
df_age_scaled.head()
df_fare_scaled.head()
X = df_age_scaled.drop('Survived', axis=1)
y = df_age_scaled['Survived']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)
Clf = KNeighborsClassifier()
Clf.fit(X_train, y_train)
predictions = Clf.predict(X_test)
print("Accuracy score when only age was scaled: ", end = " ")
print(accuracy_score(y_test, predictions))
X = df_fare_scaled.drop('Survived', axis=1)
y = df_fare_scaled['Survived']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)
Clf = KNeighborsClassifier()
Clf.fit(X_train, y_train)
predictions = Clf.predict(X_test)
print("Accuracy score when only fare was scaled: ", end = " ")
print(accuracy_score(y_test, predictions))
MinMax = MinMaxScaler()
df_MinMax_Standard_scaled = df.copy(deep=True)
df_MinMax_Standard_scaled[['Age']] = MinMax.fit_transform(df[['Age']])
Standard = StandardScaler()
df_MinMax_Standard_scaled[['Fare']] = Standard.fit_transform(df[['Fare']])
df_MinMax_Standard_scaled.head()
X = df_MinMax_Standard_scaled.drop('Survived', axis=1)
y = df_MinMax_Standard_scaled['Survived']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)
Clf = KNeighborsClassifier()
Clf.fit(X_train, y_train)
predictions = Clf.predict(X_test)
print("Accuracy score when MinMaxScaler applied to age and Standard Scaler to Fare: ", end = " ")
print(accuracy_score(y_test, predictions))
MinMax = MinMaxScaler()
df_Standard_MinMax_scaled = df.copy(deep=True)
df_Standard_MinMax_scaled[['Fare']] = MinMax.fit_transform(df[['Fare']])
Standard = StandardScaler()
df_Standard_MinMax_scaled[['Age']] = Standard.fit_transform(df[['Age']])
df_Standard_MinMax_scaled.head()
X = df_Standard_MinMax_scaled.drop('Survived', axis=1)
y = df_Standard_MinMax_scaled['Survived']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)
Clf = KNeighborsClassifier()
Clf.fit(X_train, y_train)
predictions = Clf.predict(X_test)
print("Accuracy score when Standard Scaler applied to age and MinMaxScaler to Fare: ", end = " ")
print(accuracy_score(y_test, predictions))
fare_only = df.copy(deep=True)
fare_only.drop('Age', inplace=True, axis=True)
X = fare_only.drop('Survived', axis=1)
y = fare_only['Survived']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)
Clf = KNeighborsClassifier()
Clf.fit(X_train, y_train)
predictions = Clf.predict(X_test)
print("Accuracy score using model trained without Age information: ", end = " ")
print(accuracy_score(y_test, predictions))
print(df['Fare'].corr(df['Survived']))
print(df['Age'].corr(df['Survived']))