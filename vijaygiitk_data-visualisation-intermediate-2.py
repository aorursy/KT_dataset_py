import numpy as np  # useful for many scientific computing in Python

import pandas as pd # primary data structure library
!conda install -c anaconda xlrd --yes
df_can = pd.read_excel('https://s3-api.us-geo.objectstorage.softlayer.net/cf-courses-data/CognitiveClass/DV0101EN/labs/Data_Files/Canada.xlsx',

                       sheet_name='Canada by Citizenship',

                       skiprows=range(20),

                       skipfooter=2

                      )



print('Data downloaded and read into a dataframe!')
# clean up the dataset to remove unnecessary columns (eg. REG) 

df_can.drop(['AREA', 'REG', 'DEV', 'Type', 'Coverage'], axis=1, inplace=True)



# let's rename the columns so that they make sense

df_can.rename(columns={'OdName':'Country', 'AreaName':'Continent','RegName':'Region'}, inplace=True)



# for sake of consistency, let's also make all column labels of type string

df_can.columns = list(map(str, df_can.columns))



# set the country name as index - useful for quickly looking up countries using .loc method

df_can.set_index('Country', inplace=True)



# add total column

df_can['Total'] = df_can.sum(axis=1)



# years that we will be using in this lesson - useful for plotting later on

years = list(map(str, range(1980, 2014)))

print('data dimensions:', df_can.shape)
%matplotlib inline



import matplotlib as mpl

import matplotlib.pyplot as plt



mpl.style.use('ggplot') # optional: for ggplot-like style



# check for latest version of Matplotlib

print('Matplotlib version: ', mpl.__version__) # >= 2.0.0
# group countries by continents and apply sum() function 

df_continents = df_can.groupby('Continent', axis=0).sum()



# note: the output of the groupby method is a `groupby' object. 

# we can not use it further until we apply a function (eg .sum())

print(type(df_can.groupby('Continent', axis=0)))



df_continents.head(3)
# autopct create %, start angle represent starting point

df_continents['Total'].plot(kind='pie',

                            figsize=(5, 6),

                            autopct='%1.1f%%', # add in percentages

                            startangle=90,     # start angle 90Â° (Africa)

                            shadow=True,       # add shadow      

                            )



plt.title('Immigration to Canada by Continent [1980 - 2013]')

plt.axis('equal') # Sets the pie chart to look like a circle.



plt.show()
colors_list = ['gold', 'yellowgreen', 'lightcoral', 'lightskyblue', 'lightgreen', 'pink']

explode_list = [0.1, 0, 0, 0, 0.1, 0.1] # ratio for each continent with which to offset each wedge.



df_continents['Total'].plot(kind='pie',

                            figsize=(15, 6),

                            autopct='%1.1f%%', 

                            startangle=90,    

                            shadow=True,       

                            labels=None,         # turn off labels on pie chart

                            pctdistance=1.12,    # the ratio between the center of each pie slice and the start of the text generated by autopct 

                            colors=colors_list,  # add custom colors

                            explode=explode_list # 'explode' lowest 3 continents

                            )



# scale the title up by 12% to match pctdistance

plt.title('Immigration to Canada by Continent [1980 - 2013]', y=1.12) 



plt.axis('equal') 



# add legend

plt.legend(labels=df_continents.index, loc='upper left') 



plt.show()
explode_list = [0.1, 0, 0, 0, 0.1, 0.2] 



df_continents['2013'].plot(kind='pie',

                            figsize=(15, 6),

                            autopct='%1.1f%%', 

                            startangle=90,    

                            shadow=True,       

                            labels=None,                 # turn off labels on pie chart

                            pctdistance=1.12,            # the ratio between the pie center and start of text label

                            explode=explode_list         # 'explode' lowest 3 continents

                            )



plt.title('Immigration to Canada by Continent in 2013', y=1.12) 



plt.axis('equal') 



plt.legend(labels=df_continents.index, loc='upper left') 



plt.show()
# to get a dataframe, place extra square brackets around 'Japan'.

df_japan = df_can.loc[['Japan'], years].transpose()

df_japan.head(3)
df_japan.plot(kind='box', figsize=(8, 6))



plt.title('Box plot of Japanese Immigrants from 1980 - 2013')

plt.ylabel('Number of Immigrants')



plt.show()
df_japan.describe()
df_CI = df_can.loc[['India', 'China'], years].transpose()

df_CI.head(3)
df_CI.describe()
df_CI.plot(kind='box', figsize=(10, 7))



plt.title('Box plots of Immigrants from India and China(1980 - 2013)')

plt.xlabel('Number of Immigrants')



plt.show()
# horizontal box plots

df_CI.plot(kind='box', figsize=(10, 7), color='blue', vert=False)



plt.title('Box plots of Immigrants from China and India (1980 - 2013)')

plt.xlabel('Number of Immigrants')



plt.show()
fig = plt.figure() # create figure



ax0 = fig.add_subplot(1, 2, 1) # add subplot 1 (1 row, 2 columns, first plot)

ax1 = fig.add_subplot(1, 2, 2) # add subplot 2 (1 row, 2 columns, second plot). See tip below**



# Subplot 1: Box plot

df_CI.plot(kind='box', color='blue', vert=False, figsize=(20, 6), ax=ax0) # add to subplot 1

ax0.set_title('Box Plots of Immigrants from China and India (1980 - 2013)')

ax0.set_xlabel('Number of Immigrants')

ax0.set_ylabel('Countries')



# Subplot 2: Line plot

df_CI.plot(kind='line', figsize=(20, 6), ax=ax1) # add to subplot 2

ax1.set_title ('Line Plots of Immigrants from China and India (1980 - 2013)')

ax1.set_ylabel('Number of Immigrants')

ax1.set_xlabel('Years')



plt.show()
df_top15 = df_can.sort_values(['Total'], ascending=False, axis=0).head(15)

df_top15.head(3)
### type your answer here

year_80s = list(map(str, range(1980, 1990))) 

year_90s = list(map(str, range(1990, 2000))) 

year_00s = list(map(str, range(2000, 2010)))



df_80s = df_top15.loc[:, year_80s].sum(axis=1) 

df_90s = df_top15.loc[:, year_90s].sum(axis=1) 

df_00s = df_top15.loc[:, year_00s].sum(axis=1)



new_df = pd.DataFrame({'1980s': df_80s, '1990s': df_90s, '2000s':df_00s}) 



new_df.head(3)
new_df.describe()
new_df.plot(kind='box', figsize=(12, 6))



plt.show()
# let's check how many entries fall above the outlier threshold 

new_df[new_df['2000s']> 209611.5]
# we can use the sum() method to get the total population per year

df_tot = pd.DataFrame(df_can[years].sum(axis=0))



# change the years to type int (useful for regression later on)

df_tot.index = map(int, df_tot.index)



# reset the index to put in back in as a column in the df_tot dataframe

df_tot.reset_index(inplace = True)



# rename columns

df_tot.columns = ['year', 'total']



# view the final dataframe

df_tot.head(3)
df_tot.plot(kind='scatter', x='year', y='total', figsize=(10, 6), color='darkblue')



plt.title('Total Immigration to Canada from 1980 - 2013')

plt.xlabel('Year')

plt.ylabel('Number of Immigrants')



plt.show()
x = df_tot['year']      # year on x-axis

y = df_tot['total']     # total on y-axis

fit = np.polyfit(x, y, deg=1)



fit
df_tot.plot(kind='scatter', x='year', y='total', figsize=(10, 6), color='darkblue')



plt.title('Total Immigration to Canada from 1980 - 2013')

plt.xlabel('Year')

plt.ylabel('Number of Immigrants')



# plot line of best fit

plt.plot(x, fit[0] * x + fit[1], color='red') # recall that x is the Years

plt.annotate('y={0:.0f} x + {1:.0f}'.format(fit[0], fit[1]), xy=(2000, 150000))



plt.show()



# print out the line of best fit

'No. Immigrants = {0:.0f} * Year + {1:.0f}'.format(fit[0], fit[1]) 
# create df_countries dataframe

df_countries = df_can.loc[['Denmark', 'Norway', 'Sweden'], years]



 # create df_total by summing across three countries for each year

df_total = pd.DataFrame(df_countries.sum(axis=0))



# reset index in place

df_total.reset_index(inplace=True)



# rename columns

df_total.columns = ['year', 'total']



# change column year from string to int to create scatter plot

df_total['year'] = df_total['year'].astype(int)



df_total.head(3)
# generate scatter plot

df_total.plot(kind='scatter', x = 'year', y='total', figsize=(10, 6), color='darkblue')



# add title and label to axes

plt.title('Immigration from Denmark, Norway, and Sweden to Canada from 1980 - 2013')

plt.xlabel('Year')

plt.ylabel('Number of Immigrants')



# show plot

plt.show()
df_can_t = df_can[years].transpose() # transposed dataframe



# cast the Years (the index) to type int

df_can_t.index = map(int, df_can_t.index)



# let's label the index. This will automatically be the column name when we reset the index

df_can_t.index.name = 'Year'



# reset index to bring the Year in as a column

df_can_t.reset_index(inplace=True)



# view the changes

df_can_t.head(3)
# normalize Brazil data

norm_brazil = (df_can_t['Brazil'] - df_can_t['Brazil'].min()) / (df_can_t['Brazil'].max() - df_can_t['Brazil'].min())



# normalize Argentina data

norm_argentina = (df_can_t['Argentina'] - df_can_t['Argentina'].min()) / (df_can_t['Argentina'].max() - df_can_t['Argentina'].min())
# Brazil

ax0 = df_can_t.plot(kind='scatter',

                    x='Year',

                    y='Brazil',

                    figsize=(14, 8),

                    alpha=0.5,                  # transparency

                    color='green',

                    s=norm_brazil * 2000 + 10,  # pass in weights 

                    xlim=(1975, 2015)

                   )



# Argentina

ax1 = df_can_t.plot(kind='scatter',

                    x='Year',

                    y='Argentina',

                    alpha=0.5,

                    color="blue",

                    s=norm_argentina * 2000 + 10,

                    ax = ax0

                   )



ax0.set_ylabel('Number of Immigrants')

ax0.set_title('Immigration from Brazil and Argentina from 1980 - 2013')

ax0.legend(['Brazil', 'Argentina'], loc='upper left', fontsize='x-large')
# normalize China data

norm_china = (df_can_t['China'] - df_can_t['China'].min()) / (df_can_t['China'].max() - df_can_t['China'].min())



# normalize India data

norm_india = (df_can_t['India'] - df_can_t['India'].min()) / (df_can_t['India'].max() - df_can_t['India'].min())
# China

ax0 = df_can_t.plot(kind='scatter',

                    x='Year',

                    y='China',

                    figsize=(14, 8),

                    alpha=0.5,                  # transparency

                    color='green',

                    s=norm_china * 2000 + 10,  # pass in weights 

                    xlim=(1975, 2015)

                   )



# India

ax1 = df_can_t.plot(kind='scatter',

                    x='Year',

                    y='India',

                    alpha=0.5,

                    color="blue",

                    s=norm_india * 2000 + 10,

                    ax = ax0

                   )



ax0.set_ylabel('Number of Immigrants')

ax0.set_title('Immigration from China and India from 1980 - 2013')

ax0.legend(['China', 'India'], loc='upper left', fontsize='x-large')