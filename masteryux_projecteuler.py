from functools import reduce

import gmpy2

import numpy as np

import multiprocessing as mp

from scipy.special import comb

import calendar

from itertools import combinations_with_replacement

import itertools
%%time

s=0

for x in range(1000):

    if x % 3 == 0 or x % 5 ==0:

        s += x

s
%%time

sum(x for x in range(1000) if x % 3 == 0 or x % 5 == 0)
%%time

def fibGenerator(n):

    a, b = 1, 1

    while b <= n:

        a, b = b, a + b

        yield a





def solution(n):

    return sum(i for i in fibGenerator(n) if not i % 2)





solution(4000000)
%%time

def isPrime(n):

    for k in range(int(n ** 0.5), 1, -1):

        if n % k == 0:

            return False

    return True





def solution(n):

    for k in range(int(n ** 0.5)+1, 1, -2):

        if n % k == 0 and isPrime(k):

            return k





solution(600851475143)
%%time

def isPrime(n):

    for k in range(int(n ** 0.5), 1, -1):

        if n % k == 0:

            return False

    return True





def solution(n):

    m=0

    for k in range(3,int(n ** 0.5),2):

        if n % k == 0 and isPrime(k):

            m=k

    return m





solution(600851475143)
%%time

def isPalindromic(n):

    return list(str(n)) == list(reversed(list(str(n))))





palList = []

for k in range(999, 99, -1):

    for i in range(k, 99, -1):

        if isPalindromic(k * i):

            palList.append(k * i)

max(palList)

%%time

def test(n):

    for k in range(11, 21):

        if n % k != 0:

            return False

    return True



def solution():

    n = 2520

    while True:

        if test(n):

            return n

        n += 2520



solution()
%%time

s1, s2 = 0, 0

for k in range(1, 101):

    s1 += k ** 2

    s2 += k

s2 ** 2 - s1
%%time

reduce(lambda x, y: x + y, range(1, 101)) ** 2 - reduce(lambda x, y: x + y ** 2, range(1, 101))
%%time

def isPrime(n):

    for k in range(int(n ** 0.5), 1, -1):

        if n % k == 0:

            return False

    return True





def nPrime(x):

    count = 0

    n = 2

    while True:

        if isPrime(n):

            count += 1

            if count == x:

                return n

        n += 1





nPrime(10001)
%%time

def nPrime(x):

    count = 0

    n = 2

    while True:

        if gmpy2.is_prime(n):

            count += 1

            if count == x:

                return n

        n += 1





nPrime(10001)
%%time



def nPrimeGen(n):

    i=1

    p = 2

    while i<=n:

        yield p

        p = gmpy2.next_prime(p)

        i += 1



for p in nPrimeGen(10001):

    pass



int(p)
%%time

bigN = """73167176531330624919225119674426574742355349194934\

96983520312774506326239578318016984801869478851843\

85861560789112949495459501737958331952853208805511\

12540698747158523863050715693290963295227443043557\

66896648950445244523161731856403098711121722383113\

62229893423380308135336276614282806444486645238749\

30358907296290491560440772390713810515859307960866\

70172427121883998797908792274921901699720888093776\

65727333001053367881220235421809751254540594752243\

52584907711670556013604839586446706324415722155397\

53697817977846174064955149290862569321978468622482\

83972241375657056057490261407972968652414535100474\

82166370484403199890008895243450658541227588666881\

16427171479924442928230863465674813919123162824586\

17866458359124566529476545682848912883142607690042\

24219022671055626321111109370544217506941658960408\

07198403850962455444362981230987879927244284909188\

84580156166097919133875499200524063689912560717606\

05886116467109405077541002256983155200055935729725\

71636269561882670428252483600823257530420752963450\

"""

theMax = 0

p = theMax

for k in range(1, 1000 - 12):

    p = reduce(lambda x, y: x * y, map(int, bigN[0 + k:13 + k]))

    if p > theMax:

        theMax = p

theMax
%%time

def solution():

    for a in range(1, 1000):

        for b in range(1, 1000 - a):

            c = 1000 - a - b

            l = sorted([a, b, c])

            if l[0] ** 2 + l[1] ** 2 == l[2] ** 2:

                return a * b * c





solution()

%%time

sum(x for x in range(2000000) if gmpy2.is_prime(x))
%%time

def primeGen(n):

    p = 2

    while p<n:

        yield p

        p = gmpy2.next_prime(p)





int(sum(primeGen(2000000)))
%%time

def eratosthenes(n):

    isPrime = np.ones(n, dtype=np.bool_)

    isPrime[0] = isPrime[1] = 0

    for i in np.arange(2, int(n ** 0.5) + 1):

        if isPrime[i]:

            isPrime[i * i:n:i] = 0

    return sum(x for x in range(n) if isPrime[x])



eratosthenes(2000000)
%%time

grid = """

08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08

49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00

81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65

52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91

22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80

24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50

32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70

67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21

24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72

21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95

78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92

16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57

86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58

19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40

04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66

88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69

04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36

20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16

20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54

01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48"""



matrix = list(map(int, grid.split()))



p = 1

theMax = p

for k in range(400):

    if k % 20 <= 16:

        p = matrix[k] * matrix[k + 1] * matrix[k + 2] * matrix[k + 3]

        if p > theMax:

            theMax = p

        if k // 20 <= 16:

            p = matrix[k] * matrix[k + 21] * matrix[k + 42] * matrix[k + 63]

            if p > theMax:

                theMax = p

    if k // 20 <= 16:

        p = matrix[k] * matrix[k + 20] * matrix[k + 40] * matrix[k + 60]

        if p > theMax:

            theMax = p

        if k % 20 >= 3:

            p = matrix[k] * matrix[k + 19] * matrix[k + 38] * matrix[k + 57]

            if p > theMax:

                theMax = p

theMax
%%time

def triangleGen():

    i = 1

    while True:

        yield sum(range(i))

        i += 1

        

def divisors(n):

    c = 0

    for k in range(1, int(n ** 0.5) + 1):

        if n % k == 0:

            c += 1

    return 2 * c





def solution(n):

    for k in triangleGen():

        if divisors(k) > n:

            return k



solution(500)
%%time

def triangleGen():

    x,y = 1,0

    while True:

        x,y = x+1,x + y

        yield y





def divisors(n):

    c = 0

    for k in range(1, int(n ** 0.5) + 1):

        if n % k == 0:

            c += 1

    return 2 * c







def solution(n):

    for k in triangleGen():

        if divisors(k) > n:

            return k



solution(500)
%%time

nums = """

37107287533902102798797998220837590246510135740250

46376937677490009712648124896970078050417018260538

74324986199524741059474233309513058123726617309629

91942213363574161572522430563301811072406154908250

23067588207539346171171980310421047513778063246676

89261670696623633820136378418383684178734361726757

28112879812849979408065481931592621691275889832738

44274228917432520321923589422876796487670272189318

47451445736001306439091167216856844588711603153276

70386486105843025439939619828917593665686757934951

62176457141856560629502157223196586755079324193331

64906352462741904929101432445813822663347944758178

92575867718337217661963751590579239728245598838407

58203565325359399008402633568948830189458628227828

80181199384826282014278194139940567587151170094390

35398664372827112653829987240784473053190104293586

86515506006295864861532075273371959191420517255829

71693888707715466499115593487603532921714970056938

54370070576826684624621495650076471787294438377604

53282654108756828443191190634694037855217779295145

36123272525000296071075082563815656710885258350721

45876576172410976447339110607218265236877223636045

17423706905851860660448207621209813287860733969412

81142660418086830619328460811191061556940512689692

51934325451728388641918047049293215058642563049483

62467221648435076201727918039944693004732956340691

15732444386908125794514089057706229429197107928209

55037687525678773091862540744969844508330393682126

18336384825330154686196124348767681297534375946515

80386287592878490201521685554828717201219257766954

78182833757993103614740356856449095527097864797581

16726320100436897842553539920931837441497806860984

48403098129077791799088218795327364475675590848030

87086987551392711854517078544161852424320693150332

59959406895756536782107074926966537676326235447210

69793950679652694742597709739166693763042633987085

41052684708299085211399427365734116182760315001271

65378607361501080857009149939512557028198746004375

35829035317434717326932123578154982629742552737307

94953759765105305946966067683156574377167401875275

88902802571733229619176668713819931811048770190271

25267680276078003013678680992525463401061632866526

36270218540497705585629946580636237993140746255962

24074486908231174977792365466257246923322810917141

91430288197103288597806669760892938638285025333403

34413065578016127815921815005561868836468420090470

23053081172816430487623791969842487255036638784583

11487696932154902810424020138335124462181441773470

63783299490636259666498587618221225225512486764533

67720186971698544312419572409913959008952310058822

95548255300263520781532296796249481641953868218774

76085327132285723110424803456124867697064507995236

37774242535411291684276865538926205024910326572967

23701913275725675285653248258265463092207058596522

29798860272258331913126375147341994889534765745501

18495701454879288984856827726077713721403798879715

38298203783031473527721580348144513491373226651381

34829543829199918180278916522431027392251122869539

40957953066405232632538044100059654939159879593635

29746152185502371307642255121183693803580388584903

41698116222072977186158236678424689157993532961922

62467957194401269043877107275048102390895523597457

23189706772547915061505504953922979530901129967519

86188088225875314529584099251203829009407770775672

11306739708304724483816533873502340845647058077308

82959174767140363198008187129011875491310547126581

97623331044818386269515456334926366572897563400500

42846280183517070527831839425882145521227251250327

55121603546981200581762165212827652751691296897789

32238195734329339946437501907836945765883352399886

75506164965184775180738168837861091527357929701337

62177842752192623401942399639168044983993173312731

32924185707147349566916674687634660915035914677504

99518671430235219628894890102423325116913619626622

73267460800591547471830798392868535206946944540724

76841822524674417161514036427982273348055556214818

97142617910342598647204516893989422179826088076852

87783646182799346313767754307809363333018982642090

10848802521674670883215120185883543223812876952786

71329612474782464538636993009049310363619763878039

62184073572399794223406235393808339651327408011116

66627891981488087797941876876144230030984490851411

60661826293682836764744779239180335110989069790714

85786944089552990653640447425576083659976645795096

66024396409905389607120198219976047599490197230297

64913982680032973156037120041377903785566085089252

16730939319872750275468906903707539413042652315011

94809377245048795150954100921645863754710598436791

78639167021187492431995700641917969777599028300699

15368713711936614952811305876380278410754449733078

40789923115535562561142322423255033685442488917353

44889911501440648020369068063960672322193204149535

41503128880339536053299340368006977710650566631954

81234880673210146739058568557934581403627822703280

82616570773948327592232845941706525094512325230608

22918802058777319719839450180888072429661980811197

77158542502016545090413245809786882778948721859617

72107838435069186155435662884062257473692284509516

20849603980134001723930671666823555245252804609722

53503534226472524250874054075591789781264330331690"""



int(str(sum(map(int, nums.split())))[:10])
%%time

ansDict = {}

def collatzLen(n):

    if n not in ansDict:

        if n == 1:

            ansDict[n] = 1

        elif not n % 2:

            ansDict[n] = collatzLen(n / 2)[0] + 1

        else:

            ansDict[n] = collatzLen(n * 3 + 1)[0] + 1

    return ansDict[n], n

max(collatzLen(n) for n in range(1,1000000))[1]

%%time

comb(40, 20, exact=True)
%%time

sum(map(int, str(2 ** 1000)))
%%time

sum(map(int, str(1 << 1000)))
"""

!pip install num2words

from num2words import num2words





def num2letters(n):

    return num2words(n).replace(' ', '').replace('-', '')





s = 0

for k in range(1, 1001):

    s += len(num2letters(k))

print(s)

"""
%%time

data = """75

95 64

17 47 82

18 35 87 10

20 04 82 47 65

19 01 23 75 03 34

88 02 77 73 07 63 67

99 65 04 28 06 16 70 92

41 41 26 56 83 40 80 70 33

41 48 72 33 47 32 37 16 94 29

53 71 44 65 25 43 91 52 97 51 14

70 11 33 28 77 73 17 78 39 68 17 57

91 71 52 38 17 14 91 43 58 50 27 29 48

63 66 04 68 89 53 67 30 73 16 69 87 40 31

04 62 98 27 23 09 70 98 73 93 38 53 60 04 23"""



l = []

for k in data.split('\n'):

    l.append(list(map(int, k.split())))



for x in range(len(l) - 2, -1, -1):

    for k in range(len(l[x])):

        l[x][k] = max(l[x][k] + l[x + 1][k], l[x][k] + l[x + 1][k + 1])



l[0][0]

%%time

def solution():

    c = 0

    for year in range(1901, 2001):

        for month in range(1, 13):

            if calendar.monthrange(year, month)[0] == 6:

                c += 1

    return c



solution()
%%time

sum(map(int, str(np.math.factorial(100))))
%%time

def sumDivs(n):

    s = 0

    for k in range(2, 1 + int(n ** 0.5)):

        if n % k == 0:

            s += (k + (n // k))

    s += 1

    return s





def sumAmis(starter, upperLimit, num_cores):

    s = 0

    for n in range(starter + 1, upperLimit, num_cores):

        t = sumDivs(n)

        if n == sumDivs(t) and n != t:

            s += n

    return s





def solution():

    upperLimit = 10000

    num_cores = int(mp.cpu_count())

    print(f"Parallel computing on {num_cores} CPU cores")

    pool = mp.Pool(num_cores)



    results = [pool.apply_async(sumAmis, args=(starter, upperLimit, num_cores)) for starter in

               range(num_cores)]



    return sum(result.get() for result in results)



solution()
# download names

import requests

names = requests.get('https://projecteuler.net/project/resources/p022_names.txt').text
%%time

names = [x[1:-1] for x in names.split(",")]

names.sort()

for n in range(len(names)):

    names[n] = sum(ord(letter) - 64 for letter in list(names[n])) * (n + 1)

sum(names)
%%time

def isAbundant(n):

    divs = []

    divsR = [1]

    for k in range(2, 1 + int(n ** 0.5)):

        if n % k == 0:

            divs.append(k)

    for k in divs:

        divsR.append(int(n / k))

    return sum(list(set(divsR + divs))) > n



l = [x for x in range(1, 28123) if isAbundant(x)]



s = list(set([i + j for i in l for j in l]))



print(sum(x for x in range(1, 28123) if x not in s))
%%time

def isAbundant(n):

    return sum(set(reduce(list.__add__, ([i, n//i] for i in range(1, int(n**0.5) + 1) if n % i == 0)))) > 2 * n



abundantList = (n for n in range(1, 28123) if isAbundant(n))

twoAbundantsSum = set(x + y for x, y in combinations_with_replacement(abundantList, 2))

sum(x for x in range(28123) if x not in twoAbundantsSum)
%%time

int("".join(map(str, list(itertools.permutations(range(10), 10))[999999])))
%%time

def fib(n):

    if n == 0:

        return 0

    if n == 1:

        return 1

    k = (n + 1) / 2 if n % 2 else n / 2

    fib_k = fib(k)

    fib_k_1 = fib(k - 1)

    return fib_k**2 + fib_k_1**2 if n % 2 else (2 * fib_k_1 + fib_k) * fib_k



def solution(n):

    i,l = 1,0

    while l<n:

        i+=1

        f=fib(i)

        l=len(str(f))

    return i



solution(1000)
%%time

def fibGenerator(n):

    a, b = 1, 1

    l, c = 0, 1

    while l < n:

        a, b = b, a + b

        l=len(str(a))

        c+=1

        yield a, c

        

for i in fibGenerator(1000):

    pass

i[1]