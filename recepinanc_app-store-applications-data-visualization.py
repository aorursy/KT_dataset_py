# This Python 3 environment comes with many helpful analytics libraries installed
# It is defined by the kaggle/python docker image: https://github.com/kaggle/docker-python
# For example, here's several helpful packages to load in 

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)

# Input data files are available in the "../input/" directory.
# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory

import os
print(os.listdir("../input"))

# Any results you write to the current directory are saved as output.
raw_df = pd.read_csv('../input/AppleStore.csv')
raw_df.info()
explore_df = raw_df.copy()
explore_df.head()
explore_df.size_bytes.hist()
explore_df.size_bytes.describe()
size_megabytes = explore_df.size_bytes / 10**6
size_megabytes.head()
size_megabytes.describe()
explore_df.price.hist()
explore_df.price.describe()
bins = pd.cut(explore_df.price, [-1, 0, 15, 20, 30, 50 ,100, 200, 300])
explore_df.groupby(bins)['price'].agg(['count', 'sum'])
explore_df[explore_df.price > 15].sort_values(by=['price'], ascending=False)
explore_df[explore_df.price > 15].sort_values(by=['price'], ascending=False).price.hist()
explore_df.rating_count_tot.describe()
explore_df.rating_count_tot.hist()
bins = pd.cut(explore_df.rating_count_tot, [-1, 0, 10, 10**2, 10**3, 10**4, 10**5, 10**6, 2*10**6, 5*10**6])
explore_df.groupby(bins)['rating_count_tot'].agg(['count', 'sum'])
explore_df[explore_df.rating_count_tot > 1000000].rating_count_tot.hist(figsize=(8,8))
explore_df.rating_count_ver.describe()
explore_df.rating_count_ver.hist()
explore_df.sort_values(by=['rating_count_ver'], ascending=False)
explore_df.user_rating.describe()
explore_df.user_rating.hist()
explore_df[explore_df.user_rating == 0].shape
explore_df[(explore_df.user_rating == 0) & (explore_df.rating_count_tot == 0)].shape
explore_df.user_rating_ver.describe()
explore_df.user_rating_ver.hist()
explore_df[['user_rating', 'user_rating_ver']].hist()
explore_df = explore_df.rename(columns={"sup_devices.num": "sup_devices_num", "ipadSc_urls.num": "ipadSc_urls_num", "lang.num": "lang_num"})
explore_df.sup_devices_num.describe()
explore_df.sup_devices_num.hist()
explore_df[explore_df.sup_devices_num < 20].sup_devices_num.hist()
explore_df[(20 < explore_df.sup_devices_num) & (explore_df.sup_devices_num < 30)].sup_devices_num.hist()
explore_df[(30 < explore_df.sup_devices_num) & (explore_df.sup_devices_num < 50)].sup_devices_num.hist()
explore_df.lang_num.describe()
explore_df[explore_df.lang_num == 75]
explore_df.lang_num.hist()
print(explore_df[explore_df.lang_num > 40].shape)
explore_df[explore_df.lang_num > 40]
explore_df.describe(include=['O']) # include object type columns to describe
explore_df[explore_df.track_name == "Mannequin Challenge"]
explore_df.prime_genre.value_counts()
explore_df.prime_genre.value_counts().plot(kind='pie', figsize=(15,15))
%matplotlib inline
import matplotlib.pyplot as plt
import seaborn as sns
sns.set() # set styling to default, I like it more
sns.pairplot(data=explore_df.drop(['Unnamed: 0'], axis=1), palette="husl", hue="prime_genre")
sns.lmplot(x="id", y="size_bytes", data=explore_df, scatter_kws={'alpha':0.3})
sns.lmplot(x="size_bytes", y="price", data=explore_df, scatter_kws={'alpha':0.3})
sns.lmplot(x="size_bytes", y="user_rating", data=explore_df, scatter_kws={'alpha':0.3})
sns.lmplot(x="size_bytes", y="sup_devices_num", data=explore_df, scatter_kws={'alpha':0.3})
sns.lmplot(x="size_bytes", y="lang_num", data=explore_df, scatter_kws={'alpha':0.3})
sns.lmplot(x="price", y="user_rating", data=explore_df, scatter_kws={'alpha':0.3})
sns.lmplot(x="price", y="sup_devices_num", data=explore_df, scatter_kws={'alpha':0.3})
sns.lmplot(x="price", y="lang_num", data=explore_df, scatter_kws={'alpha':0.3})
sns.lmplot(x="rating_count_tot", y="user_rating", data=explore_df, scatter_kws={'alpha':0.3})
sns.lmplot(x="lang_num", y="user_rating", data=explore_df, scatter_kws={'alpha':0.3})
sns.lmplot(x="sup_devices_num", y="user_rating", data=explore_df, scatter_kws={'alpha':0.3})
sns.set()
plt.figure(figsize=(12,12))
sns.heatmap(explore_df.corr(), vmin=-1, vmax=1, annot=True, fmt=".3f")
sns.set()
plt.figure(figsize=(20,20))
sns.violinplot(data=explore_df, x="prime_genre", y="price")
plt.xticks(rotation=-90)
sns.set()
plt.figure(figsize=(12,12))
sns.boxplot(data=explore_df[explore_df.prime_genre != 'Education'], x="prime_genre", y="price")
plt.xticks(rotation=-90)
sns.set()
plt.figure(figsize=(12,12))
sns.boxplot(data=explore_df[explore_df.prime_genre == 'Education'], x="prime_genre", y="price")
plt.xticks(rotation=-90)
explore_df[(explore_df.prime_genre == 'Education') & (explore_df.price > 50)]
sns.set()
plt.figure(figsize=(20,20))
sns.violinplot(data=explore_df, x="prime_genre", y="user_rating")
plt.xticks(rotation=-90)
sns.set()
plt.figure(figsize=(20,20))
sns.boxplot(data=explore_df, x="prime_genre", y="user_rating")
plt.xticks(rotation=-90)
explore_df[explore_df.prime_genre == 'Productivity'].user_rating.describe()
explore_df[explore_df.prime_genre == 'Music'].user_rating.describe()
explore_df[explore_df.prime_genre == 'Catalogs'].user_rating.describe()
sns.set()
plt.figure(figsize=(20,20))
sns.violinplot(data=explore_df, x="cont_rating", y="price")
plt.xticks(rotation=-90)
sns.set()
plt.figure(figsize=(20,20))
sns.boxplot(data=explore_df, x="cont_rating", y="user_rating")
plt.xticks(rotation=-90)
productivity_applications = explore_df[explore_df.prime_genre == 'Productivity']
productivity_applications = productivity_applications.drop(columns=['Unnamed: 0', 'id', 'prime_genre'], axis=1)
productivity_applications.info()
sns.set()
plt.figure(figsize=(12,12))
sns.heatmap(productivity_applications.corr(), vmin=-1, vmax=1, annot=True, fmt=".3f")
sns.set()
plt.figure(figsize=(20,20))
sns.boxplot(data=productivity_applications, x="cont_rating", y="user_rating")
plt.xticks(rotation=-90)
medical_applications = explore_df[explore_df.prime_genre == 'Medical']
medical_applications = medical_applications.drop(columns=['Unnamed: 0', 'id', 'prime_genre'], axis=1)
medical_applications.info()
sns.set()
plt.figure(figsize=(12,12))
sns.heatmap(medical_applications.corr(), vmin=-1, vmax=1, annot=True, fmt=".3f")
sns.set()
plt.figure(figsize=(20,20))
sns.boxplot(data=medical_applications, x="cont_rating", y="user_rating")
plt.xticks(rotation=-90)
prime_genre_average_prices = explore_df.groupby(['prime_genre'])['price'].mean().reset_index(level=0).sort_values(by='price', ascending=False)
sns.set()
plt.figure(figsize=(15,15))
plt.xticks(rotation=-90)
sns.barplot(x='prime_genre', y='price', data=prime_genre_average_prices)
content_rating_average_prices = explore_df.groupby(['cont_rating'])['price'].mean().reset_index(level=0).sort_values(by='price', ascending=False)
sns.set()
plt.figure(figsize=(15,15))
plt.xticks(rotation=-90)
sns.barplot(x='cont_rating', y='price', data=content_rating_average_prices)
prime_genre_average_rating = explore_df.groupby(['prime_genre'])['user_rating'].mean().reset_index(level=0).sort_values(by='user_rating', ascending=False)
sns.set()
plt.figure(figsize=(15,15))
plt.xticks(rotation=-90)
sns.barplot(x='prime_genre', y='user_rating', data=prime_genre_average_rating)
content_rating_average_user_rating = explore_df.groupby(['cont_rating'])['user_rating'].mean().reset_index(level=0).sort_values(by='user_rating', ascending=False)
sns.set()
plt.figure(figsize=(15,15))
plt.xticks(rotation=-90)
sns.barplot(x='cont_rating', y='user_rating', data=content_rating_average_user_rating)
