import numpy as np

#1. Создайте массив из 70 элементов –– количества баллов по тесту (предположим,

#что значения распределены по нормальному закону со средним 80 и стандартным

#отклонением 20).

#• Округлите значения до ближайшего целого.

stud = np.round(np.random.normal(80, 20, 70))

#• Найдите минимальный и максимальный балл по выборке. Какое количество

#студентов имеют максимальный балл?

print(max(stud), len(stud[stud == max(stud)]))

#• Найдите расстояние между средним и медианным баллом.

print(abs(np.median(stud) - np.mean(stud)))

#• Какой процент студентов имеет балл а) более 89; б) не более 65?

print(100*len(stud[stud > 89])/len(stud), 100*len(stud[stud <= 65])/len(stud))

#• Встречается ли в выборке число 66?

if len(stud[stud == 66]):

    print('yes')

else:

    print('no')

#• Отсортируйте значения по возрастанию. Разделите данные на группы: [0; 59];

#[60; 74]; [75; 89]; [90; 100]. Создайте новый массив (копию), в котором значения

#из первой группы закодированы строкой “bad”, второй –– “satisfactory”, третьей ––

#“good”, четвёртой –– “excellent”.

stud = np.sort(stud)

bsge = np.array([['bad']*len(stud[stud < 60]), ['satisfactory']*len(stud[(59 < stud) & (stud < 75)]), 

        ['good']*len(stud[(74 < stud) & (stud < 90)]), ['excellent']*len(stud[(89 < stud) & (stud < 101)])])

print(bsge)

#• Добавьте к выборке ещё 30 испытуемых, баллы каждого из которых –– случайное целое

#число между 45 и 100 (округлённое до целого).

stud = np.concatenate([stud, np.round(np.random.uniform(45, 100, 30))])
#2. Создайте матрицу размером 20 × 6 из равномерного распределения между 5 и 15.

matr = np.random.uniform(5, 15, (20, 6))

#• Какой процент составляет сумма первых 1- строк матрицы от суммы элементов

#всей матрицы?

print(100*np.sum(matr[0, :])/np.sum(matr))

#• Найдите максимальный элемент последнего столбца.

print(max(matr[:, -1]))

#• Найдите среднее значение в каждой строке.

print(np.mean(matr, axis=1))

#• Создайте новую матрицу того же размера, элементы которой вычисляются по

#правилу: bij = aij − mini

#, где aij –– элементы исходной матрицы, mini –– минимальный элемент i-й строки.

c = np.min(matr, axis=1).reshape(20, 1)

print(matr - np.hstack((c, c, c, c, c, c)))

#• Найдите строки, второй элемент которых больше 10.

print(matr[matr[:, 1] > 10, :])

#• Найдите столбцы, среднее значение элементов которых больше 10.

print(matr[:, np.mean(matr, axis = 0) > 10])

#• Транспонируйте матрицу и удалите из неё последние 3 столбца.

matr = matr.T[:, :-3]

#• Добавьте к матрице столбец из единиц (слева).

ones = np.ones((matr.shape[0], matr.shape[1] + 1))

ones[:, 1:] = matr

matr = ones

#• Добавьте к матрице пять нулевых строк (снизу).

zeros = np.zeros((matr.shape[0] + 5, matr.shape[1]))

zeros[:-5, :] = matr

matr = zeros

#• Удалите все строки, среднее значение в которых не превышает 8.

#все равно, что оставить все строки, среднее значение в которых больше 8

matr = matr[np.mean(matr, axis = 1) > 8, :]