import numpy as np

import pylab as pl

import pandas as pd

import matplotlib.pyplot as plt 

%matplotlib inline

import seaborn as sns

from sklearn.utils import shuffle

from sklearn.svm import SVC

from sklearn.metrics import confusion_matrix,classification_report

from sklearn.model_selection import cross_val_score, GridSearchCV

# Input data files are available in the "../input/" directory.

# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory



import os

print(os.listdir("../input"))



# Any results you write to the current directory are saved as output.
data = pd.read_csv("../input/malware-analysis-datasets-api-call-sequences/dynamic_api_call_sequence_per_malware_100_0_306.csv")

data.head()
data1 = data.drop(columns=['hash'],



                 axis=1)

data1 = data1.dropna(how='any')

print(data1.shape)
cnt_pro = data1['malware'].value_counts()

plt.figure(figsize=(12,4))

sns.barplot(cnt_pro.index, cnt_pro.values, alpha=0.8)

plt.ylabel('Number of data', fontsize=12)

plt.xlabel('malware', fontsize=12)

plt.xticks(rotation=90)

plt.show();
from sklearn.model_selection import train_test_split

Y = data1['malware']

X = data1.drop(columns=['malware'])

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=9)
print('X train shape: ', X_train.shape)

print('Y train shape: ', Y_train.shape)

print('X test shape: ', X_test.shape)

print('Y test shape: ', Y_test.shape)
from sklearn.neural_network import MLPClassifier



# We define the model

mlp = MLPClassifier(hidden_layer_sizes=(100,100,100),max_iter=1000, random_state=42)



# We train model

mlp.fit(X_train, Y_train)





# We predict target values

prediction = mlp.predict(X_test)
test_acc_mlp = round(mlp.fit(X_train,Y_train).score(X_test, Y_test)* 100, 2)

train_acc_mlp = round(mlp.fit(X_train, Y_train).score(X_train, Y_train)* 100, 2)
# The confusion matrix

mlp_cm = confusion_matrix(Y_test, prediction)

f, ax = plt.subplots(figsize=(5,5))

sns.heatmap(mlp_cm, annot=True, linewidth=0.7, linecolor='black', fmt='g', ax=ax, cmap="BuPu")

plt.title('MLP Confusion Matrix')

plt.xlabel('Y predict')

plt.ylabel('Y test')

plt.show()
model1 = pd.DataFrame({

    'Model': ['MLP'],

    'Train Score': [train_acc_mlp],

    'Test Score': [test_acc_mlp]

})

model1.sort_values(by='Test Score', ascending=False)
from sklearn.metrics import average_precision_score

average_precision = average_precision_score(Y_test, prediction)



print('Average precision-recall score: {0:0.2f}'.format(

      average_precision))
from sklearn.metrics import precision_recall_curve

from sklearn.metrics import plot_precision_recall_curve

import matplotlib.pyplot as plt



disp = plot_precision_recall_curve(mlp,X_train, Y_train)

disp.ax_.set_title('2-class Precision-Recall curve: '

                   'AP={0:0.2f}'.format(average_precision))