'''

 * @author Shyam Mittal - 17BIS0043

 * @email mittalshyam1007@gmail.com

 * @create date 2020-09-24 19:24:46

 * @modify date 2020-09-24 19:24:46



Automatically generated by Colaboratory.



Original file is located at

    https://colab.research.google.com/drive/1IJzCkuvplQarhv5xtIKBO8e6UOUDpzfj



'''
import numpy as np

import pandas as pd

from math import sqrt

from sklearn.model_selection import train_test_split

from sklearn.linear_model import LinearRegression

from sklearn.metrics import mean_squared_error
data = pd.read_csv('../input/salary-data-simple-linear-regression/Salary_Data.csv')
data.head()
data.shape
X, y = data.drop("Salary",axis=1), data["Salary"]
print("X\n",X.head())

print("\ny\n",y.head())
print("X's shape",X.shape)

print("y's shape",y.shape)

def custom_mse(y_test, y_pred):

  diff = y_test - y_pred

  sqrs = diff**2

  mse = sum(sqrs)/len(sqrs)

  return mse



def custom_rmse(mse):

  return sqrt(mse)



def train_and_output(X, y, split_ratio):

  X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=split_ratio)

  model = LinearRegression()

  model.fit(X_train, y_train)

  y_pred = model.predict(X_test)



  print("\nSklearn's output:")

  print("Mean Squared Error :", mean_squared_error(y_test,y_pred))

  print("Root Mean Squared Error :", sqrt(mean_squared_error(y_test,y_pred)))

  print("\nCustom Function's output:")

  mse = custom_mse(y_test,y_pred)

  print("Mean Squared Error :", mse)

  print("Root Mean Squared Error :", custom_rmse(mse))
# training-testing split ratios corresponding

#  to 50%-50%, 70%-30%, 80%-20%

split_ratios = [0.5,0.7,0.8]



for ratio in split_ratios:

  print("\n------------------------------------------\nFor ratio = {0}.".format(ratio))

  train_and_output(X, y, ratio)




