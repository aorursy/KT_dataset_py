#pip install chart-studio
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
#import chart_studio.plotly as py
import plotly.offline as of
import cufflinks as cf
import datetime
%matplotlib inline
of.init_notebook_mode(connected=True)
cf.go_offline()
donors=pd.read_csv("../input/for-school-donation-analysis/Donors/259.Donors.csv")
donations=pd.read_csv("../input/for-school-donation-analysis/donations/258.Donations.csv")
projects=pd.read_csv("../input/for-school-donation-analysis/projects/260.Projects.csv")
schools=pd.read_csv("../input/for-school-donation-analysis/schools/262.Schools.csv")
teachers=pd.read_csv("../input/for-school-donation-analysis/teachers/263.Teachers.csv")
print("Shape of donors dataframe is: ",donors.shape)
print("Shape of donations dataframe is: ",donations.shape)
print("Shape of projects dataframe is: ",projects.shape)
print("Shape of schools dataframe is: ",schools.shape)
print("Shape of teachers dataframe is: ",teachers.shape)
donors.head()
donations.head()
projects.head()
schools.head()
teachers.head()
donors.describe()
donations.describe()
projects.describe()
schools.describe()
teachers.describe()
data=pd.merge(donors,donations,how="inner",on='Donor ID')
data1=pd.merge(data,projects,how='inner',on='Project ID')
data2=pd.merge(data1,schools,how="inner",on = 'School ID')
data3=pd.merge(data2,teachers, how="inner", on="Teacher ID")
data3.head()
a=data3.columns.values.tolist()
a
tp=schools["School State"].value_counts().sort_values(ascending=False).head(10)
tp
tp.iplot(kind='bar',xTitle="States",yTitle="No of schools",title="NO of schools involved in projects by states",colorscale="-paired",theme="solar")
tp2=data3.groupby('School State')['Donation Amount'].mean().sort_values(ascending=False).head(10)
tp2
tp2.iplot(kind="bar",xTitle="State",yTitle='Average donation per project',title='Top 10 ststes with maximum average donation',colorscale="paired",theme="solar")
mean=data3["Donation Amount"].dropna().mean()
median=np.median(data3["Donation Amount"].dropna())
minimum=data3["Donation Amount"].dropna().min()
maximum=data3["Donation Amount"].dropna().max()
percentile=np.percentile(data3["Donation Amount"].dropna(),[25,75])
print("Mean donation amount is: ",np.round(mean,3))
print("Median donation amount is: ",np.round(median,3))
print("25% and 75% donation amount is: ",np.round(percentile,3))
print("Maximum donation amount is: ",np.round(maximum,3))
print("Minimum donation amount is: ",np.round(minimum,3))
tp3=data3.groupby("Donor State")['Donor ID'].count().sort_values(ascending=False).head(10)
#tp=schools["School State"].value_counts().sort_values(ascending=False).head(10)
tp3.iplot(kind="bar",xTitle="Donor State",yTitle="No of donations",title="Donations Count",colorscale="paired",theme="solar")
d1=schools["School State"].value_counts()
d2=data3.groupby("Donor State")['Donor ID'].count()
d3=pd.concat([d1,d2],axis=1,keys=["Projects","Donations"])
d3=d3.dropna()
d3.head()
d3.iplot(kind="scatter",xTitle="Donations",yTitle="Projects",title="Projects vs Donations",symbol="x",colorscale="paired",mode="markers",theme="solar")
slp, intcpt = np.polyfit(d3["Projects"],d3["Donations"],1)
x=np.array([d3.Projects.min(),d3.Projects.max()])
y=slp*x+intcpt
plt.plot(x,y)
d3.plot.scatter(x="Projects",y="Donations",color="red")
slp, intcpt = np.polyfit(d3["Projects"],d3["Donations"],1)
x=np.array([d3.Projects.min(),d3.Projects.max()])
y=slp*x+intcpt
plt.plot(x,y)
plt.tight_layout()
plt.margins(0.1)
d4=data3["Project Type"].value_counts()
d5=data3.groupby("Project Type")["Donation Amount"].sum().astype(int)
plt.subplot(2,1,1)
plt.pie(d4,startangle=180)
plt.subplot(2,1,2)
plt.pie(d5,startangle=180)
plt.tight_layout()
plt.margins(0.1)
fig=plt.gcf()
fig.set_size_inches(20,15)
d6=data3.groupby("Project Subject Category Tree")["Donation Amount"].sum().sort_values(ascending=False).astype(int).head(20)
d6.iplot(kind="bar",xTitle="Project sub category",yTitle="Donation amount",title="Donation amount by project sub category",colorscale="-paired",theme="solar")
data3[["Project Posted Date", "Project Fully Funded Date"]].isnull().sum()
data3[["Project Posted Date", "Project Fully Funded Date"]].head()
data3["Project Posted Date"]=pd.to_datetime(data3["Project Posted Date"])
data3["Project Fully Funded Date"]=pd.to_datetime(data3["Project Fully Funded Date"])
data3["Funding Time"]=data3["Project Fully Funded Date"]-data3["Project Posted Date"]
data3[["Funding Time","Project Posted Date", "Project Fully Funded Date"]].head()
data3[["Funding Time","Project Posted Date", "Project Fully Funded Date"]].isnull().sum()
data4 = data3[pd.notnull(data3["Funding Time"])]
import datetime as dt
data4["Funding Time"]=data4["Funding Time"].dt.days
data4[["Project Posted Date", "Project Fully Funded Date"]].isnull().sum()
mean_time=data4.groupby("Project ID")["Funding Time"].mean()
meantime=mean_time.mean()
meantime
f_time=data4.groupby(["School State","Project ID"])["Funding Time"].mean()
fun_time_full=f_time.groupby("School State").mean().sort_values()
fun_time=fun_time_full.head(20)
fun_time.round(0)
fun_time.iplot(kind="bar",xTitle="State",yTitle="Mean fully funding Time (in days)",title="Mean project fully funding time with states",theme="solar")
fast_states=fun_time_full[fun_time_full<=32].head(15)
fast_states.round(0)
fast_states.iplot(kind="bar",xTitle="States",yTitle="Fully funding time (in days)",title="States that fund projects faster than others",theme="solar")
slow_states=fun_time_full[fun_time_full>32].sort_values(ascending=False).head(15)
slow_states.round(0)
slow_states.iplot(kind="bar",xTitle="States",yTitle="Fully funding time (in days)",title="States that fund projects slower than others",theme="solar")