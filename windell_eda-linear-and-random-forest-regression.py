import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
%matplotlib inline
df = pd.read_csv('../input/insurance.csv')
df.head()
df.isnull().sum()
df.describe()
df['sex'].unique()
df['smoker'].unique()
df['region'].unique()
plt.figure(figsize=(16,4))
ax1=plt.subplot(1,2,1)
ax2=plt.subplot(1,2,2)
ax1.set_title('histogram of age')
ax1.set_xlabel('age')
ax1.set_ylabel('count')
ax2.set_title('boxplot of age')
df['age'].hist(bins=15,ax=ax1)
df['age'].plot(kind='box', ax=ax2)
plt.figure(figsize=(16,4))
ax1=plt.subplot(1,3,1)
ax2=plt.subplot(1,3,2)
ax3=plt.subplot(1,3,3)
ax1.set_title('charges per gender')
ax2.set_title('bmi per gender')
ax3.set_title('smokers per gender')
sns.boxplot(x=df['sex'],y=df['charges'],ax=ax1)
sns.boxplot(x=df['sex'],y=df['bmi'],ax=ax2)
sns.countplot(x=df['sex'],data=df,hue=df['smoker'],ax=ax3)
df.groupby('sex').count()
plt.figure(figsize=(16,4))
ax1=plt.subplot(1,2,1)
ax1.set_title('Distribution of bmi for both male and female genders')
sns.distplot(df[(df['sex']=='male')]['bmi'], ax=ax1, label='male bmi')
sns.distplot(df[(df['sex']=='female')]['bmi'], ax=ax1, label='female bmi')
plt.legend()
ax2=plt.subplot(1,2,2)
ax2.set_title('Distribution of bmi for both smokers and non-smokers')
sns.distplot(df[(df['smoker']=='no')]['bmi'], ax=ax2, label='non-smoker bmi')
sns.distplot(df[(df['smoker']=='yes')]['bmi'], ax=ax2, label='smoker bmi')
plt.legend()

plt.figure(figsize=(16,4))
ax1=plt.subplot(1,2,1)
plt.title("Charges per BMI value")
sns.regplot(x='bmi',y='charges',data=df, ax=ax1)
ax2=plt.subplot(1,2,2)
plt.xlabel("bmi")
plt.ylabel("charges")
plt.title("Charges per BMI value by smoker")
plt.scatter(x='bmi', y='charges', s=df['smoker']=='yes',data=df, c='red', label='smoker')
plt.scatter(x='bmi', y='charges', s=df['smoker']=='no',data=df, c='blue', label='non-smoker')
plt.legend()
df_bmi_age = df.groupby(['age'])['bmi'].mean()
plt.figure(figsize=(16,4))
ax = plt.subplot(1,2,1)
ax.set_title('Mean BMI value per year of age')
plt.ylabel('bmi')
df_bmi_age.plot(linewidth=3.3, color='black',ax=ax)
sns.regplot(x='age',y='bmi',data=df, x_estimator=np.mean, color='g', ax=ax)
ax1 = plt.subplot(1,2,2)
ax1.set_title('Mean BMI value per year of age for each gender')
plt.ylabel('bmi')
sns.regplot(x='age',y='bmi',data=df[df['sex']=='female'], x_estimator=np.mean, color='orange', label='female',ax=ax1)
sns.regplot(x='age',y='bmi',data=df[df['sex']=='male'], x_estimator=np.mean, color='b', label='male',ax=ax1)
plt.legend()
plt.figure(figsize=(16,4))
ax1 = plt.subplot(1,2,1)
ax1.set_title('Count of individuals by the number of children they have')
sns.countplot(x='children', data=df, hue='smoker', ax=ax1)
ax2 = plt.subplot(1,2,2)
ax2.set_title('Age of individuals by the number of children they have')
sns.boxplot(x='children',y='age', hue='smoker', palette='Set3', data=df, ax=ax2)
plt.figure(figsize=(16,4))
ax1 = plt.subplot(1,2,1)
plt.title("Distribution of Charges by Region")
for i in df['region'].unique():
    sns.distplot(df[(df['region']==i)]['charges'], hist=False, kde=True, label=i, ax=ax1)
ax2 = plt.subplot(1,2,2)
ax2.set_title('Distribution of Charges by Region comparing smokers and non-smokers')
sns.boxplot(x='charges',y='region',data=df, hue='smoker')
plt.figure(figsize=(16,4))
plt.hist(df['charges'], bins='auto')
plt.xlabel("charges")
plt.title("Distribution of charges")
plt.figure(figsize=(16,4))
sns.boxplot(x='charges',y='smoker',data=df)
plt.title("Overall distribution of charges comparing smokers and non-smokers")
sns.pairplot(df)
df.corr()
from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
le.fit(df.sex.drop_duplicates()) 
df.sex = le.transform(df.sex)
le.fit(df.smoker.drop_duplicates()) 
df.smoker = le.transform(df.smoker)
le.fit(df.region.drop_duplicates()) 
df.region = le.transform(df.region)
#smoker gets -1, non-smoker gets +1
def smoker(x):
    if x==0:
        x = -1 # not a smoker
    else:
        x = 1 # a smoker
    return x
df['smoker'] = df['smoker'].apply(lambda x: smoker(x))
df.head()
X = df.drop(['charges'], axis=1)
y = df['charges']
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import cross_val_predict
from sklearn.metrics import r2_score
X_train, X_test, y_train, y_test = train_test_split(X.values, y.values, test_size=0.2)
regr = LinearRegression()
regr.fit(X_train, y_train)
y_train_pred = regr.predict(X_train).ravel()
y_test_pred = regr.predict(X_test).ravel()
print("The R2 score on the Train set is:\t{:0.3f}".format(r2_score(y_train, y_train_pred)))
print("The R2 score on the Test set is:\t{:0.3f}".format(r2_score(y_test, y_test_pred)))
predicted = cross_val_predict(regr, X, y, cv=5)
plt.figure(figsize=(16,8))
plt.scatter(y, predicted, edgecolors=(0,0,0))
plt.plot([y.min(),y.max()],[y.min(),y.max()],'k--',lw=4)
plt.xlabel("Measured Charges")
plt.ylabel("Predicted Charges")
plt.title("Cross-validated Prediction of Charges")
df['age_bmi_smoker'] = df['age']*df['bmi']*df['smoker']
df.head()
X = df.drop(['charges'], axis=1)
y = df['charges']
X_train, X_test, y_train, y_test = train_test_split(X.values, y.values, test_size=0.2)
regr = LinearRegression()
regr.fit(X_train, y_train)
y_train_pred = regr.predict(X_train).ravel()
y_test_pred = regr.predict(X_test).ravel()
print("The R2 score on the Train set is:\t{:0.3f}".format(r2_score(y_train, y_train_pred)))
print("The R2 score on the Test set is:\t{:0.3f}".format(r2_score(y_test, y_test_pred)))
from sklearn.ensemble import RandomForestRegressor
rf = RandomForestRegressor(n_estimators = 10, criterion = 'mse', max_depth = 5, random_state = 1, n_jobs = -1)
rf.fit(X_train, y_train);
y_train_pred = rf.predict(X_train).ravel()
y_test_pred = rf.predict(X_test).ravel()
print("The R2 score on the Train set is:\t{:0.3f}".format(r2_score(y_train, y_train_pred)))
print("The R2 score on the Test set is:\t{:0.3f}".format(r2_score(y_test, y_test_pred)))
predicted = cross_val_predict(rf, X, y, cv=10)
plt.figure(figsize=(16,8))
plt.scatter(y, predicted, edgecolors=(0,0,0))
plt.plot([y.min(),y.max()],[y.min(),y.max()],'k--',lw=4)
plt.xlabel("Measured Charges")
plt.ylabel("Predicted Charges")
plt.title("Cross-validated Prediction accuracy of Charges")
