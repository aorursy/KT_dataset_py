import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.metrics import r2_score, mean_squared_error
from sklearn.linear_model import ElasticNet, LassoLars, Ridge, LinearRegression, Lasso
from sklearn.preprocessing import LabelEncoder, StandardScaler, PolynomialFeatures
%matplotlib inline
plt.style.use('ggplot')
df = pd.read_csv('../input/diamonds.csv',delimiter=',')
df.head()
df.info()
df.drop(['Unnamed: 0','x','y','z'],inplace=True, axis=1)
df.head()
f, ax = plt.subplots(3, figsize=(12,18))
sns.countplot('cut', data=df, ax=ax[0])
sns.countplot('color', data=df, ax=ax[1])
sns.countplot('clarity', data=df, ax=ax[2])
ax[0].set_title('Diamond cut')
ax[1].set_title('Colour of the diamond')
ax[2].set_title('Clarity of the diamond')
df.describe()
f, ax = plt.subplots(4, figsize=(12,24))
sns.distplot(df.carat,color='c',ax=ax[0])
sns.distplot(df.depth,color='c',ax=ax[1])
sns.distplot(df.table,color='c',ax=ax[2])
sns.distplot(df.price,color='c',ax=ax[3])
ax[0].set_title('Diamond carat distribution')
ax[1].set_title('Total depth distribution')
ax[2].set_title('Table width distribution')
ax[3].set_title('Price distribution')
f, ax = plt.subplots(3,figsize=(12,16))
sns.violinplot(x='clarity',y='price',data=df,ax=ax[2])
sns.violinplot(x='color',y='price',data=df,ax=ax[1])
sns.violinplot(x='cut',y='price',data=df,ax=ax[0])
ax[0].set_title('Cut vs Price')
ax[1].set_title('Color vs Price')
ax[2].set_title('Clarity vs Price')
sns.jointplot(x='carat',y='price',data=df,color='c')
le = LabelEncoder()
df.cut = le.fit_transform(df.cut)
df.color = le.fit_transform(df.color)
df.clarity = le.fit_transform(df.clarity)
df.info()
x = df.drop('price',axis=1)
y = df.price
x_train,x_, y_train,y_ = train_test_split(x,y,test_size=0.15,random_state=25)
x_dev,x_test,y_dev,y_test = train_test_split(x_,y_,test_size=0.5,random_state=25)
sc = StandardScaler()
sc.fit(x_train)
sc.transform(x_train)
sc.transform(x_dev)
clf = LinearRegression()
clf.fit(x_train,y_train)
print('Training score: {:0.3f}'.format(r2_score(y_train,clf.predict(x_train))))
print('Training MSE: {:0.3f}'.format(mean_squared_error(y_train,clf.predict(x_train))))
print('Dev set score: {:0.3f}'.format(r2_score(y_dev,clf.predict(x_dev))))
print('Dev set MSE: {:0.3f}'.format(mean_squared_error(y_dev,clf.predict(x_dev))))
print('Coefficients: {}\n Intercept: {}'.format(clf.coef_,clf.intercept_))
clf = ElasticNet(alpha=1)
clf.fit(x_train,y_train)
print('Training score: {:0.3f}'.format(r2_score(y_train,clf.predict(x_train))))
print('Training MSE: {:0.3f}'.format(mean_squared_error(y_train,clf.predict(x_train))))
print('Dev set score: {:0.3f}'.format(r2_score(y_dev,clf.predict(x_dev))))
print('Dev set MSE: {:0.3f}'.format(mean_squared_error(y_dev,clf.predict(x_dev))))
print('Coefficients: {}\n Intercept: {}'.format(clf.coef_,clf.intercept_))
clf = Ridge(alpha=10)
clf.fit(x_train,y_train)
print('Training score: {:0.3f}'.format(r2_score(y_train,clf.predict(x_train))))
print('Training MSE: {:0.3f}'.format(mean_squared_error(y_train,clf.predict(x_train))))
print('Dev set score: {:0.3f}'.format(r2_score(y_dev,clf.predict(x_dev))))
print('Dev set MSE: {:0.3f}'.format(mean_squared_error(y_dev,clf.predict(x_dev))))
print('Coefficients: {}\n Intercept: {}'.format(clf.coef_,clf.intercept_))
clf = LassoLars(alpha=1)
clf.fit(x_train,y_train)
print('Training score: {:0.3f}'.format(r2_score(y_train,clf.predict(x_train))))
print('Training MSE: {:0.3f}'.format(mean_squared_error(y_train,clf.predict(x_train))))
print('Dev set score: {:0.3f}'.format(r2_score(y_dev,clf.predict(x_dev))))
print('Dev set MSE: {:0.3f}'.format(mean_squared_error(y_dev,clf.predict(x_dev))))
print('Coefficients: {}\n Intercept: {}'.format(clf.coef_,clf.intercept_))
clf = Lasso(alpha=40)
clf.fit(x_train,y_train)
print('Training score: {:0.3f}'.format(r2_score(y_train,clf.predict(x_train))))
print('Training MSE: {:0.3f}'.format(mean_squared_error(y_train,clf.predict(x_train))))
print('Dev set score: {:0.3f}'.format(r2_score(y_dev,clf.predict(x_dev))))
print('Dev set MSE: {:0.3f}'.format(mean_squared_error(y_dev,clf.predict(x_dev))))
print('Coefficients: {}\n Intercept: {}'.format(clf.coef_,clf.intercept_))
poly = PolynomialFeatures(2)
x_train = poly.fit_transform(x_train)
x_dev = poly.fit_transform(x_dev)
clf = LinearRegression()
clf.fit(x_train,y_train)
print('Training score: {:0.3f}'.format(r2_score(y_train,clf.predict(x_train))))
print('Training MSE: {:0.3f}'.format(mean_squared_error(y_train,clf.predict(x_train))))
print('Dev set score: {:0.3f}'.format(r2_score(y_dev,clf.predict(x_dev))))
print('Dev set MSE: {:0.3f}'.format(mean_squared_error(y_dev,clf.predict(x_dev))))
print('Coefficients: {}\n Intercept: {}'.format(clf.coef_,clf.intercept_))
clf = Ridge(alpha=10)
clf.fit(x_train,y_train)
print('Training score: {:0.3f}'.format(r2_score(y_train,clf.predict(x_train))))
print('Training MSE: {:0.3f}'.format(mean_squared_error(y_train,clf.predict(x_train))))
print('Dev set score: {:0.3f}'.format(r2_score(y_dev,clf.predict(x_dev))))
print('Dev set MSE: {:0.3f}'.format(mean_squared_error(y_dev,clf.predict(x_dev))))
print('Coefficients: {}\n Intercept: {}'.format(clf.coef_,clf.intercept_))
clf = Lasso(alpha=30,max_iter=5000)
clf.fit(x_train,y_train)
print('Training score: {:0.3f}'.format(r2_score(y_train,clf.predict(x_train))))
print('Training MSE: {:0.3f}'.format(mean_squared_error(y_train,clf.predict(x_train))))
print('Dev set score: {:0.3f}'.format(r2_score(y_dev,clf.predict(x_dev))))
print('Dev set MSE: {:0.3f}'.format(mean_squared_error(y_dev,clf.predict(x_dev))))
print('Coefficients: {}\n Intercept: {}'.format(clf.coef_,clf.intercept_))
sc.transform(x_test)
x_test = poly.transform(x_test)
print('Test set score: {:0.3f}'.format(r2_score(y_test,clf.predict(x_test))))
print('Test set MSE: {:0.3f}'.format(mean_squared_error(y_test,clf.predict(x_test))))
