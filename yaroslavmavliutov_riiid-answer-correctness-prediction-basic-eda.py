import pandas as pd
import numpy as np
from matplotlib import pyplot as plt
import seaborn as sns
import os
import warnings
warnings.filterwarnings("ignore")
os.listdir('../input/riiid-test-answer-prediction')
lectures_csv = pd.read_csv("../input/riiid-test-answer-prediction/lectures.csv")
example_test_csv = pd.read_csv("../input/riiid-test-answer-prediction/example_test.csv")
train_csv = pd.read_csv("../input/riiid-test-answer-prediction/train.csv", low_memory=False, nrows=1000000)
questions_csv = pd.read_csv("../input/riiid-test-answer-prediction/questions.csv")
train_csv.head()
train_csv.nunique()
train_csv.info()
train_csv.describe()[['timestamp', 'user_answer', 'answered_correctly', 'prior_question_elapsed_time']]
train_csv.isnull().sum()
# train_csv["prior_question_elapsed_time"] = train_csv.groupby(["user_id", "content_id"]).transform(lambda x: x.fillna(x.mean()))
# train_csv["prior_question_had_explanation"] = train_csv.groupby(["user_id", "content_id"]).transform(lambda x: x.fillna(x.mean()))


# train_csv.dropna(inplace=True)
train_csv['timestamp'].hist(bins = 50)
plt.figure(figsize=(15, 7))
ax = sns.countplot(train_csv.groupby('user_id')['user_answer'].count().value_counts(), palette="hls")
plt.title("Count of answers per user", fontsize=12)
plt.xticks(rotation=90, fontsize=13)
plt.ylabel('Number of answers')
plt.xlabel('Count of users')
plt.figure(figsize=(15, 7))
ax = sns.countplot(train_csv.user_answer)
plt.title("Distribution of Mean's answer per user", fontsize=12)
plt.xticks(rotation=90, fontsize=13)
plt.ylabel('Frequency')
plt.xlabel('Average answer')
plt.figure(figsize=(15, 7))
ax = sns.distplot(train_csv.groupby('user_id')['answered_correctly'].mean())
plt.title("Distribution of correct's answer per user", fontsize=12)
plt.xticks(rotation=90, fontsize=13)
plt.ylabel('Frequency')
plt.xlabel('Average correct answer')
train_csv.groupby('user_id')['answered_correctly'].mean().median()
plt.figure(figsize=(15, 7))
ax = sns.countplot(train_csv.answered_correctly)
plt.title("Distribution of correct answer", fontsize=12)
plt.xticks(rotation=90, fontsize=13)
plt.ylabel('Frequency')
plt.xlabel('Answer')
s = train_csv.groupby('content_id')['user_answer'].count().sort_values(ascending=False)
s[:20]
zz = train_csv.groupby('content_id')['user_answer'].count().sort_values(ascending=False)
plt.figure(figsize=(15, 7))
ax = sns.lineplot(y=zz, x=range(0, len(zz)))
plt.title("Count of answers per content_id", fontsize=12)
plt.locator_params(nbins=12)
plt.ylabel('Number of answers')
plt.xlabel('Number of content_id')
zz[:15]
plt.figure(figsize=(15, 7))
ax = sns.distplot(train_csv.groupby('user_id')['prior_question_elapsed_time'].mean())
plt.title("Distribution of Mean's prior_question_elapsed_time per user", fontsize=12)
plt.xticks(rotation=90, fontsize=13)
plt.ylabel('Frequency')
plt.xlabel('Average prior_question_elapsed_time')
questions_csv.head()
questions_csv.nunique()
questions_csv.isnull().sum()
def split_tags(x):
    try: return [int(i) for i in str(x).split()]
    except: return [0]
questions_csv.tags = questions_csv.tags.apply(lambda x: split_tags(x))
unique, counts = np.unique(questions_csv.tags.sum(), return_counts=True)
plt.figure(figsize=(15, 7))
ax = sns.barplot(x=unique, y=counts)
plt.title("Count of tag", fontsize=12)
plt.tick_params(axis='x',which='both', bottom=False, top=False, labelbottom=False)
plt.ylabel('Count')
plt.xlabel('Tag')
idx = np.argsort(counts)[::-1]
print(f"most frequently tags are: {unique[idx[:5]]}")
plt.figure(figsize=(15, 7))
ax = sns.countplot(questions_csv['correct_answer'], palette="hls")
plt.title("Count of correct answer per each choice", fontsize=12)
plt.xticks(rotation=90, fontsize=12)
plt.ylabel('Count')
plt.xlabel('Correct answer')
plt.figure(figsize=(15, 7))
ax = sns.countplot(questions_csv.groupby('bundle_id').count()['question_id'], palette="hls")
plt.title("Count of questions per bundle_id", fontsize=12)
plt.xticks(rotation=90, fontsize=12)
plt.ylabel('Number of bundle')
plt.xlabel('Number of question')
plt.figure(figsize=(15, 7))
ax = sns.countplot(questions_csv['part'], palette="hls")
plt.title("Distribution of Path", fontsize=12)
plt.xticks(rotation=90, fontsize=12)
plt.ylabel('Count')
plt.xlabel('Path')
questions_csv.groupby(['part', 'correct_answer']).count()['question_id']
lectures_csv.head()
lectures_csv.nunique()
lectures_csv.isnull().sum()
plt.figure(figsize=(15, 7))
ax = sns.countplot(lectures_csv['part'], palette="hls")
plt.title("Distribution of Path", fontsize=12)
plt.xticks(rotation=90, fontsize=12)
plt.ylabel('Count')
plt.xlabel('Path')
plt.figure(figsize=(15, 7))
ax = sns.countplot(lectures_csv['type_of'], palette="hls")
plt.title("Distribution of Path", fontsize=12)
plt.xticks(rotation=90, fontsize=12)
plt.ylabel('Count')
plt.xlabel('Path')
