import numpy as np # linear algebra

import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)



# Input data files are available in the "../input/" directory.

# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory



from subprocess import check_output

print(check_output(["ls", "../input"]).decode("utf8"))

import matplotlib.pyplot as plt

import matplotlib

import plotly.plotly as py

import plotly.graph_objs as go

from plotly.offline import download_plotlyjs,init_notebook_mode,plot,iplot

init_notebook_mode(connected=True)

import seaborn as sns 

import numpy as np

import pandas as pd

import numpy as np

import random as rnd

import re

from sklearn.metrics import confusion_matrix

import seaborn as sns

import matplotlib.gridspec as gridspec

from sklearn.preprocessing import StandardScaler

from numpy import genfromtxt

from scipy.stats import multivariate_normal

from sklearn.metrics import f1_score

from sklearn.metrics import recall_score , average_precision_score

from sklearn.metrics import precision_score, precision_recall_curve

%matplotlib inline
Degree_df = pd.read_csv("../input//degrees-that-pay-back.csv")

College_df = pd.read_csv("../input//salaries-by-college-type.csv")

Region_df = pd.read_csv("../input//salaries-by-region.csv")
Degree_df.head()
#Degree_df['Mid-Career Median Salary']

#Degree_df.info()

Degree_df['Mid-Career Median Salary'] = Degree_df['Mid-Career Median Salary'].apply(lambda x: x.replace(",","").strip('$').split('.')[0])

Degree_df['Mid-Career Median Salary'] = pd.to_numeric(Degree_df['Mid-Career Median Salary'], errors='coerce')



Degree_df['Starting Median Salary'] = Degree_df['Starting Median Salary'].apply(lambda x: x.replace(",","").strip('$').split('.')[0])

Degree_df['Starting Median Salary'] = pd.to_numeric(Degree_df['Starting Median Salary'], errors='coerce')



Degree_df['Mid-Career 75th Percentile Salary'] = Degree_df['Mid-Career 75th Percentile Salary'].apply(lambda x: x.replace(",","").strip('$').split('.')[0])

Degree_df['Mid-Career 75th Percentile Salary'] = pd.to_numeric(Degree_df['Mid-Career 75th Percentile Salary'], errors='coerce')
student = b'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ZS5jb20veGFwLzEuMC8iPjx4bXA6Q3JlYXRvclRvb2w+V2luZG93cyBQaG90byBFZGl0b3IgMTAuMC4xMDAxMS4xNjM4NDwveG1wOkNyZWF0b3JUb29sPjx4bXA6Q3JlYXRlRGF0ZT4yMDE3LTEyLTEwVDEzOjA1OjAxLjgxNzwveG1wOkNyZWF0ZURhdGU+PC9yZGY6RGVzY3JpcHRpb24+PC9yZGY6UkRGPjwveDp4bXBtZXRhPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPD94cGFja2V0IGVuZD0ndyc/Pv/bAEMAAwICAwICAwMDAwQDAwQFCAUFBAQFCgcHBggMCgwMCwoLCw0OEhANDhEOCwsQFhARExQVFRUMDxcYFhQYEhQVFP/bAEMBAwQEBQQFCQUFCRQNCw0UFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFP/AABEIAZ4C4QMBIgACEQEDEQH/xAAfAAABBQEBAQEBAQAAAAAAAAAAAQIDBAUGBwgJCgv/xAC1EAACAQMDAgQDBQUEBAAAAX0BAgMABBEFEiExQQYTUWEHInEUMoGRoQgjQrHBFVLR8CQzYnKCCQoWFxgZGiUmJygpKjQ1Njc4OTpDREVGR0hJSlNUVVZXWFlaY2RlZmdoaWpzdHV2d3h5eoOEhYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4eLj5OXm5+jp6vHy8/T19vf4+fr/xAAfAQADAQEBAQEBAQEBAAAAAAAAAQIDBAUGBwgJCgv/xAC1EQACAQIEBAMEBwUEBAABAncAAQIDEQQFITEGEkFRB2FxEyIygQgUQpGhscEJIzNS8BVictEKFiQ04SXxFxgZGiYnKCkqNTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqCg4SFhoeIiYqSk5SVlpeYmZqio6Slpqeoqaqys7S1tre4ubrCw8TFxsfIycrS09TV1tfY2dri4+Tl5ufo6ery8/T19vf4+fr/2gAMAwEAAhEDEQA/AP1TooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKSjP4VyfxD+JmifDXQ7jUtXvIYFiUny3cKx4zxmgDrM0V+dN1/wV48Faf4wnsZNM1CW1hlaMsjcNzwR8vSvsn4N/tBeF/jXo8d9o13GjMBi3aUF+e2KAPTqKTNLQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFIzYBPao7m5itYWlmkWONeSznAH418X/thf8ABQDw/wDBvTbnR9Euhc66y/LLAwkRQeCCV96APYf2kf2rfCn7PvhO61LUbpbm4UYW3t5AZMkf3frX4s/tNftmeLfj9q1ys96y6SxIjiAKkLngHmvMPi/8ZvEPxi8STarrd48zMSFUEhdueOM1wGaAF3EnOST617Z+zP8AtKa58BPGllqNvdS/YY33PECWJ+gzXiVaGj6FqOuXCRWFlcXkjHAWCJnP6CgD+mT4RePIPiN4C0fW4pA73Vusr+xNdpXyv/wT78L+KvDPwmhTxMQPMjja2QqQyrjoQa+qKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKTIoAKzPEHiTTfDOnTXmpXcNpDEhcmaRUzgZwMnrXK/Fj4yeHvhH4dn1TWL2NFRWxGrgvnHpX4w/tpft6a78c7640HRbt7bw6r7g0WY3LA46jHHFAH0T+2l/wUqG298O+BZ2V+Y3kdcj0bBFfl1rGu32vahcXl9cy3E00jSMZHLYLHJxk1TmnkuJC8kjSMf4mOTUdABShSTgcnpxU9lYz6hcpBbRPPK5wEjUsfyFfcX7Jn/BOHX/iteWuseJLbyPD+QZFyUkPccH6UAfNvwT/AGa/GHxy1630zRLKSMytxNPGyx4/3q/Y79lD9gXwx8E7Gz1DU7NLjXFCu+7a6bu/HNfQHwl+Cfhv4Q+H4NN0exhHlqo814135A9cZr0EDGKAI7e1itYxHDGkSAcKihR+lS0UUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRVe+voNPtZJ7iVYokBYsxxwKAJmYKpJOAOpNfOH7Uf7ZHhb4AeH7kzXqyakVZI0jIcbyMD9a8N/bM/4KO6T8NY77wx4UuEudcwUl3qCqqcjIPPPWvyF+IPxK1v4j61PqGr3s07yMT5bysyjnPANAHd/H39qTxh8evEVzqGr3jwxuxCw28jKm0Hjj6V40WLHk5J9aSnRwvM22NGdvRRk0AN212/wv+EfiH4reJLfR9GspJJpCDvZCExn1xXt/wCyb+xD4n+P2oQahNZSQ6CH2u7ZR8g+n4V+zHwD/ZY8H/AnQYLPS7OOefAZ5riJS4bHIB9MmgD5g/ZF/wCCZ+i/D2ey8T+K4Xk1pVBWFm3xYPPIPH6V9+aXpFpo9rHb2dvFbxIAAsaBQffiraqFAAACjoBTqAExS0UUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABSFgoJJwB61keK/FeneDNDvNW1Wf7PZWsZlkfjhR1r4d+Mn/BUj4fWOi6pa+GNVF3e+UyxB0Ay3bnNAH2t4w+IGieCdFutS1O+iigt42kfDqSAOvGa/KD9sv8A4KVz+MWu/D/gidX0oEqLj7khB4PSvir4mftFeNviZ4ivtSvdbvbeO64a1iuG8sDJ4x+NeYMxdiWJJPc0AWtU1a71q9ku724kubiQ5aSVizH8aqUAFiAOTXuX7P8A+yX41+PWqWyaPpjSWLMPMkYlSFzyenpQB5P4W8H6r4w1OGx0u1e4nlYKuFOMk47V+n37Gn/BMuW1S01/4g27W90cOsCnehXqODivq79l39h3wj8CdHtnktl1HUAuWa7iDEEj1z619PxQpAgSNQiAYCr0oAyPDPg/SfCGnxWelWFvZQxqFxBEEzgYyQK2aWigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACkzSO6opLMFHqTXgX7V/7T+k/s/8AgO+vkuYpNYVN0MDEEHr1oA9wutcsLOQJNdwxsezOBVqC6hul3RSpIvqrA1/OT8YP2rPHPxN8VT6kNbvNOj3sUjtbhlXBr7D/AGE/+Ch0Hg+M6J4+1Nxbs6qs8jGRtv4mgD9eKK8++Hfx08H/ABShEvh7UhdLxw2Af516BnNAC0UUUAFFFFABRRRQAUUUUAFFFFABRRRQAVh+NPFdl4J8L6jrd/KIbSyiMsjN2ANat5dR2dtJNKdsaDJJr8ff2/8A9uzXNS8Wa74B02JIdPtnMDTRPgyKfWgDJ/bO/wCCjF58TFuvDvhto/7IyUFxG21nU+uK/Ph5GkYliWPvSMxYkk5NJQAUUUUAdF8ObeC68feHoboBreS+hWQMMjaXGa/o/wDgn4I8L+GPBunP4esreFWhTMsUYUn5RnpX82/gtZW8XaMIRmY3cewep3DFf0YfssQ6nb/CHSk1WIxXWBlSe20YoA9epaKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKSgDwX9tr4gH4b/AHXNYjuGtZYioEiHBGQ1fgJ4++J3iLxxq17JqWt3moW8kh2rPKWAX0r9pv+CpupLF+zPr9rn5nZD+jV+E9ABTo5GicMhKsOhFNooA9i/Z7+PWufCv4kaNq0ms3SadbybpITKQhHuK/dP9n/APas8EfGrQrJdJ1ZJ9T2ATxcDax7dfpX85Vdv8Mfi54g+FfiC11LSL6eEQvvMKPtV/rQB/ThkHpS18V/st/8FCvAfxC0nw/4f1nWYrfxNdIIxbZBLSc8da+0YpVmjDqcg0APooooAKKKKACiiigAooooAKrX99DptpLc3D+XDGMsxrK8ZeNtH8B6Hcatrd2llY2675JX6Aetfk9+21/wUcm8WSXHh/wVdbLNS0X2y1kwXHODQB7H+3D/AMFHtN8Dwz+FvBzw6rezboLt1ba0HUg/oK/I3xh4ouvGXiC71e8Zmubltzsxyc1Q1PVLvWr6W7vZ3ubqU5eWT7zH3qpQAUV1198KPFGm+FbHxHcaXJHo96MwXP8AC+K5GgAooooA6n4WLu+JXhhSM51GDj/gYr+l7wDCtv4T0xUQIPs8ZwP90V/N98A9P0q8+KGgPq1+LCCG9hkDHuQ4OK/pD8Eaxp+teGdPn06ZZ7fyUUOvfCigDfopKWgAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACkpaTNAHxJ/wAFUtPkk/Z31u5A+RdgP5NX4Z1+9v8AwU8tBefst+IkU/PuTA/Bq/BWaPy5GQ/wnFADKKKKACiiigD0n9nO3vrr4z+FotO3fbGugI9vXODX9G3wxt7618D6VFqW77asWJN5yc1+YX/BLn9k+W8upPGfiHTxGkZW4sJZVzu6DI/Wv1kVQigKMCgB1FFFABRRRQAUUUlABXnXxm+OHhz4L+H5tR1q+ht5VQvHFIcb8V5t+1J+2R4Y/Z88L3k32mC+1lELRWO8hnI7DpX4pftBftT+Kvj1rlxdX97cQ2DsTHZs2VRT/DQB6f8Atj/tzeIvjlrs+m6VdTaZokLNGyQPlLhTk85J9a+RWYuxJ5NJTo42ldUUbmbgAUAEcTSyKiDczHAFfc37Dv8AwT/1f4v61Z+JfEkUunaHbss8SyICl0P7vT3/AErQ/YI/YN1L4pa1D4m8UWr2Gj2pWeFJ0yl0OhA/P9K/Zjwr4V03wbottpelWsdpZW67Y4oxgAUAeZ+N/wBl/wAG+Kvhs/hKPSbS1tkhaO3ZUP7kn+IV+MP7Uv7Dvi34G+Ib5rSzuNR0KNvkvtuFYc81/QDWH4s8FaN4309rHW7CLULZgR5co45oA/l124pK/VH9u7/gndb6da3PinwNZCK33M72NpHgRKOc9K/LfUNPn026kt7iMxSocFWoAit7iS1mjmiYpLG25WHUEd6+rv2af2/PGPwZ1O2g1C5uNa07Ij8mdxtQHjPGK+TaKAP6NfgD+1h4O+OGk27WWpW6aoy5a0RiSOOa9yVgwBHIPNfzDfD74p+JPhnrFvf6Dqlxp8kbqW8kgblzkj8a/Wb9kP8A4KXaJ4wgs9D8ZSw6TNgL9suZOWbGAOD3NAH6J0tUNH1qz16wivLGdbi3kUMrr0IIzV6gBaKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKSjcB1NAC0VlnxLpi3i2pu4xcMcCPvWmrBgCKAFopM0UALRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABSUV5n8XP2gPCHwf0ya41zV7a0nRSVhlbBJxkUAekXFxHawtJK21FGS3pXy7+0V+3t4K+Cun3Udpe2uqavGCBZl8MeOe4r4C/ax/4Kaa78Qhd6P4S83RItxRbu1kzuA4z1PWvhDxF4o1XxZfG81e9kvro5zJKcmgD3T9pf9srxd8fNYlU31xp+jMCrWCuCjeh/wAmvndmLsSxyTSUUAFFFXNJ0m71u+is7KFri5kPyRr1NAFOvrz9iX9jbWPjR4us9T1Gzkj0S3lDOWXKupA6/nXZ/sf/APBOfxH8SNWh1fxbaT6Np0TgrDcR5WdTj6+9fsR8Mvhhovwt8N2uk6PZxWyxR7HeMEb8GgC94B8Eaf8AD/wzY6Lp0KRQWsflrsGBiujpKWgAooooAKKKzfEHiLTvC+ly6hql3HZWcX3ppThRQBdubmK0hMkzhIx1Y18Mftk/8FD9C+FdhcaJ4Yni1bU3U7praTmFh2Occ14n+3L/AMFGn8m78L+CLho5XBT+0LV8hSO/Wvy+1rXLzxBqM99fztcXU7F5JG6sT3oA6X4pfFbXviv4im1TW72W7LOWjWU52A9q4ujrUtraTXs6wwIZJWOFVepoALa1lu5lihQvIxwFHU1+hf7B3/BP28+IV9D4l8WQNaabAVljguU4nU44GPxqX9gL9ge98dapF4o8V2xtdOtnWVLe5T/XqcdCPx/Kv2A8O+HbHwvpNtpunQLb2luuyONegFAEXhTwrp3g3Q7XStLtktLK3XZHFH0UVr0tFABRRRQBV1LT4NWsJ7O6jEtvMhSRG6Mp7V+U3/BQL/gn3JY3V3418GWu+CZiX0+1j/1SjksePf17V+sR6VV1TS7fWLCezu41lt5kKOjdwRgigD+Wq+sZ9Nunt7iMxSocMrdRVev04/4KFfsEyaHcXXjLwbY77WVvnsbVP9WoOSx496/My4t5LWZ4pF2uhIKn2oAiqS3uHtp45o22SRsHVh2I5BqOigD7o/ZF/wCCi/iD4UXlppfiWSfWtP3BA0rgBFPA79q/YH4U/Grwt8XNDt9Q0DVbe+3ou9ICTsYjlfqDmv5lhXtv7OH7UXib4A69byafeTnSw+XtIzwSTyaAP6OqWvm/9l79srwp8e/D9upu4LDWQoT7E75kfA5bH4V9HqwYAjkGgBaKSloAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACikoZgoJPA60ALRXI+KPiz4R8GwvJrOvWmnhRz5zEf0r5b+N3/BTLwR8MLCabSRD4lkTgJayc/rigD7RZgvWuS8VfFrwj4JheXXNdtdNRepmJH9K/H/AOLX/BVjxT40WRfD0F3oIcYAVwcfrXyd48/aG8d/EYTR67r9xfQyHlJDQB+x3xr/AOCmXgb4a6bc3GiPa+JpogdsVvJy35kV8QfFj/gq14p8cRSJoVndeH9w42SA4/8AHjXwQzbmyeTSUAezzftffFaXVzf/APCX3wk3bl+YcV9L/CH/AIKweJvAdrDFr1hdeImUfM0kgGf1FfANFAH74fBr/gox8P8A4k6dbz6vf2fh2eRQxhnkJI9uM19LeGfiD4d8Y26zaNq1vqETcq0JJB/Sv5fIZmhkDocMOhr1rwB+1R8R/h01vHpHiO6trWLjyoz29KAP6SqK/ID4Rf8ABXPUfDsNtZ+ItIudXkOFa4eQDn1+9X3R8JP28fh18SLG3ku9ZstGuphxbzSHdn04zQB9MUVk6L4q0nxFCsum30N5GeQ0Z4rVoAWikpaACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiikoAWkrL8ReKNL8K6e97qt7FZWygkySnA4rzzQ/wBqL4Y69dPbWvjHTJJk6qshyP0oA9XrF8UeMtH8H6fJeavfxWMCg5eU4HSvmz9pL9vzwX8E9HlOn3Vvr9+3yi3t5MMueN3OPWvyX/aC/bf8c/GjW7gxapdWOiycCxZgQP1oA+9P2rv+CoGl+FfteheEI11KTaQNQtZPuk8dz2r8t/iV8cfGPxWvbibxFrdzqKSOSqTHOBnIH4VwckjTSM7nLsck+pptABRRRigAoxzWjoPh7UfE2pxafpdpJe3kn3IYhljX6Cfskf8ABMnVvGd5a+IPFxNhZREbtPu4zmQHnPQ0AfI3wX/Zp8ZfGXXLa103SLo2EjYe8RQVSv1t/ZW/4JweGfhNZwan4iS313UZMSL5iENF6jpX1L8Mfg34Y+E+jxWOg6bDZBQA7Rj7xHeu5oArafptvpNnFa2sawwRrtRF6AVZpaKACiiigAooooAbISsbEDJxX5If8FQv2i/GmgeJ4fCNrdXFhpV1AzPEeA2CMHr71+uFfE3/AAUU/ZNX40eErjxHp1uJdbs4vLh2rlsY5x+QoA/Da4uJLqaSaVi0jnczHuaira8WeE9R8HaxPp2pW0ltPE5TEi4zg9azLGxuNRuEgtYmnmb7qIMk0AJaWc19cLDBGZZW6KvWv0h/YD/YCn8VX1v4r8W2vl2ULLLHb3CY81Tjp175qx+wV/wT7n8QahaeK/F1sBYxMJFtp0wzqfSv1q0TRbTw/pdtp9jEIbS3TZHGOgHpQA3QdBsvDWl22nafCLe0t02Rxj+EelaNFFABRRRQAUUUUAFFFFAFDWtHtte024sbyJZbeeNo3U9wRgivyL/b6/4J8TeE7688ZeC7YNpkh+bTrZOU5yzmv2CqhrmjW2vaXdWF3H5tvPE0Tqe4YYNAH8tU0LQSvG4wyEqQexBxTK/Qr9v79gG6+HF/deLvBll5mkSv82n2qZZSTlnPtya/PeSJoZGRxtdThlPUGgBtFFFAHU/Dv4la98LvEVvrPh++ksb2E8SR9cZ5Ffsh+xd/wUF0j4qabaaJ4jnWx1NQI/OuX5cjjP4nFfiNWl4f8QXvhnVItQ0+YwXMZyrjqKAP6kLa5iu4I5oXEkUg3K69CPWpa/LD9iD/AIKV/abyw8GeOZnkeTCxalO+2OJRxg8+/wClfp9oXiCw8R6fFe6fcx3VvIoYPGcigDSopM0tABRRRQAUUUUAFFFFABRRRQAUlMmk8qF3xnaM4r5e/aI/bai+BMUvmeFL7VADt8yAjA96APqRmCqSTgDnNcl4m+LHhLwhE76vr1nY7R0mfFfkL8YP+CrXi7xQssfhSW80PJx8zdvzr5I8fftDeOviZvHiDWpL5WO75v8A9dAH7G/G7/gpp4H+FtnI+mpH4icHZttZfwz2r4m+L3/BVnxV4whlj8MC80It0+cHH618BsxZiTyTSUAek+PP2h/HfxJEi6/rs19G5yVevN2csxYnJNJRQAUUUUAFFFFABRRRQAUUUUAGansb6bTruK5gcpNGdyt6GoKKAPe/h3+2t8Uvh/cWyWfiW6WyjYboUPVfTrX2l8Jv+CvyWT2en+IdEur6SRgjXDSDC+55r8sqKAP6Nvht+1/8O/iDZwuviCxs7iQf8e7y5YV7Jput2OsQiWyuo7mM9GjORX8u+g+Ir/w3eLdafO0E6nIZa+iPhf8At/fFXwBdQI3iK4l0+MjMC+nfvQB/Qbmlr81Pg7/wVw0TWJoNO13SblZ8ANdSyACvtn4a/tHeCPiZHGuma5ZvdsM/Zlly44oA9SopFYMAR0PNLQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUlcR8RvjF4Y+GOl3F3rOrWtq8akrDK+1nI7CgDtJpkgjaSRtqKMsx6CvnP8AaG/bW8E/BTSpwmo22p6mgINpDJh0PYmvhr9qj/gqTf61Jc6H4INxpu0lXuVcFXB7Cvzm8XeL9U8ca7caxrFy11fzHLyt35/+vQB9J/tHft9eNfjRfXVvZX9zp+iSZAs3OQB3718zaL4m1Hw9evd2Fw0Fw/3nHU1l0UAaOueIL7xHfG71Cdp7gjBZjWdRRQAUUVteF/BuseMdQitNI0+a/mdgNsK5PXrQBjKpLAAcmvc/gL+yT4z+N3iC1tLfTbmz0+Tlr1o8oOa+wP2S/wDgl3d61dWfiTxo0L6cBk6dPHhyeoNfqR8PPhnoPwx0SPTNBsks7dQMquOooA+bf2Yv+CfPgz4N2ttqOq2Frqevphku1XBXuR0r65t7ZLSBIYl2xoMKB2FSUtACUtFFABRRRQAUUUUAFFFFACU2SMSKVYAgjBFPooA+Sv2j/wDgn34K+NENze2WnwWmuyAlbqTGNx69q8S/Z5/4JUJ8OfHces+KLyz1azhl3JFGuCF445zX6Q0UAU9J0q20TTrexs4xFbQIEjQdgO1XKKWgAooooAKKKKACiiigAooooAKSlooAzde0G08R6VcWF9GJbeeNo3U9CGBB/nX41/t/fsF3Hw11a68U+DdPJ0WQ5eyt03MGY5ZuO3Wv2lrJ8TeGbHxZpFxp+oQrNbzIyMp9xj+tAH8uMkTQyPG67XUlSp6gimV9+/t8fsE3fww1S68U+ErPdosh3PaQLufcxyW4r4EkjaKRkddrqdpU9QaAG0UUUAOSQxsGU4I5Br7R/Zd/4KOeKfg3NaWXiC5uNV0OHC/ZYuDtHTvXxZQDigD+kr4I/tLeEvjVodteadfwQ3Eygi1aUFwT2xXriuGAIPBr+ZP4Y/GrxZ8ItUjv/DOotZXMbblY5Iz+dfq7+yX/AMFMNJ8aW9loni+WRNTYCNryZ9ibu557UAfohS1laD4l03xNYpd6bdw3kLDcGhcMMVqUALRRRQAUUUUAFFFFADWUOpU8g8Vw3jb4J+EviFayW+uaat3FICGUkDr+Fd3RQB8H/Fn/AIJW/D/xFbznwnp1to87ZKu+Dz+Ar4i+K/8AwS58efDmOeeG+j1VVJIS2iJOPSv3MxTXiWQEMqtnrkUAfzG+IPg94x8MySrqHh6+t0jJy8kRA4rjWQozKwwynBFf02+Nvgr4S+IVvJBremrcRuMNjAP8q+Svi3/wSu+HviC3uH8JabFpl1Jlt0rAjcc89B60AfiNRX2z8Uv+CXPxA+HsdzcrfW+owqSwS3jJIXr6+lfIPizwnfeDdUksL+Nop1JBDLt6GgDEooooAKKKKACiiigAooooAKKKKADFOSNpGCqNzE4AFfUf7P37A/jL49aRZ6tp13DZ2NwN4aZDgj6596/QL4I/8Ep/B3ha1t38aWkGrXsfPmQsAM/kaAPyE0P4U+LfEUkYsNAvrlXOA0cRIr6D+Gf/AATt+IPxECbkfSdwzm5gIxX7beCfgL4M+H8KRaLpa26IMDOD/Su+jtooVASNVA9FFAH5efCH/gkMdLmSfxdfWeqQkcxquDX2D8H/ANhv4XfB+/XVNH0CO31ULtM6kcj6Yr6GxS0AMjjEaKq8KowBT6KKACiiigAooooAKKKKACiiigApM0Zrxr49ftP+E/gX4eur/UbyK5uIkLC1hlHmEjtigD0/xF4q0nwrZtdarfQ2MKjdumbaK+ZviV/wUS+H3w9umiSRNVCkjdbTA5/Svy7/AGpP2+fFfx0vLq0sLya00ByQltIDkIe3X1r5Pa4kf70jH6sTQB+wHxL/AOCvXhqHw/cRaJo95FqMqFYpg+QjdjX5rfHL9pXxj8dNUebxBqcl3bq26ON85H615LuJ6kn60lAC7qSiigAooooAKdHG0kioo3MxwAO5NNrs/hJeaLa+OtJOu2rXlm1zEuxTjBLjmgD179nn9iPxp8ctStwltJpdkSGaa5iO0qOSM+4r9e/2bP2G/BXwOsbe7Omwy66igG6jxg8c8Y9a9f8AgvaaFD4C0o6FCkVo1vGcKQeSg9BXeUANjjEaqq8KowKdS0UAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABSUtFAGL4r8K2Hi/RrjTtQhWaCZGUhgO4x6V+JH/BQT9j+1+CHii41nRZIYNKm/eNb7suWY5z+tfufI21GPoM1+M3/BXH4j3F58WINBR/8ARWtEcr7gLQB+eVFFFABRRRQAU+OaSFsxuyH1U4plFAH1v+zN/wAFAvGfwVvLOyvr+S58PxkCS3RSXKjtnNfr78A/2s/Bvxu0O3ubS9isrlkBMNxMock9gK/nLzXU+BfiTr3w71iDUtGvZILiFtyZY7c/TNAH9PkcqyKGRgynow6U6vyu/ZT/AOCpiNNZ6B48aa5uJsRRTRLtRT6k4/rX6X+D/H2ieONNhvdK1C3uVkGdkcqsw+oFAHR0UlFAC0UUUAFFFFABRRRQAUlLRQBleJZI7fQtQlkRWC28h5APRTX84f7THjYeNvitrU6rsFvdTQ4xjo+P6V/Rx4whafw1qaJ1a3k/9ANfzT/GjRJ9D+JniOOcYZ7+dhx23mgDiKKKKACiiigAooooAKKKKACiiigD90/+CYPiP+0vgXounFQRbW+QcDPavtTFfEf/AAS50M2fwU0q+xxPbDn8q+3aACiiigAooooAKKKKACiiigAooooAKKKSgAqtf6la6ZbtPd3EdvCoy0krBVH4muM+KHxm8M/CjRJ9R1nULdPKXcIPOUO30Ffkj+1//wAFJNf+IF5c6F4Ou3tNGy0c6yqcsO2DxQB9aftif8FHNI+FtjdaL4VnaXXWUpFcwsHjVhnk4/xr8i/ip8avFPxg1iTUfEeoNdzsxbjIHPtmuO1PVrnWLyS5u5nllkbcSzE8/jVOgAooooAKKKKACiiigAooooAKltLhrS6hnQ4eJ1dT7g5qKigD94P+CYnxMn8ffAWFr6bzLuO4aMAnnaMgV9j1+Un/AASH8fJ9pHhjzPnxJLsz9ea/VugBaKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAgvm2WVw3pGx/SvwW/wCCl2rPq/x68xv4LfZ+W2v3n1L/AJB91/1yb+Rr8B/+Cin/ACXST/rkf6UAfLFFFFABRRRQAUUUUAFFFFADo5GiYMjFWHRlODXvn7P37Y3jf4FapD/Z+oFtOZgJkmy52jsOfYV4DRQB+8f7MP8AwUS8F/G2NNLuZpLPV4gBNJdERoxPpkCvryz1C21CMSWtxFcxno0Thh+Yr+W7SdavNEukuLK5lt5VOcxuV/lX2p+zN/wUo8U/C5rXTPENx9o0SHC/KheTb355oA/cWlrxT4E/tWeCvjrodvf6TfR2xkXcI7qRUb8ia9ojlSVdyMHX1U5FAD6KKKACiiigAooooAo65MkOj3ryHCCB85/3TX86X7XWsabrPxc1OTTQRGk0qvzn5t1fv58br660/wCHmqS2ufN8phx/umv5t/iFM9x44155CxY30xO7/fNAHPUUUUAFFFFABRRRQAUUUUAFFFFAH71f8Ez9c0+8/Zz8N2UBzeQW483n2FfX1fm//wAEjbm6k8O3ccm/yFtV2bunbpX6QUAFFFFABRRRQAUUUUAFFFFABRSZrn/GHjjSPBGlTX+qXkNvHEM7XkVWP4E0Abk9xFbxmSaRYo15LOQAPzr5N/aq/b08KfA3TprC1uftesuhMTWzCRVI9cdK+SP2uv8AgqFc6rdXnh/wBK0VtGWimeaPq44yD6da/NvxF4o1HxRqlxqGo3U0887l23uWHPpk0Ael/tA/tLeK/j34ma/1e/c28bMIY4yUG0+ozXj7MWJJOSepNJRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQB9r/APBJ/Wzpf7ScYZj5Zs3GM+xr9zom8yNW7MAa/Ab/AIJu6tHo/wC0JbTSHCmAr+ea/fTT5PMsbZx0aNSPyoAsUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQBX1AbrG5HrG38jX4Hf8FIbKSx+O7LJ1aHI/Sv31uF328q+qkfpX4V/wDBVTT49O/aEgSPOGswxz7haAPi+iiigAooooAKKKKACiiigAooooAKM0UUAdP4J+I+u+AdVtr7Sr+4heBw6xrKwTj2zX6Rfszf8FV3tRa6X4/kwhwitBHk59zivy2pVdkIKkqexBxQB/TJ8Ofjp4S+JmnRXml6nAFkGQksqq3T0zXoMciSKGRgynoVORX8xngf4ueJvAOqRXum6reBo2DLG1w+3j2zX3j8Bf8AgrJ4h0maCw8ZC3XTUAG+KMF/TrigD9g6WvDvgr+134C+NlrE+jakEdhyLhlTnHua9uimSZA8bq6noVORQA+ikpaAM7X9Jj1vSLuzlXcs0TJj6givwa/bi/ZL1b4I+NtQ1RID/Zd1I87SdQCxz/Wv31NfKX/BSjwPP40/Zm1q20+1ilv/ADUZXZBuAAORmgD8BaKsX1nJp93PayjEsLlGHuDiq9ABRRRQAUUUUAFFFFABXa/Cn4X6r8VvFVno2lReZLPKI+egz71xVfoV/wAEi/B6a9481+5ntt62yI6O6ZGcjoaAP0i/Y9/Z9HwG+Ful6Zdoq6usWycqcjtXvlIBjtxS0AFFFFABRRRQAUUUlAC01mCqSSFHqap6trVlodnJc3tzHbxRqWLSOF6DPevz0/bC/wCCmVj4ItrvRPA08dzqn3MyoGX0bnBoA+nf2jP2uPCHwC0W4m1C9WW7VcqkLB+SOBgV+NP7S/7bnjP4+ardJcXht9NDMkK27GM7M8ZxjtXi3j/4na98R9Yn1HV76eZ5mLGNpWKjJ9K5KgB0kjSsWdi7HqzHJNNoooAKKKKACiiigAooooAKKKKACiiigAopyRtIwVVLN6KMmt3QfA2t+IryO2s9NuneQgA+S2OfwoAwKUAkgYzX158Mf+CbHxP8ctBcyWMUdi+DlnKtivsL4Z/8Eg/CXkwS+KpryOdcMRDMcZHPrQB8B/sY/bNJ+MGn3TWV0Ym2rvSFiOW9cV/QroDb9D05iCCbaM89fuivJ/hd+yf4G+FMMSaVYpK0fSSeJWb8zmvZY4xGioowqjAA7UAPooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigBrDcpHqK/FP8A4K7aC0Px0tL0LhRYoD/3ytftdX5Nf8FftHLeJor7y+Ft413Y9loA/LyiiigAooooAKKKKACiiigAooooAKKKKACiiigApc0lFAG54d8aa14Wvra403U7u0MEiyKsM7IDg5wcHpX6s/sL/wDBRQeJpLXwx4znjhkC7UdQCxOMDJOO4FfkVWjoGtXOgavaX1rM8MsMqyBkbHRgcfpQB/UhaXUd9bxTwtvikUOpBzwRmpq/Jz4Q/wDBVIeGfBttYas8P2qFQnzDdwBjrj2r0LQ/+Ct2gTXQXUJYYoc8ssYzQB+kNYPjfwna+NPDl3pd4N0MyEEAd8Gvnj4Z/wDBRD4T/EKaK1h1lxev0VowB/OvpPSfEOn67ax3FndRTRuAy7XB/rQB/Pj+218A5/gP8WZ7B0cR35kukLEkYLA/1r54r9gf+Ctnw4s9Q8KyeKjGPtNrCsStt7Eev4V+P1ABRRRQAUUUUAFFFFAGn4Z0C68U69ZaTZpvuruTy419TX72fsD/ALONr8Fvhbp97PD5euX1uBdKR0Ix3r8ef2LfBr+KPjz4UlEe+K2v1ZwemMH/ABr+iS3jt9LtUiBjgiUcAkKBQBbpK858d/tAeCvhyrtrOqrEE6+WVb+tfO3jD/gqN8I9Fnmt7PWJJJk6BoRjP50AfaFJkV+Wvjz/AIK9SWm//hHYbS6H8PmoBn9DXkV5/wAFjPij57eVouklO3T/AOIoA/afIoLBRknAr8Uf+HxnxV/6Amk/p/8AEVHdf8FhvipdW8kJ0bS1DqV3LwRn/gNAH7K+I/G2jeF7F7m/v4YkUEkeYufyzXyR8Zv+Cm3w78BtPY6XftPqiA7VaMFcj3zX5B/FL9pjxv8AFTXJdSvtXu7PzBgwW9wwT8q8vur2e+mMtxM88h/ikOTQB9Y/tLf8FDPHPx00+fR/MTT9OZ8iWyYxOQOn3QP518nXV9cX0hkuJpJ5D1aRix/M1BRQAUUUUAFFFFABRRRQAUUUUAFFFFABRT44ZJmCxozn0UZNfV/7Mn7AfjL44Cz1S6sXg0Ccg+cGZX29+Mf1oA+WLDSbzUpkitraWZmOBsQn+VfQ3wj/AGD/AIm/FZ7W4sNLUWLsC7SFlIXv2r9b/gL/AME//APwZt4pFhOqXAXBF9Er4/MmvpfTfD+m6PGEsbC3tEHAEMYX+VAH56fCH/gkl4S05ba88Sz3kd6mGaNXLLnrjGa+0PAP7PXgz4fWUdvZaNZT+WMCSa1Rm/MivS6WgCvbafbWaBbe3igUfwxoFH6VPS0UAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFACV85ftUfsm6b+0lb/ZdQnmtoyqjzIRzxj/AAr6OpKAPzTH/BG3wdj/AJDep/l/9lWV4h/4I76BbWbvpmp6hPcY+VW//XX6g0UAfhD8Xf8Agmb8UPBk7z6Noxu9MQZaWSQ5H6V8n+JfCGq+EtQkstTtXgnjYqwwcAj8K/qIurOG+hMU8SyxnqrDIrxL4yfsgeBPi9pc9rcabb6bLKMG4t4Rv+tAH85ZGKK+1P2sP+Cdvin4P3Fxq3h6zm1DQIwXmuJMjb6cYr4xurWWzuHhmXZIhwwNAENFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFAFvT9XvNJlElncy20g5DRNtNe7/BH9tLx78G9Qhmhv5tVjVuY7ydiAM+lfPtFAH6LftO/t2eG/j/8As73+j3U0cXiSXywsESDHCtnn8q/OmlzSfzoAKKKKACiiigAooooA+hf2OvjDonwd8cDVdZlWJEkV1YrnpXvP7TX/AAU88R+PpL/RvDYig0pspHdwuUkwe/Ar4BozQB0mp/EjxRrOft2vahdg9fNnZq56WZ5nLyMXc9SaZRQAZooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKApPSgArW8MeF9S8Xa5Z6Vpds1xeXT+XEoBwT9RXon7Pf7Ofif4/+Jo7HRLF7izikAupVyCinv8AqK/ab9lz9hvwn8E9Ftri8sotQ1UoMtdRAtGw7g0AfOH7GH/BNWDR4rLxF44t3jvVCyfZXXfGWGOOe1fpLovhzTPDlqltpljBYwKMLHAgUAfQVfihSCMJGoRR0UU+gBKWiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACkpaKAKGsaFp/iCze01G0ivLaThoplypr81v25v+Cdqa3a3PiTwTZk3KKZDa26bVzzxxX6cVFcW8d1C0UqCSNuqnoaAP5bNe0O88M6xd6XqEJgvbV/LljP8LelZ+K/bT9tz/gnnpfxcsn8QeF7dbLWbdGf7Nax4+0Oe7H/AD0r8eviR8MNd+F+vTaVrlm9nPG5Ta470AchRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUVp+G/DeoeLNYt9L0uA3N9O22OJepNAGbivtT9j3/gn74i+Md5Za1rtpNY6ExWSKZRkOhxzjFfRv7Fn/BNiGCK08R+NoGB4lWyuI8q/TI6V+mHh3wzpvhXTYbHS7SKztol2pHEMKB6CgDj/hH8CvC3wd0G20/RtNt4po0CvcpGFeTHc16LRS0AFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAJXzH+1l+xv4c+O3hu6lt7OG01dYztmjQl3b1r6dpKAP5p/jt8BfEXwK8UT6brNnLBbNIUt55BjzQO/6GvMK/o/8A2iv2Y/DHx68KXljqFjbpqDRlYbxlJaJvUfma/D39pb9kfxT8APEl3b3NncXGlLIVgvnAAkAzzQB4FRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFe+/s1fsheLv2hPFFpbW1jcW2hu+2fUkUFYv50AcN8H/gf4m+M2uRWGgafLdhm2M8fav2V/ZB/YB8OfBrRrXVNbtotT1iYLKVuI/mt27gflXsP7Ov7L/hn4E+G7S2srK3l1BEXfdhSGZh3Ne24oAjt7aO0hSGFBHEgwqr0AqWiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKAErhfi38HvD/xg8NXOl63Yw3LPGUillBPlk9xXd0UAfgt+2N+w74g+C2vXeo6VaTX2jM5PmRphI1Gea+QMV/UJ488BaT8QtBudL1e0jureZChWQZHNfjH+3N+wRrHwr1658QeFbGS+0WeQk29rH8tuo7n2oA+F6KfLC8LlHXaw6imUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUqqWYAck8AVY07TrnVLpLe1iaaZzgIvU1+iv7B3/BOu98ZX9t4w8cW7WmnwNgaXdx/65TyGGPp+tAHBfsWfsC618WdWtNa8RW0mn6UrAhJkysinoa/ZT4X/AAp8P/Cjw/DpehafDZIqASNEMeYR3rb8L+FdO8IaTBp2mWyWttEoVUj6DFa9ABS0UUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFACVleJvDOn+LNIuNO1KBbm0nQxuj9CDWtRQB+Pf7d3/BPK58J3954r8GW3m6bM5c2Nqn+pUdzx71+cV5ZT6fcPBcRtDMvDI3UV/Urq2l22tabcWN3GJra4QxyI3cHtX5Yft5/8E9ltXu/Fng21VYXYu1pbrlkUetAH5ZUVb1TS7rR7yS1vIWgnQ4MbjBH4VUoAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKvaLot5r2oRWdjA9xcSHAROvXFJo+j3WuahDZ2cLTzSMFCoMnk4r9ZP+Cf/AOwJFo8Fr4u8XWqSTfeS3mTDYPIP8qAM/wDYH/4J7x26W3i3xnaqxQ5SyuUwxB5BHHtX6eabptvpNlFaWsYigiUIiL0AAwKltLWOytooIV2RRqEVR2A6VNQAlLRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAlV9QsIdUsZrS5QSQTKUdfUGrNJQB+Vf/BQL9gNVkvPGXhK2VI3Ys9vCuWCjkk4Hua/LS+sptPuZIJ42jlQ4KsMGv6lNW0uDWNNurG6TzLe4jMci56qRg1+Ln/BSz9kW0+D+sP4v0RI7fRryYQpbIOQ2eTn8aAPgaiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKfDC80yRopZ3YKAOpJpgr6F/Ye+Edl8ZPjVZ6NfQC5hiUXG0jPKnP9KAPrr/AIJufsP/ANsvB438W2IS3RiqWlwmHPUqw9q/WKztY7G1ht4V2xRIERfQAYFZvhPw/a+GtBsbC0iEUUMKJtHsoFbNABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFACV+c/8AwWIuLqP4Q6Wqf6r7eO3utfoxXyR/wUk+GT/Eb4JrHDHuezla4PHYAH+lAH4Hnrz1oqa8hNveTxf3HZT+BxUNABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQACv0q/4JD/AAyP/CdDxgQCvkyQ5/MV+aq5LADrX7V/8Ei/DcUfwJGpvEUuTdSLuI7ZNAH35S0lLQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAVxvxe0iDWPhr4jhnQOPsExH12GuyrnPiP/wAiD4h/68Jv/QDQB/M58QNJ/sXxZqVt6TyHj/eNc7XbfGL/AJH7VfaZ/wD0I1xNABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQBZ0uMTalaRno0yL+bCv39/4J4eH4vD/wABbWGNdoaXf+Yr8B9C/wCQ3p//AF8R/wDoQr+hb9h//kidj9R/KgD6EooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKAP/9k='
import codecs

import matplotlib.image as mpimg

import plotly.tools as tls

from wordcloud import WordCloud, STOPWORDS

from scipy.misc import imread

import base64

from os import path

from PIL import Image



# Generate the Mask for student

f1 = open("student.png", "wb")

f1.write(codecs.decode(student,'base64'))

f1.close()

img1 = "student.png"

# Read in the mask

hcmask1 = np.array(Image.open(path.join(img1)))
Feature =  Degree_df['Undergraduate Major'].value_counts().index



fig, ax = plt.subplots(figsize=(16,8))

wc = WordCloud(background_color="Black", max_words=10000, mask=hcmask1, 

               stopwords=STOPWORDS, max_font_size= 40)

wc.generate(" ".join(Feature))

ax.imshow(wc.recolor( colormap= 'nipy_spectral' , random_state=17), alpha=0.9)

ax.axis('off');
Degree_df = Degree_df.sort_values("Starting Median Salary", ascending=False).reset_index(drop=True)

f, ax = plt.subplots(figsize=(15, 20)) 

ax.set_yticklabels(Degree_df['Undergraduate Major'], rotation='horizontal', fontsize='large')

g = sns.barplot(y = Degree_df['Undergraduate Major'], x= Degree_df['Starting Median Salary'])

plt.show()
Degree_df = Degree_df.sort_values("Mid-Career Median Salary", ascending=False).reset_index(drop=True)

f, ax = plt.subplots(figsize=(15,20)) 

ax.set_yticklabels(Degree_df['Undergraduate Major'], rotation='horizontal', fontsize='large')

g = sns.barplot(y = Degree_df['Undergraduate Major'], x= Degree_df['Mid-Career Median Salary'])

plt.show()
Feature = Degree_df['Undergraduate Major']

weightage = Degree_df['Starting Median Salary']

total = Degree_df['Mid-Career Median Salary']

percent = Degree_df['Percent change from Starting to Mid-Career Salary']

mid_pos = (Degree_df['Starting Median Salary'] + Degree_df['Mid-Career Median Salary']) / 2

weightage = np.array(weightage)

Feature = np.array(Feature)

total = np.array(total)

percent = np.array(percent)

mid_pos  = np.array(mid_pos)



idx = weightage.argsort()

Feature, total, percent, mid_pos, weightage = [np.take(x, idx) for x in [Feature, total, percent, mid_pos , weightage]]



s = 1

size=[]

for i, cn in enumerate(weightage):

     s = s + 1        

     size.append(s)
fig, ax = plt.subplots(figsize=(8, 16))

ax.scatter(total,size,marker="o", color="lightBlue", s=size, linewidths=10)

ax.scatter(weightage,size,marker="o", color="LightGreen", s=size, linewidths=10)

ax.set_xlabel('Median Salary')

ax.set_ylabel('Undergraduate Major')

ax.spines['top'].set_visible(False)

ax.spines['right'].set_visible(False)

ax.spines['left'].set_visible(False)

plt.grid()

for i, txt in enumerate(Feature):

      ax.annotate(txt, (110000,size[i]),fontsize=12,rotation=0,color='Brown')

      ax.annotate('.', xy=(total[i], size[i]), xytext=(weightage[i], size[i]),

            arrowprops=dict(facecolor='LightGreen', shrink=0.06),

            )

for i, pct in enumerate(percent):

     ax.annotate(pct, (mid_pos[i],size[i]),fontsize=12,rotation=0,color='Brown')



ax.annotate('Starting median Salary', (35000,52),fontsize=14,rotation=0,color='Green')

ax.annotate('Mid-Career median Salary', (35000,53),fontsize=14,rotation=0,color='Blue');

ax.annotate('.', xy=(110000, 52.5), xytext=(68000, 52.5),

            arrowprops=dict(facecolor='LightGreen', shrink=0.06),)

ax.annotate('Percent increase in the salary', (70000,53),fontsize=14,rotation=0,color='Brown');

sns.jointplot(y='Starting Median Salary',x='Mid-Career Median Salary',data=Degree_df,kind='scatter')

sns.jointplot(y='Starting Median Salary',x='Mid-Career 75th Percentile Salary',data=Degree_df,kind='scatter');
Top_degree = Degree_df.sort_values('Percent change from Starting to Mid-Career Salary', ascending=False).head(20)

f, ax = plt.subplots(figsize=(15, 5)) 

ax.set_xticklabels(Top_degree['Undergraduate Major'], rotation='vertical', fontsize='large')

g = sns.barplot(x = Top_degree['Undergraduate Major'], y= Top_degree['Percent change from Starting to Mid-Career Salary'])

plt.show()
Region_df.head()
Region_df.fillna(0)



Region_df['Mid-Career Median Salary'] = Region_df['Mid-Career Median Salary'].apply(lambda x: x.replace(",","").strip('$').split('.')[0])

Region_df['Mid-Career Median Salary'] = pd.to_numeric(Region_df['Mid-Career Median Salary'], errors='coerce')



Region_df['Starting Median Salary'] = Region_df['Starting Median Salary'].apply(lambda x: x.replace(",","").strip('$').split('.')[0])

Region_df['Starting Median Salary'] = pd.to_numeric(Region_df['Starting Median Salary'], errors='coerce')



Region_df['Mid-Career 75th Percentile Salary'] = Region_df['Mid-Career 75th Percentile Salary'].apply(lambda x: x.replace(",","").strip('$').split('.')[0])

Region_df['Mid-Career 75th Percentile Salary'] = pd.to_numeric(Region_df['Mid-Career 75th Percentile Salary'], errors='coerce')



College_df['Mid-Career Median Salary'] = College_df['Mid-Career Median Salary'].apply(lambda x: x.replace(",","").strip('$').split('.')[0])

College_df['Mid-Career Median Salary'] = pd.to_numeric(College_df['Mid-Career Median Salary'], errors='coerce')



College_df['Starting Median Salary'] = College_df['Starting Median Salary'].apply(lambda x: x.replace(",","").strip('$').split('.')[0])

College_df['Starting Median Salary'] = pd.to_numeric(College_df['Starting Median Salary'], errors='coerce')



College_df['Mid-Career 75th Percentile Salary'] = College_df['Mid-Career 75th Percentile Salary'].apply(lambda x: x.replace(",","").strip('$').split('.')[0])

College_df['Mid-Career 75th Percentile Salary'] = pd.to_numeric(College_df['Mid-Career 75th Percentile Salary'], errors='coerce')

fig, ax = plt.subplots(figsize=(15,8), ncols=3, nrows=1)



left   =  0.125  # the left side of the subplots of the figure

right  =  0.9    # the right side of the subplots of the figure

bottom =  0.1    # the bottom of the subplots of the figure

top    =  0.9    # the top of the subplots of the figure

wspace =  .8     # the amount of width reserved for blank space between subplots

hspace =  1.5    # the amount of height reserved for white space between subplots



# This function actually adjusts the sub plots using the above paramters

plt.subplots_adjust(

    left    =  left, 

    bottom  =  bottom, 

    right   =  right, 

    top     =  top, 

    wspace  =  wspace, 

    hspace  =  hspace

)



# The amount of space above titles

y_title_margin = 1.0



ax[0].set_title("Starting Median Salary", y = y_title_margin)

ax[1].set_title("How much you earn throughout", y = y_title_margin)

ax[2].set_title("How much you will reach after reaching 3rd quarter of your career", y = y_title_margin)



ax[0].set_xticklabels(Region_df['Region'], rotation='vertical', fontsize='large')

ax[1].set_xticklabels(Region_df['Region'], rotation='vertical', fontsize='large')

ax[2].set_xticklabels(Region_df['Region'], rotation='vertical', fontsize='large')

ax[0].set_ylim(35000,250000)

ax[1].set_ylim(35000,250000)

ax[2].set_ylim(35000,250000)



sns.boxplot(x='Region',y='Starting Median Salary', data=Region_df,ax=ax[0])

sns.boxplot(x='Region',y='Mid-Career Median Salary', data=Region_df,ax=ax[1])

sns.boxplot(x='Region',y='Mid-Career 75th Percentile Salary', data=Region_df,ax=ax[2])



plt.tight_layout()

df = Region_df[['Starting Median Salary','Mid-Career Median Salary','Mid-Career 75th Percentile Salary','Region']]

var = df.groupby('Region').mean()

var.plot(kind='line');
Feature = []

school  = []

Med_sal = []

v_features = Region_df['Region'].value_counts().index

for i, cn in enumerate(v_features):

     Feature.append(str(cn)) 

     filtered = Region_df[(Region_df['Region']==str(cn))]

     temp = filtered[filtered['Mid-Career Median Salary'] == filtered['Mid-Career Median Salary'].max()]['School Name'].values

     temp1 = temp[0]

     tempval = filtered['Mid-Career Median Salary'].max()

     school.append(temp1)

     Med_sal.append(tempval)



f, ax = plt.subplots(figsize=(15, 7)) 

g = sns.barplot( y = Feature,

            x = Med_sal,

                palette="GnBu_d")

plt.title("Top colleges from each region ensuring highest pay")



for i, v in enumerate(school): 

    ax.text(.5, i, v,fontsize=16,color='white',weight='bold')

fig=plt.gcf()

plt.show()
v_features = Region_df['Region'].value_counts().index



for k, region in enumerate(v_features):

  filtered_college = Region_df[(Region_df['Region']==str(region))]

  Feature = filtered_college['School Name']

  weightage = filtered_college['Starting Median Salary']

  total = filtered_college['Mid-Career Median Salary']

  position = filtered_college['Mid-Career Median Salary'].max()

  weightage = np.array(weightage)

  Feature = np.array(Feature)

  total = np.array(total)

  idx = weightage.argsort()

  Feature, total, weightage = [np.take(x, idx) for x in [Feature, total, weightage]]



  weightage = weightage[-15:]

  Feature = Feature[-15:]

  total = total[-15:]  

       

  s = 1

  size=[]

  for i, cn in enumerate(weightage):

       s = s + 1        

       size.append(s)

    

  fig, ax = plt.subplots(figsize=(8,6))

  ax.scatter(total,size,marker="o", color="Blue", s=size, linewidths=10)

  ax.scatter(weightage,size,marker="o", color="Red", s=size, linewidths=10)

  ax.set_xlabel('Median Salary')

  ax.set_ylabel('School Name')

  ax.set_title('Top Colleges from ' + str(region) + ' Region with Starting and Mid-Career median Salary')

  ax.spines['top'].set_visible(False)

  ax.spines['right'].set_visible(False)

  ax.spines['left'].set_visible(False)

  plt.grid()



  for j, txt in enumerate(Feature):

      ax.annotate(txt, (position,size[j]),fontsize=11,rotation=0,color='g')

  ax.annotate('Starting med Salary', (weightage[14]+2000,s),fontsize=8,rotation=0,color='Red')

  ax.annotate('Mid-Career med Salary', (weightage[14]+2000,s-0.5),fontsize=8,rotation=0,color='Blue');

Feature = []

school  = []

Med_sal = []

v_features = College_df['School Type'].value_counts().index

for i, cn in enumerate(v_features):

     Feature.append(str(cn)) 

     filtered = College_df[(College_df['School Type']==str(cn))]

     temp = filtered[filtered['Mid-Career Median Salary'] == filtered['Mid-Career Median Salary'].max()]['School Name'].values

     temp1 = temp[0]

     tempval = filtered['Mid-Career Median Salary'].max()

     school.append(temp1)

     Med_sal.append(tempval)



f, ax = plt.subplots(figsize=(15, 7)) 

g = sns.barplot( y = Feature,

            x = Med_sal,

                palette="GnBu_d")

plt.title("Top colleges from each School type ensuring highest pay")



for i, v in enumerate(school): 

    ax.text(.5, i, v,fontsize=16,color='white',weight='bold')

fig=plt.gcf()

plt.show()
v_features = College_df['School Type'].value_counts().index



for k, region in enumerate(v_features):

  filtered_college = College_df[(College_df['School Type']==str(region))]

  Feature = filtered_college['School Name']

  weightage = filtered_college['Starting Median Salary']

  total = filtered_college['Mid-Career Median Salary']

  position = filtered_college['Mid-Career Median Salary'].max()

  weightage = np.array(weightage)

  Feature = np.array(Feature)

  total = np.array(total)

  idx = weightage.argsort()

  Feature, total, weightage = [np.take(x, idx) for x in [Feature, total, weightage]]

  

  weightage = weightage[-8:]

  Feature = Feature[-8:]

  total = total[-8:]  

       

  s = 1

  size=[]

  for i, cn in enumerate(weightage):

       s = s + 1        

       size.append(s)

    

  fig, ax = plt.subplots(figsize=(8,3))

  ax.scatter(total,size,marker="o", color="Blue", s=size, linewidths=10)

  ax.scatter(weightage,size,marker="o", color="Red", s=size, linewidths=10)

  ax.set_xlabel('Median Salary')

  ax.set_ylabel('School Name')

  ax.set_title('Top Colleges of ' + str(region) + ' School Type with Starting and Mid-Career median Salary')

  ax.spines['top'].set_visible(False)

  ax.spines['right'].set_visible(False)

  ax.spines['left'].set_visible(False)

  plt.grid()



  for j, txt in enumerate(Feature):

      ax.annotate(txt, (position,size[j]),fontsize=11,rotation=0,color='g')

  

  ax.annotate('Starting med Salary', (weightage[7]+2000,s),fontsize=8,rotation=0,color='Red')

  ax.annotate('Mid-Career med Salary', (weightage[7]+2000,s-0.5),fontsize=8,rotation=0,color='Blue');

fig, ax = plt.subplots(figsize=(15,10), ncols=3, nrows=1)



left   =  0.125  # the left side of the subplots of the figure

right  =  0.9    # the right side of the subplots of the figure

bottom =  0.1    # the bottom of the subplots of the figure

top    =  0.9    # the top of the subplots of the figure

wspace =  .8     # the amount of width reserved for blank space between subplots

hspace =  1.5    # the amount of height reserved for white space between subplots



# This function actually adjusts the sub plots using the above paramters

plt.subplots_adjust(

    left    =  left, 

    bottom  =  bottom, 

    right   =  right, 

    top     =  top, 

    wspace  =  wspace, 

    hspace  =  hspace

)



# The amount of space above titles

y_title_margin = 1.0



ax[0].set_title("Starting Median Salary", y = y_title_margin)

ax[1].set_title("How much you earn throughout", y = y_title_margin)

ax[2].set_title("How much you will reach after reaching 3rd quarter of your career", y = y_title_margin)



ax[0].set_xticklabels(College_df['School Type'], rotation='vertical', fontsize='large')

ax[1].set_xticklabels(College_df['School Type'], rotation='vertical', fontsize='large')

ax[2].set_xticklabels(College_df['School Type'], rotation='vertical', fontsize='large')

ax[0].set_ylim(35000,250000)

ax[1].set_ylim(35000,250000)

ax[2].set_ylim(35000,250000)



sns.boxplot(x='School Type',y='Starting Median Salary', data=College_df,ax=ax[0])

sns.boxplot(x='School Type',y='Mid-Career Median Salary', data=College_df,ax=ax[1])

sns.boxplot(x='School Type',y='Mid-Career 75th Percentile Salary', data=College_df,ax=ax[2])



plt.tight_layout()

df = College_df[['Starting Median Salary','Mid-Career Median Salary','Mid-Career 75th Percentile Salary','School Type']]

var = df.groupby('School Type').mean()

var.plot(kind='line');
df = College_df[['Starting Median Salary','Mid-Career Median Salary','Mid-Career 75th Percentile Salary','School Type']]

sns.pairplot(df,hue='School Type',palette='coolwarm');
df = Region_df[['Starting Median Salary','Mid-Career Median Salary','Mid-Career 75th Percentile Salary','Region']]

sns.pairplot(df,hue='Region',palette='coolwarm');
filtered_college = College_df[(College_df['School Type']!='State') & (College_df['School Type']!='Liberal Arts')& (College_df['School Type']!='Party')]

cl = filtered_college.pivot_table(index='School Name',columns='School Type',values='Mid-Career Median Salary')

f, ax = plt.subplots(figsize=(12, 20)) 

g = sns.heatmap(cl,cmap='coolwarm',linecolor='Black',linewidths=2)

plt.show()
filtered_college = Region_df[(Region_df['Region']!='Midwestern') & (Region_df['Region']!='Western')& (Region_df['Region']!='Southern')]

cl = filtered_college.pivot_table(index='School Name',columns='Region',values='Mid-Career Median Salary')

f, ax = plt.subplots(figsize=(10, 30)) 

g = sns.heatmap(cl,cmap='coolwarm',linecolor='Black',linewidths=2)

plt.show()
unique_region = Region_df['Region'].unique()

unique_region
byregion = Region_df.groupby('Region')

df_choro = byregion.mean()

#df_choro['Mid-Career Median Salary']

#df_choro['Starting Median Salary']
state = ['CA','WA','OR','MT','ID','WY','UT','CO','NV','AK',

         'LA','AR','TN','GA','SC','FL','MS','KY','NC','WV','AZ','NM','TX','OK',

         'IL','SD','NE','KS','MO','IA','MN','WI','MI','OH','ND',

         'PA','NY','VT','ME','DE','NH','MA','DC']

         

Text = ['California','Western','Western','Western','Western','Western','Western','Western','Western','Western',

        'Southern','Southern','Southern','Southern','Southern','Southern','Southern','Southern','Southern','Southern','Southern','Southern','Southern','Southern',

        'Midwestern','Midwestern','Midwestern','Midwestern','Midwestern','Midwestern','Midwestern','Midwestern','Midwestern','Midwestern','Midwestern',

        'Northestern','Northestern','Northestern','Northestern','Northestern','Northestern','Northestern','Northestern']

        

Value = [51032,44414,44414,44414,44414,44414,44414,44414,44414,44414,

        44522,44522,44522,44522,44522,44522,44522,44522,44522,44522,44522,44522,44522,44522,

        44225,44225,44225,44225,44225,44225,44225,44225,44225,44225,44225,

        48496,48496,48496,48496,48496,48496,48496,48496]



data = dict(type = 'choropleth',

           locations = state,

           locationmode = 'USA-states',

           colorscale = 'YIOrRed',

            text = Text,

            marker = dict (line = dict(color = 'rgb(255,255,255)',width=2)),

           z = Value,

           colorbar = {'title':'Starting median salary'})



layout = dict(title = 'Region wise divide to show Starting median salary ',

         geo=dict(scope = 'usa',showlakes = True,lakecolor='rgb(85,173,240)')) 



choromap2 = go.Figure(data = [data],layout=layout)

iplot(choromap2)
state = ['CA','WA','OR','MT','ID','WY','UT','CO','NV','AK',

         'LA','AR','TN','GA','SC','FL','MS','KY','NC','WV','AZ','NM','TX','OK',

         'IL','SD','NE','KS','MO','IA','MN','WI','MI','OH','ND',

         'PA','NY','VT','ME','DE','NH','MA','DC']

         

Text = ['California','Western','Western','Western','Western','Western','Western','Western','Western','Western',

        'Southern','Southern','Southern','Southern','Southern','Southern','Southern','Southern','Southern','Southern','Southern','Southern','Southern','Southern',

        'Midwestern','Midwestern','Midwestern','Midwestern','Midwestern','Midwestern','Midwestern','Midwestern','Midwestern','Midwestern','Midwestern',

        'Northestern','Northestern','Northestern','Northestern','Northestern','Northestern','Northestern','Northestern']

        

Value = [93132,78200,78200,78200,78200,78200,78200,78200,78200,78200,

        79505,79505,79505,79505,79505,79505,79505,79505,79505,79505,79505,79505,79505,79505,

        78180,78180,78180,78180,78180,78180,78180,78180,78180,78180,78180,

        91352,91352,91352,91352,91352,91352,91352,91352]



data = dict(type = 'choropleth',

           locations = state,

           locationmode = 'USA-states',

           colorscale = 'YIOrRed',

            text = Text,

            marker = dict (line = dict(color = 'rgb(255,255,255)',width=2)),

           z = Value,

           colorbar = {'title':'Mid career median salary'})



layout = dict(title = 'Region wise divide to show Mid career median salary ',

         geo=dict(scope = 'usa',showlakes = True,lakecolor='rgb(85,173,240)')) 



choromap2 = go.Figure(data = [data],layout=layout)

iplot(choromap2)
College_df['Mid-Career 10th Percentile Salary'] = College_df['Mid-Career 10th Percentile Salary'].str.replace("$","");

College_df['Mid-Career 10th Percentile Salary'] = College_df['Mid-Career 10th Percentile Salary'].str.replace(",","");

College_df['Mid-Career 10th Percentile Salary'] = pd.to_numeric(College_df['Mid-Career 10th Percentile Salary']);



College_df['Mid-Career 25th Percentile Salary'] = College_df['Mid-Career 25th Percentile Salary'].str.replace("$","");

College_df['Mid-Career 25th Percentile Salary'] = College_df['Mid-Career 25th Percentile Salary'].str.replace(",","");

College_df['Mid-Career 25th Percentile Salary'] = pd.to_numeric(College_df['Mid-Career 25th Percentile Salary']);



College_df['Mid-Career 90th Percentile Salary'] = College_df['Mid-Career 90th Percentile Salary'].str.replace("$","");

College_df['Mid-Career 90th Percentile Salary'] = College_df['Mid-Career 90th Percentile Salary'].str.replace(",","");

College_df['Mid-Career 90th Percentile Salary'] = pd.to_numeric(College_df['Mid-Career 90th Percentile Salary']);

#College_work_school = College_work[['School Name','School Type','Mid-Career 90th Percentile Salary']]

College_df = pd.get_dummies(College_df, columns = ['School Type'])

College_work = College_df.dropna()

y = College_work['Mid-Career 90th Percentile Salary']

x = College_work.loc[:, (College_work.columns != 'Mid-Career 90th Percentile Salary') & 

                      (College_work.columns != 'Mid-Career 10th Percentile Salary') & 

                      (College_work.columns != 'Mid-Career 25th Percentile Salary') & 

                      (College_work.columns !=  'School Name')]
from sklearn.cross_validation import train_test_split

X_train, X_test, y_train, y_test = train_test_split(x, y, test_size = 0.2, random_state = 0)
from sklearn.linear_model import LinearRegression

regressor = LinearRegression()

regressor.fit(X_train, y_train)



# Predicting the Test set results

y_pred = regressor.predict(X_test)

#y_pred

plt.scatter(X_test['Starting Median Salary'],y_test,color='red')

plt.scatter(X_test['Starting Median Salary'],regressor.predict(X_test),color='blue')

plt.title('Linear regression Model built to predict Mid-Career 90th Percentile Salary')

plt.xlabel('Starting salary')

plt.ylabel('Salary in Red and Predicted Salary in blue');
rmse_val = []

from sklearn.metrics import mean_squared_error

mse = mean_squared_error(y_test, y_pred)

rmse = np.sqrt(mse)

rmse_val.append(rmse)

print(rmse)
from sklearn.preprocessing import PolynomialFeatures

poly_reg = PolynomialFeatures(degree = 2)

X_poly = poly_reg.fit_transform(X_train)

poly_reg.fit(X_poly, y_train)

lin_reg_2 = LinearRegression()

lin_reg_2.fit(X_poly, y_train)



y_pred = lin_reg_2.predict(poly_reg.fit_transform(X_test))



plt.scatter(X_test['Starting Median Salary'],y_test,color='red')

plt.scatter(X_test['Starting Median Salary'],lin_reg_2.predict(poly_reg.fit_transform(X_test)),color='blue')

plt.title('Polynomial regression Model built to predict Mid-Career 90th Percentile Salary')

plt.xlabel('Starting salary')

plt.ylabel('Salary in Red and Predicted Salary in blue');

mse = mean_squared_error(y_test, y_pred)

rmse = np.sqrt(mse)

rmse_val.append(rmse)

print(rmse)
from sklearn.ensemble import RandomForestRegressor

RF_regressor = RandomForestRegressor(n_estimators = 100, random_state = 0)

RF_regressor.fit(X_train, y_train)



# Predicting the Test set results

y_pred = RF_regressor.predict(X_test)

#y_pred

plt.scatter(X_test['Starting Median Salary'],y_test,color='red')

plt.scatter(X_test['Starting Median Salary'],RF_regressor.predict(X_test),color='blue')

plt.title('Random Forest regression Model built to predict Mid-Career 90th Percentile Salary')

plt.xlabel('Starting salary')

plt.ylabel('Salary in Red and Predicted Salary in blue');
mse = mean_squared_error(y_test, y_pred)

rmse = np.sqrt(mse)

rmse_val.append(rmse)

print(rmse)
rmse_compr = pd.DataFrame({"RMSE":rmse_val,"Algorithm":["Linear Regression","Polynomial Regression","Random Forest Regression"]})



g = sns.barplot("RMSE","Algorithm",data = rmse_compr, palette="Set3",orient = "h")

g.set_xlabel("Root Mean Square")

g = g.set_title("Performance of Regression Models")
# Code to predict Salaries with Null value

College_null = College_df[College_df['Mid-Career 90th Percentile Salary'].isnull()]

#College_null_school = College_null[['School Name','School Type']]

x_null = College_null.loc[:, (College_null.columns != 'Mid-Career 90th Percentile Salary') & 

                      (College_null.columns != 'Mid-Career 10th Percentile Salary') & 

                      (College_null.columns != 'Mid-Career 25th Percentile Salary') & 

                      (College_null.columns !=  'School Name')]
y_pred_null = regressor.predict(x_null)

y_null_df = pd.DataFrame({'Mid-Career 90th Percentile Salary':y_pred_null})

x_null = x_null.reset_index(drop=True)

null_df =  pd.concat(objs=[x_null, y_null_df], axis=1)

null_df