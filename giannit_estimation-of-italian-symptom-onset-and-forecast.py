import numpy as np # linear algebra

import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)

import matplotlib.pyplot as plt



import os

for dirname, _, filenames in os.walk('/kaggle/input'):

    for filename in filenames:

        print(os.path.join(dirname, filename))

        

data = pd.read_csv('../input/dataset/dataset.csv');



dates        = data['Date']          # dates

cn_cases_wom = data['CN_Diag_WOM']   # Chinese daily confirmed cases (Jan23-Mar15) provided by worldometers.info

cn_cases     = data['CN_Diag_CSSE']  # Chinese daily confirmed cases (Jan23-Mar15) provided by Johns Hopkins University Center for Systems Science and Engineering (JHU CSSE)

art_onset    = data['CN_Onset_WHO']  # Chinese daily onset symptom cases (Jan1-Feb21) provided by the WHO article (link above)

art_cases    = data['CN_Diag_WHO']   # Chinese daily cases (Jan21-Feb21) provided by the WHO article (link above)

it_cases     = data['IT_Diag']       # Italian daily confirmed cases
# Firstly, I plotted Chinese daily cases by CSSE vs Chinese daily cases by WOM

# to check if they were equal



# plot data from Jan 23 to Mar 16

fig, ax = plt.subplots(figsize=(15, 5))

line1, = ax.plot(dates[22:76], cn_cases_wom[22:76], label='WOM')

line2, = ax.plot(dates[22:76], cn_cases[22:76], label='CSSE')

ax.legend()

ax.set_title('CHINA: daily cases by WOM vs. daily cases by CSSE')

ax.tick_params(axis='x',labelrotation=90)

plt.show()



# The two time series are not equal...why? Did somebody already noticed this fact?

# In the following I will use the one by CSSE since it is the one used here on Kaggle by other users
# Secondly, I plotted Real Chinese data by CSSE vs. estimated Diagnosis time series of the article



# plot data from Jan 21 to Feb 21

fig, ax = plt.subplots(figsize=(15, 5))

line1, = ax.plot(dates[20:52], cn_cases[20:52], label='Real Diagnosis')

line2, = ax.plot(dates[20:52], art_cases[20:52], label='Article Diagnosis')

ax.legend()

ax.set_title('CHINA: Real daily cases vs Article daily cases')

ax.tick_params(axis='x',labelrotation=90)

plt.show()



print('real data: total number of cases up to Feb 21',sum(cn_cases[20:52]))

print('article data: total number of cases',sum(art_cases[20:52]))



#

# We immediately see that the Diagnosis series of the article is very different from the real one:

# 

# - The values are different.

# - The cumulative confirmed cases number is different: the article says 56848, while the total cases in china up to February 21 (last date in the plot contained in the article) are 75000.

# - The real data presents a big spike on February 13 of about 15000 cases, while the article plot presents only 2000 new cases on that day.

#   (about the spike, around February 12 or 13, there was a change in how China confirmed new cases: they included criteria they didn't have before)

#

# It seems that the series of the article is just a rude approximation of the real data.

# The article was published on February 24, so maybe their data were incomplete?

# Did somebody already notice this?

#
# Rates of growth for the Onset series (not considering zero values)

# it will be used to estimate the Italian onset series

rg = []

for i in range(0,len(art_onset[0:51])):

    rg.append( art_onset[i+1]/art_onset[i] )

    

# Ratio of onset over diagnosis for each day (not considering zero values)

# it will be used to predict / forecast the Italian diagnosis series

ood = []

for i in range(20,52):

    ood.append( art_onset[i]/art_cases[i] )
# Estimating the Italian onset series



it_onset = [0] * 99

# To generate the Italian onset series I thought about the following procedure

# - the first value to be generated is the one corresponding to the Wuhan shut down / closing, which happened on January 23,

#   and it is generated by multypling the Italian diagnosis of March 10, on which Italy shut down all the country, by the ratio

#   of Chinese onset over diagnosis for January 23, i.e.

it_onset[69] = ood[2] * it_cases[69]



# - the previous (down to February 17) values are computed dividing by the rates of growth

for i in list(reversed(range(22))):

    it_onset[48+i-1] = it_onset[48+i] / rg[i] # 48 = 69-21



# - the next (up to April 8) values are computed multiplying by the rates of growth

for i in range(22,51):

    it_onset[48+i] = it_onset[48+i-1] * rg[i]
# Predicting / forecasting the Italian diagnosis series



# To forecast the Italian cases of the next day, divide the Italian onset of the same day by the corresponding Chinese ratio onset over diagnosis



for i in range(0,22):  # we forecast 22 values

    it_cases[77+i] = it_onset[77+i] / ood[10+i]  # it_cases has 78 values in the dataset
# Plot Italian time series from Feb 17 to Apr 8



labels = dates[47:100]

x = np.arange(len(labels))

width = 0.35



fig, ax = plt.subplots(figsize=(15, 5))

rects1 = ax.bar(x - width/2, it_onset[47:100], width, label='Symptom onset')

rects2 = ax.bar(x + width/2, it_cases[47:100], width, label='Diagnosis')



ax.set_title('ITALY: Daily symptom onset (estimated) vs diagnosis (real up to 3/17, estimated from 3/18)')

ax.set_xticks(x)

ax.set_xticklabels(labels)

ax.tick_params(axis='x',labelrotation=90)

ax.legend()



fig.tight_layout()

plt.show()



# The big jump between 3/17 and 3/18 denotes a bad estimate

# How to properly estimate symptom onset and forecasted diagnosis?