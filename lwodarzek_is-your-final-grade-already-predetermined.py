import numpy as np 
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
%matplotlib inline

from sklearn.preprocessing import OneHotEncoder 
from sklearn.model_selection import train_test_split 
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import KFold 
from sklearn.model_selection import GridSearchCV 

sns.set()

import os
print(os.listdir("../input"))
math_data = pd.read_csv('../input/student-mat.csv')
port_data = pd.read_csv('../input/student-por.csv')
math_data.head()
port_data.head()
print("Number of Math-Students:", math_data.shape[0])
print("Number of Portugese-Students:", port_data.shape[0])
sns.distplot(math_data.age, color = "midnightblue", bins = 10)
sns.distplot(port_data.age, color = "red", bins = 10)
print("Percentage of females in math:", (round(math_data[math_data.sex == "F"].shape[0] / math_data.shape[0], 2)))
print("Percentage of females in portugese:", (round(port_data[port_data.sex == "F"].shape[0] / port_data.shape[0], 2)))
def get_percentage_count(feature, data):
    counts = data.groupby(feature).school.count()
    counts = counts / data.shape[0] * 100
    return counts
fig, ax = plt.subplots(3,3, figsize = (15,15))
sns.barplot(x = get_percentage_count("address", math_data).index.values, y = get_percentage_count("address", math_data).values, ax = ax[0,0], color = "mediumblue", alpha = 0.5)
sns.barplot(x = get_percentage_count("address", port_data).index.values, y = get_percentage_count("address", port_data).values, ax = ax[0,0], color = "red", alpha = 0.4)
ax[0,0].set_title("Address")
sns.barplot(x = get_percentage_count("famsize", math_data).index.values, y = get_percentage_count("famsize", math_data).values, ax = ax[0,1], color = "mediumblue", alpha = 0.5)
sns.barplot(x = get_percentage_count("famsize", port_data).index.values, y = get_percentage_count("famsize", port_data).values, ax = ax[0,1], color = "red", alpha = 0.4)
ax[0,1].set_title("Family Size (GT3-more than 3, ET3-up to 3)")
sns.barplot(x = get_percentage_count("guardian", math_data).index.values, y = get_percentage_count("guardian", math_data).values, ax = ax[0,2], color = "mediumblue", alpha = 0.5)
sns.barplot(x = get_percentage_count("guardian", port_data).index.values, y = get_percentage_count("guardian", port_data).values, ax = ax[0,2], color = "red", alpha = 0.4)
ax[0,2].set_title("Guardian")
sns.barplot(x = get_percentage_count("Pstatus", math_data).index.values, y = get_percentage_count("Pstatus", math_data).values, ax = ax[1,0], color = "mediumblue", alpha = 0.5)
sns.barplot(x = get_percentage_count("Pstatus", port_data).index.values, y = get_percentage_count("Pstatus", port_data).values, ax = ax[1,0], color = "red", alpha = 0.4)
ax[1,0].set_title("Are parents living together? (A- Apart, T-Together)")
sns.barplot(x = get_percentage_count("Medu", math_data).index.values, y = get_percentage_count("Medu", math_data).values, ax = ax[1,1], color = "mediumblue", alpha = 0.5)
sns.barplot(x = get_percentage_count("Medu", port_data).index.values, y = get_percentage_count("Medu", port_data).values, ax = ax[1,1], color = "red", alpha = 0.4)
ax[1,1].set_title("Mothers Education (0-none, 4-high)")
sns.barplot(x = get_percentage_count("Fedu", math_data).index.values, y = get_percentage_count("Fedu", math_data).values, ax = ax[1,2], color = "mediumblue", alpha = 0.5)
sns.barplot(x = get_percentage_count("Fedu", port_data).index.values, y = get_percentage_count("Fedu", port_data).values, ax = ax[1,2], color = "red", alpha = 0.4)
ax[1,2].set_title("Fathers Education (0-none, 4-high)")
sns.barplot(x = get_percentage_count("famrel", math_data).index.values, y = get_percentage_count("famrel", math_data).values, ax = ax[2,0], color = "mediumblue", alpha = 0.5)
sns.barplot(x = get_percentage_count("famrel", port_data).index.values, y = get_percentage_count("famrel", port_data).values, ax = ax[2,0], color = "red", alpha = 0.4)
ax[2,0].set_title("Quality of family relations")
sns.barplot(x = get_percentage_count("internet", math_data).index.values, y = get_percentage_count("internet", math_data).values, ax = ax[2,1], color = "mediumblue", alpha = 0.5)
sns.barplot(x = get_percentage_count("internet", port_data).index.values, y = get_percentage_count("internet", port_data).values, ax = ax[2,1], color = "red", alpha = 0.4)
ax[2,1].set_title("Internet access")
sns.barplot(x = get_percentage_count("famsup", math_data).index.values, y = get_percentage_count("famsup", math_data).values, ax = ax[2,2], color = "mediumblue", alpha = 0.5)
sns.barplot(x = get_percentage_count("famsup", port_data).index.values, y = get_percentage_count("famsup", port_data).values, ax = ax[2,2], color = "red", alpha = 0.4)
ax[2,2].set_title("Educational support in family")
fig, ax = plt.subplots(3,3, figsize = (15,15))
sns.barplot(x = get_percentage_count("studytime", math_data).index.values, y = get_percentage_count("studytime", math_data).values, ax = ax[0,0], color = "aquamarine", alpha = 0.5)
sns.barplot(x = get_percentage_count("studytime", port_data).index.values, y = get_percentage_count("studytime", port_data).values, ax = ax[0,0], color = "deeppink", alpha = 0.4)
ax[0,0].set_title("Weekly study-time (1: <2, 2: 2-5, 3: 5-10, 4: >10)")
sns.barplot(x = get_percentage_count("paid", math_data).index.values, y = get_percentage_count("paid", math_data).values, ax = ax[0,1], color = "aquamarine", alpha = 0.5)
sns.barplot(x = get_percentage_count("paid", port_data).index.values, y = get_percentage_count("paid", port_data).values, ax = ax[0,1], color = "deeppink", alpha = 0.4)
ax[0,1].set_title("Do they take extra classes in their course?")
sns.barplot(x = get_percentage_count("activities", math_data).index.values, y = get_percentage_count("activities", math_data).values, ax = ax[0,2], color = "aquamarine", alpha = 0.5)
sns.barplot(x = get_percentage_count("activities", port_data).index.values, y = get_percentage_count("activities", port_data).values, ax = ax[0,2], color = "deeppink", alpha = 0.4)
ax[0,2].set_title("Do they join extracurricular activites?")
sns.barplot(x = get_percentage_count("romantic", math_data).index.values, y = get_percentage_count("romantic", math_data).values, ax = ax[1,0], color = "aquamarine", alpha = 0.5)
sns.barplot(x = get_percentage_count("romantic", port_data).index.values, y = get_percentage_count("romantic", port_data).values, ax = ax[1,0], color = "deeppink", alpha = 0.4)
ax[1,0].set_title("Are they in a romantic relationship?")
sns.barplot(x = get_percentage_count("freetime", math_data).index.values, y = get_percentage_count("freetime", math_data).values, ax = ax[1,1], color = "aquamarine", alpha = 0.5)
sns.barplot(x = get_percentage_count("freetime", port_data).index.values, y = get_percentage_count("freetime", port_data).values, ax = ax[1,1], color = "deeppink", alpha = 0.4)
ax[1,1].set_title("Freetime (1- low, 5- high)")
sns.barplot(x = get_percentage_count("goout", math_data).index.values, y = get_percentage_count("goout", math_data).values, ax = ax[1,2], color = "aquamarine", alpha = 0.5)
sns.barplot(x = get_percentage_count("goout", port_data).index.values, y = get_percentage_count("goout", port_data).values, ax = ax[1,2], color = "deeppink", alpha = 0.4)
ax[1,2].set_title("Going out with friends (1-low, 5-high)")
sns.barplot(x = get_percentage_count("Dalc", math_data).index.values, y = get_percentage_count("Dalc", math_data).values, ax = ax[2,0], color = "aquamarine", alpha = 0.5)
sns.barplot(x = get_percentage_count("Dalc", port_data).index.values, y = get_percentage_count("Dalc", port_data).values, ax = ax[2,0], color = "deeppink", alpha = 0.4)
ax[2,0].set_title("Alcohol consumption on weekdays")
sns.barplot(x = get_percentage_count("Walc", math_data).index.values, y = get_percentage_count("Walc", math_data).values, ax = ax[2,1], color = "aquamarine", alpha = 0.5)
sns.barplot(x = get_percentage_count("Walc", port_data).index.values, y = get_percentage_count("Walc", port_data).values, ax = ax[2,1], color = "deeppink", alpha = 0.4)
ax[2,1].set_title("Alcohol consumption on weekdends")
fig, ax = plt.subplots(2,3, figsize = (15,10))
sns.barplot(x = get_percentage_count("school", math_data).index.values, y = get_percentage_count("school", math_data).values, ax = ax[0,0], color = "lightseagreen", alpha = 0.5)
sns.barplot(x = get_percentage_count("school", port_data).index.values, y = get_percentage_count("school", port_data).values, ax = ax[0,0], color = "orangered", alpha = 0.4)
ax[0,0].set_title("Which school do they go to?")
sns.barplot(x = get_percentage_count("reason", math_data).index.values, y = get_percentage_count("reason", math_data).values, ax = ax[0,1], color = "lightseagreen", alpha = 0.5)
sns.barplot(x = get_percentage_count("reason", port_data).index.values, y = get_percentage_count("reason", port_data).values, ax = ax[0,1], color = "orangered", alpha = 0.4)
ax[0,1].set_title("Why did they choose their school?")
sns.barplot(x = get_percentage_count("nursery", math_data).index.values, y = get_percentage_count("nursery", math_data).values, ax = ax[0,2], color = "lightseagreen", alpha = 0.5)
sns.barplot(x = get_percentage_count("nursery", port_data).index.values, y = get_percentage_count("nursery", port_data).values, ax = ax[0,2], color = "orangered", alpha = 0.4)
ax[0,2].set_title("Did they went to Kindergarden?")
sns.barplot(x = get_percentage_count("higher", math_data).index.values, y = get_percentage_count("higher", math_data).values, ax = ax[1,0], color = "lightseagreen", alpha = 0.5)
sns.barplot(x = get_percentage_count("higher", port_data).index.values, y = get_percentage_count("higher", port_data).values, ax = ax[1,0], color = "orangered", alpha = 0.4)
ax[1,0].set_title("Do they want to take higher education?")
sns.barplot(x = get_percentage_count("health", math_data).index.values, y = get_percentage_count("health", math_data).values, ax = ax[1,1], color = "lightseagreen", alpha = 0.5)
sns.barplot(x = get_percentage_count("health", port_data).index.values, y = get_percentage_count("health", port_data).values, ax = ax[1,1], color = "orangered", alpha = 0.4)
ax[1,1].set_title("Health (1- bad, 5- good)")
sns.distplot(math_data.absences, color = "lightseagreen", ax = ax[1,2])
sns.distplot(port_data.absences, color = "orangered", ax = ax[1,2])
ax[1,2].set_xlim(0,40)

print("Max. number of absent days of Math-students:", max(math_data.absences))
print("Max. number of absent days of Portugese-students:", max(port_data.absences))
fig, ax = plt.subplots(3,1, figsize = (20,15))
sns.distplot(math_data.G1, kde = True, ax = ax[0], color = "Blue", bins = 20)
sns.distplot(port_data.G1, kde = True, ax = ax[0], color = "r", bins = 20)
sns.distplot(math_data.G2, kde = True, ax = ax[1], color = "Blue", bins = 20)
sns.distplot(port_data.G2, kde = True, ax = ax[1], color = "r", bins = 20)
sns.distplot(math_data.G3, kde = True, ax = ax[2], color = "Blue", bins = 20)
sns.distplot(port_data.G3, kde = True, ax = ax[2], color = "r", bins = 20)
ax[0].set_xlim(0,20)
ax[1].set_xlim(0,20)
ax[2].set_xlim(0,20)
ax[0].set_ylim(0,0.22)
ax[1].set_ylim(0,0.22)
ax[2].set_ylim(0,0.22)
ax[0].set_title("First Period Grades")
ax[1].set_title("Second Period Grades")
ax[2].set_title("Final Grades")
fig.suptitle('Blue: Math, Red: Portugese', fontsize = 20)
fig, ax = plt.subplots(5,6, figsize = (20,20))
sns.barplot(x = math_data.school, y = math_data.G3, ax = ax[0,0])
sns.barplot(x = math_data.sex, y = math_data.G3, ax = ax[0,1])
sns.barplot(x = math_data.age, y = math_data.G3, ax = ax[0,2])
sns.barplot(x = math_data.address, y = math_data.G3, ax = ax[0,3])
sns.barplot(x = math_data.famsize, y = math_data.G3, ax = ax[0,4])
sns.barplot(x = math_data.Pstatus, y = math_data.G3, ax = ax[0,5])
sns.barplot(x = math_data.Medu, y = math_data.G3, ax = ax[1,0])
sns.barplot(x = math_data.Fedu, y = math_data.G3, ax = ax[1,1])
sns.barplot(x = math_data.Mjob, y = math_data.G3, ax = ax[1,2])
sns.barplot(x = math_data.Fjob, y = math_data.G3, ax = ax[1,3])
sns.barplot(x = math_data.reason, y = math_data.G3, ax = ax[1,4])
sns.barplot(x = math_data.guardian, y = math_data.G3, ax = ax[1,5])
sns.barplot(x = math_data.traveltime, y = math_data.G3, ax = ax[2,0])
sns.barplot(x = math_data.studytime, y = math_data.G3, ax = ax[2,1])
sns.barplot(x = math_data.failures, y = math_data.G3, ax = ax[2,2])
sns.barplot(x = math_data.schoolsup, y = math_data.G3, ax = ax[2,3])
sns.barplot(x = math_data.famsup, y = math_data.G3, ax = ax[2,4])
sns.barplot(x = math_data.paid, y = math_data.G3, ax = ax[2,5])
sns.barplot(x = math_data.activities, y = math_data.G3, ax = ax[3,0])
sns.barplot(x = math_data.nursery, y = math_data.G3, ax = ax[3,1])
sns.barplot(x = math_data.higher, y = math_data.G3, ax = ax[3,2])
sns.barplot(x = math_data.internet, y = math_data.G3, ax = ax[3,3])
sns.barplot(x = math_data.romantic, y = math_data.G3, ax = ax[3,4])
sns.barplot(x = math_data.famrel, y = math_data.G3, ax = ax[3,5])
sns.barplot(x = math_data.freetime, y = math_data.G3, ax = ax[4,0])
sns.barplot(x = math_data.goout, y = math_data.G3, ax = ax[4,1])
sns.barplot(x = math_data.Dalc, y = math_data.G3, ax = ax[4,2])
sns.barplot(x = math_data.Walc, y = math_data.G3, ax = ax[4,3])
sns.barplot(x = math_data.health, y = math_data.G3, ax = ax[4,4])
sns.barplot(x = math_data.absences, y = math_data.G3, ax = ax[4,5])
math_data[math_data.Medu == 0].count()
math_data.isnull().sum().sum()
port_data.isnull().sum().sum()
math_data["Dalc"] = math_data.Dalc.astype("object")
math_data["age"] = math_data.age.astype("object") 
math_data["Medu"] = math_data.Medu.astype("object") 
math_data["Fedu"] = math_data.Fedu.astype("object") 
math_data["traveltime"] = math_data.traveltime.astype("object")
math_data["studytime"] = math_data.studytime.astype("object") 
math_data["failures"] = math_data.failures.astype("object") 
math_data["famrel"] = math_data.famrel.astype("object") 
math_data["freetime"] = math_data.freetime.astype("object") 
math_data["goout"] = math_data.goout.astype("object") 
math_data["Walc"] = math_data.Walc.astype("object") 
math_data["health"] = math_data.health.astype("object")
pd.get_dummies(math_data) 

math_data = pd.get_dummies(math_data) 
math_data.head()
pd.get_dummies(port_data) 

port_data = pd.get_dummies(port_data) 
port_data.head()
def get_cvscores(data, model):
    y = data["G3"].values
    X = data.drop(["G1", "G2", "G3"], axis=1).values
    cv = KFold(n_splits=3, shuffle=True, random_state=0)
    scores = []
    for train_index, test_index in cv.split(X):
        X_train, X_test = X[train_index], X[test_index]
        y_train, y_test = y[train_index], y[test_index]
        model.fit(X_train, y_train)
        scores.append(model.score(X_test, y_test))
    return scores, model
model = DecisionTreeClassifier(random_state = 0) 
get_cvscores(math_data, model) 
model = DecisionTreeClassifier(random_state = 0) 
get_cvscores(port_data, model)
parameters = {'max_depth':[1, 20], 'min_samples_leaf':[1, 20], "min_weight_fraction_leaf": [0, 0.5], "min_samples_split": [2, 20], "max_features": [1, 20]} 

model = DecisionTreeClassifier()
clf = GridSearchCV(model, parameters, cv=5)

scores, model = get_cvscores(math_data, model) 
print(scores) 

y = math_data["G3"].values
X = math_data.drop(["G1", "G2", "G3"], axis=1).values 

clf.fit(X,y)
best_params = clf.best_params_
print(best_params)

means = clf.cv_results_['mean_test_score']
stds = clf.cv_results_['std_test_score'] 
model = DecisionTreeClassifier(max_depth = 20, max_features = 20, min_samples_leaf= 20, min_samples_split = 20, min_weight_fraction_leaf = 0, random_state = 0) 
scores, model = get_cvscores(math_data, model)
from sklearn import tree 
import graphviz
dot_data = tree.export_graphviz(model, out_file=None) 
graph = graphviz.Source(dot_data) 
graph.render("students") 