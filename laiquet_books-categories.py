import pandas as pd

import numpy as np

import matplotlib.pyplot as plt

import seaborn as sns

import pylab as pl

from sklearn.preprocessing import LabelEncoder

from sklearn.ensemble import RandomForestClassifier

from sklearn import metrics

from sklearn.metrics import mean_absolute_error

from sklearn.metrics import classification_report, confusion_matrix

from sklearn.model_selection import train_test_split

import warnings
#Disabling warnings

warnings.simplefilter("ignore")
#Reading data

data = pd.read_csv("../input/books.csv", error_bad_lines = False)
#Columns

data.columns
#Shape of data

data.shape
#Checking dataTypes

data.dtypes
#Description of data

data.describe()
#Dropping irrelevant columns to my analysis & adding index column

data = data.drop(columns=['language_code', 'bookID'])

data['index'] = data.index
#Peeking at data

data.head(10)
#ISBNs of duplicate records in the data (Titles, Authors or in other languages with similar ratings)

filteredISBNs=['439827604', '517226952', '1400052920', '739322206', '517149257', '345538374', '618517650', '618346244', '618260587', '618153977', '61159174', '60749911', '822205106', '385732546', '143035002', '451528611', '1593080271', '486437965', '1593081774', '141439637', '753453800', '1402714572', '1416500294', '517221144', '8423919005', '307281701', '330485385', '344245302X', '61122416', '142000671', '739326228', '99498189', '7229577', '1416524797', '849561877X', '307277674', '2266144340', '671027387', '552151769', '593055071', '9953299072', '1416524886', '1585424331', '1419349996', '671823493', '310264138', '141006870', '8466625127', '61245135', '8423335127', '828808392', '316646660', '7152590', '722538448', '006123205X', '553381679', '517542021', '553812165', '140449744', '140449086', '140446389', '879757779', '192824252', '140440348', '393959465', '140275363', '872203522', '374529051', '140447946', '451527372', '374525749', '60931957', '140449116', '451527364', '872203948', '195145666', '019513592X', '872203905', '374527059', '081221627X', '872206033', '195143736', '7149611', '393061310', '848306667X', '192802380', '486440915', '1593083246', '1402714580', '439101360', '517221160', '1904633277', '486406512', '141439602', '743487605', '1593081383', '1593080557', '1857151437', '079450390X', '517093391', '747584664', '1883011086', '1883011078', '073945529X', '684830493', '684718057', '684163268', '1419364621', '340682116', '9626343583', '143058096', '1593080182', '019274156X', '671463713', '141439971', '743487737', '143036386', '192833596', '60935464', '044508376X', '61205699', '773762167', '019283360X', '014042234X', '7179812', '6548598', '1565848268', '1419154079', '140433392', '140015068X', '439366771', '440841216', '452287022', '6513204', '4088732138', '141439823', '393964523', '760704023', '689844085', '1587263882', '486443221', '375757376', '393020398', '1594481776', '517189607', '451528832', '142437050', '465002609', '1893007162', '1420925431', '1860460585', '8401381630', '751506001', '99456761', '385662238', '470038322', '307263118', '385722222', '99267195', '142437239', '451528905', '037575699X', '743564413', '2221090276', '340425628', '807014265', '1417626283', '140297782', '739326740', '743275063', '1400079179', '739339788', '8495618605', '074757362X', '141007338', '316729701', '751535664', '078617627X', '143039431', '141185066', '1402530870', '142000655', '747263744', '058243470X', '553116088', '552135399', '61284386', '141008253', '60098910', '1572702567', '140620184', '140072144', '046501691X', '393926362', '1580495753', '184391008X', '141182431', '159224646X', '486451100', '1904919529', '141441216', '374528373', '140449248', '679729259', '486437914', '1596440791', '159308045X', '399226907', '1932416137', '451207521', '385663552', '435124099', '553134329', '1417735988', '606349154', '1888472405', '1580495796', '743536967', '965772411', '451150651', '451092317', '340770538', '451516753', '60535261', '60898526', '60850523', '586087990', '452264170', '1593080719', '140620850', '1416516999', '141187581', '486440966', '1551116448', '720608724', '9573321742', '9573318318', '142437182', '2253008486', '033035485X', '140620133', '192100289', '140620125', '440840406', '590975005', '439387868', '676977111', '571224121', '1415916292', '385504217', '140436588', '055312420X', '553103709', '451208633', '751529818', '586037012', '552995878', '739334190', '451526961', '198321503', '048627067X', '198320213', '014243714X', '670030201', '143039490', '394735307', '1857988132', '140449264', '037576030X', '140621806', '143058142', '393096335', '057120175X', '1402516274', '739455303', '586085602', '7204442', '553380648', '1844081818', '739458213', '99458268', '344275500X', '1400064368', '1594972079', '553101161', '142437344', '9626343664', '451530152', '1857152239', '140278761', '140264078', '739322060', '140283331', '1400047951', '1400052998', '486290301', '141439491', '192805347', '794503292', '1402726627', '1844560341', '7204493', '446313939', '445084316', '140620621', '142000086', '067978327X', '743265696', '1591127017', '689707495', '451528824', '009974421X', '330491199', '965193772', '014027409X', '345026241', '345316413X', '812035712', '9626343346', '763630640', '385602731', '8495618877', '2266082655', '393955680', '393927547', '192807293', '552995886', '553383809', '553273914', '452286360', '451171926', '394415760', '307279464', '771065264', '1400044618', '385503954', '99429799', '3518010875', '3499222507', '3442727952', '571191630', '055312997X', '713996870', '60218053', '8426414370', '5855150046', '8497592581', '8845246345', '1596009705', '1853260401', '074323359X', '1841155047', '857302710X', '684174693', '99910101', '140364498', '60845988', '940450852', '940450550', '393975428', '679886184', '8420469432', '156260263', '156260271', '2070536289', '3499156938', '66238501', '60765453', '684823780', '6280544', '20868103', '60652896', '936077093', '451143426', '965341984', '1400076218', '701134496', '452283868', '1400033438', '452263492', '99760010', '1400033446', '553139592', '940450615', '375753141', '3596132444', '2207254410', '2266106341', '2268043185', '2226074740', '552992097', '552120405', '671440276', '8472238660', '60935456', '822210894', '1416500405', '679783385', '393979539', '743487567', '1587263831', '074326469X', '2266104462', '940450488', '413372006', '965450279', '743536991', '1417618256', '739461192', '142437964', '1414243677', '8434580330', '014011890X', '1857151003', '345481267', '3446176934', '8497937554', '140247734', '679729526', '140449329', '872207315', '140440518', '192834401', '074348276X', '019832054X', '1903436591', '140620613', '312406916', '052161872X', '451526813', '198320566', '1932219250', '521532507', '812036042', '141014709', '743477553', '1932219269', '198320272', '743482743', '521535131', '1586638475', '140153179', '613572742', '446671002', '1594831955', '044651862X', '5890911856', '316155594', '671296116', '689852231', '4592175433', '4063633381', '4063633934', '4063633225', '4063634167', '4063634523', '4088732898', '4088735048', '4088728734', '4088732154', '4088733320', '4088731441', '4088728947', '4088731697', '4088732685', '4088732324', '4088728491', '4088730224', '4088734327', '4088734084', '4088731107', '4088733657', '141650964X', '553204300', '553229982', '4063405141', '1596590939', '241126274', '684854678', '965018881', '747573646', '747564132', '965018849', '8478889736', '073945210X', '6393837', '60750766', '739437828', '140285210', '399529012', '747266689', '2290303348', '8432216887', '140447644', '679642846', '393098214', '192839578', '553213482', '739452819', '9571343897', '812533550', '8585887907', '743428951', '330419706', '521825148', '1587263963', '60958022', '385601697', '307344835', '9500427877', '9500427885', '425198324', '9570823364', '563388129', '739409557', '9570823372', '7182368', '563536594', '618574948', '7144083', '7124015', '261102303', '965307794', '618037667', '1857232569', '345492862', '743209516', '1416523723', '895591324', '2253005673', '1854591177', '374525315', '195087445', '2070360024', '081912141X', '1895176409', '2246371929', '747266816', '8466307605', '140500522X', '143039822', '8478889930', '8498380138', '8478888845', '439064864', '159990067X', '8423338665', '224048376', '1573220825', '019280619X', '393924289', '749933631', '385495226', '877208131', '078873735X', '000716310X', '048644287X', '140447601', '226805360', '1556904258', '785113886', '1400052939', '043957773X', '439576881', '1582880824', '1593083327', '679600175', '739325353', '451528522', '812504674', '739429930', '441014100', '1568654308', '744586534', '743477367', '786180404', '1586638467', '593043162', '009917331X', '590453157', '603555098', '451523202', '1844082938', '1600962203', '039700804X', '814749763', '6499260', '393324761', '679723161', '743477111', '521618703', '1932219307', '764120859', '315009335X', '3895086908', '375760644', '143039997', '486424537', '140445501', '486432548', '521657296', '140447474', '773491678', '1557424292', '1420925288', '435123432', '1857989384', '1593080697', '8432217204', '8432296325', '140449108', '99451956', '1419309277', '1903436486', '198321465', '142003263', '141003006', '393964582', '141439475', '345339738', '043981071X', '785735488', '078870365X', '553123475', '1857027124', '393059952', '067972477X', '143039318', '141180315', '141932506X', '48231533', '330423304', '23895306', '674990811', '911589031', '140449124', '140621792', '451529170', '141804513', '1857150066', '9685270880', '743536959', '8484504794', '553213393', '451527402', '763632066', '723247706', '723249865', '723258732', '141026286', '804717117', '141439645', '393960587', '321427130', '375758119', '753818817', '439470145', '788746642', '786282827', '385064454', '285620649', '143038419', '99408392', '9575881044', '141004916', '739429027', '385313489', '2844541844', '60584750', '593047508', '553816160', '1593553943', '1860428789', '1567408346', '1590864093', '1593358725', '1593553994', '1593354746', '1593357389', '1593353154', '792734750', '60759259', '440416779', '843972005X', '2259834', '7179820', '965900584', '736697500', '785819118', '140276521', '8497599179', '4091252087', '4091252079', '4091256457', '4091256449', '4091256481', '4091252044', '4091256422', '4091256465', '4091255825', '4091255876', '4091255841', '4091252109', '409125201X', '409125649X', '4091256473', '409126512X', '000647022X', '517229250', '2253033138', '393978516', '60789565', '1932796789', '613046889', '2723433935', '2723433927', '2723433951', '2723433943', '140281916', '8501011207', '785814531', '606029818', '465026567', '140289208', '3423300175', '210005435X', '521618754', '64410935', '61127760', '071266131X', '141439769', '763608041', '679600124', '449300021', '375403175', '1566199158', '439250722', '590920685', '590646087', '185459768X', '439994799', '590135899', '439968089', '521348358', '312311451', '99436744', '1402714602', '743280547', '788734520', '140119507', '965020460', '553105574', '486420426', '141182865', '141311495', '553121545', '140057730', '435122215', '022406469X', '201321894X', '60248122', '747564175', '590988867', '1419339575', '743290348', '679783369', '1590302486', '553058592', '393057828', '1844132390', '743486226', '801868548', '452156610', '1416542264', '1585479004', '034073356X', '375431535', '1419188518', '038542339X', '1857151631', '681224770', '9650710744', '333904915', '521437202', '192838997', '140448039', '140443940', '875011063', '1903517281', '534375979', '380452782', '1423101456', '786282258', '618134247', '553290983', '2266111779', '553120441', '553225561', '330312561', '1568650191', '739422952', '345254848', '4091263992', '733605753', '786179953', '1599124467', '613998057', '590451790', '99478390', '140449140', '4835212053', '4882719614', '3442354994', '1931859256', '1599869950', '140209158', '717802418', '014303751X', '60520590', '451527887', '9810549415', '1416540261', '451528565', '019280149X', '140620478', '553150324', '141311355', '965604926', '9861146091', '9861146148', '9861156534', '9861146121', '9861156526', '986114613X', '9861146105', '9861146156', '330250493', '3548601316', '965322041', '99297701', '8425399831', '851703682', '679772553', '679410430', '393927873', '679413359', '192835025', '812968565', '1853268380', '965020592', '345023021', '521532485', '521297656', '1903436605', '521532477', '300101058', '1586638440', '1580495788', '521532531', '91906814', '067141299X', '1568821816', '1557508771', '99422174', '8501072877', '198321473', '745628478', '131935070', '4091263917', '5353014359', '503000361', '872207293', '679409963', '517681137', '044019069X', '2266034839', '451412125', '671521101', '1419542249', '1845760182', '743272099', '1597770760', '684860082', '300087012', '1580495761', '312257376', '074348777X', '345478231', '4757506201', '4757508557', '4757509669', '4757507917', '4757512309', '340752467', '043970166X', '141185228', '1400042062', '096501746X', '140434259', '159308336X', '1593080492', '689856741', '590254766', '60845244', '1853993239', '3492238696', '60086114', '553115022', '553132601', '553205862', '1573221112', '393978621', '375760105', '140620257', '205479804', '1402714599', '9703705774', '9685208557', '351801434X', '802133908', '99428385', '879516283', '312934432', '786886811', '439227550', '1551117223', '019423035X', '345457692', '99416271', '345301110', '373285337', '764555898', '862031435', '881038288', '1593080085', '1417647116', '883017482', '8575031805', '2070709043', '3551552096', '3895849618', '3570211029', '355155210X', '3570211010', '486424731', '143104829', '034547581X', '60506989', '074348486X', '1904271227', '1411401042', '61096849', '99483475', '788734415', '330419587', '535300308X', '751535389', '385175809', '345477014', '031235777X', '739309056', '1841580821', '140818030', '140274219', '812971345', '141439807', '019280264X', '755331478', '140620664', '140621083', '1582791805', '143039156', '141183101', '140274235', '151010684', '451131363', '60833165', '62511408', '950742895X', '140054715', '140152199', '1855495090', '987110619X', '330316478', '8420636517', '9706437398', '8437607299', '8439704615', '736694048', '8420480797', '1934169072', '1934169064', '141183047', '1860468004', '8435015521', '517092913', '8501022977', '671447203', '192839705', '689817851', '074347757X', '140714510', '198320353', '1932219315', '6863434', '354825621X', '3551354014', '439434866', '8478886559', '2070541304', '8440630115', '60590165', '7137338', '60005424','3.57','3.6','3.63','0']
#Searching for the duplicates ISBNs, making duplicates list and dropping the whole rows

duplicates=[]

for i in filteredISBNs:

    for j in data.index:

        if(data['isbn'][j]==i):

            duplicates.append(data['title'][j])

            data=data.drop(data['index'][j])

            break; 
#Displaying duplicates and inconsistent titled books

print("Total No.of Duplicates & Inconsistent titled Books:", len(duplicates), "\n")

for d in duplicates:

    print(d,"\n")
#Changing datatype of 'average_rating' to float & Calculating values for creating ratings categories

data['average_rating']=pd.to_numeric(data['average_rating'],errors='coerce')

avgVal = round(data['average_rating'].mean(), 2)

maxVal = round(data['average_rating'].max(), 2)

minVal = round(data['average_rating'].min(), 2)

print("Mean Value:", avgVal)

print("Max Value:", maxVal)

print("Min Value:", minVal)



lowrGrps = round((minVal+avgVal)/2, 2)

print("Below Average Rating - Cutoff:", lowrGrps)

higrGrps = round((avgVal+maxVal)/2, 2)

print("Above Average Rating - Cutoff:", higrGrps)



#Validating average_rating values and dropping cells with NaNs

print(data[pd.to_numeric(data['average_rating'], errors='coerce').isnull()])

data = data.dropna(subset = ['average_rating'])
#Adding new column - RatingCategory, it would tell us about the rated categories of the respective books

#First Category: Best Books - Ratings b/w Max and Above Average cutoff values

#Second Category: Good Books - Ratings b/w Above Average cutoff and mean values

#Third Category: Not-Bad Books - Ratings b/w mean and Below Average cutoff values

#Fourth Category: Lowest Rated Books - Ratings b/w Below Average cutoff and min values

conditions = [

    (data['average_rating'] <= maxVal) & (data['average_rating'] >=higrGrps),

    (data['average_rating'] < higrGrps) & (data['average_rating'] >=avgVal),

    (data['average_rating'] < avgVal) & (data['average_rating'] >=lowrGrps),

    (data['average_rating'] < lowrGrps) & (data['average_rating'] >=minVal)]

categories = ['Best Books', 'Good Books', 'Not-Bad Books', 'Lowest Rated Books']

data['RatingCategory'] = np.select(conditions, categories)

data.head(10)
#Displaying distribution of Books as per their rating category

sns.set(context='notebook', style='whitegrid')

pl.figure(figsize =(10,5))

sns.boxplot(x="index", y="RatingCategory", data=data, whis="range", palette="vlag")

#Add in points to show each observation

sns.swarmplot(x="index", y="RatingCategory", data=data, linewidth=0)

plt.title('Distribution of Books & Rating Categories', fontsize=15)
#Plotting bar plots of top 20 best books as per their total ratings

sns.set(context='notebook')

pl.figure(figsize =(15,10))

bb_top10 = data[data['RatingCategory']=='Best Books'].sort_values('ratings_count',ascending=False).head(20).set_index('title')

subplot = bb_top10['ratings_count'].sort_values().plot('barh')

pl.ylabel('Best Books', fontsize=13)

pl.xlabel('Total Ratings', fontsize=13)

pl.title('Top 20 Best Books & Total Ratings', fontsize=15)

for i in subplot.patches:

    subplot.text(i.get_width()+3, i.get_y()+.15, str(i.get_width()), fontsize=13)

plt.show()
#Plotting bar plots of top 20 good books as per their total ratings

pl.figure(figsize =(15,10))

bb_top10 = data[data['RatingCategory']=='Good Books'].sort_values('ratings_count',ascending=False).head(20).set_index('title')

subplot = bb_top10['ratings_count'].sort_values().plot('barh')

pl.ylabel('Good Books', fontsize=13)

pl.xlabel('Total Ratings', fontsize=13)

pl.title('Top 20 Good Books & Total Ratings', fontsize=15)

for i in subplot.patches:

    subplot.text(i.get_width()+3, i.get_y()+.15, str(i.get_width()), fontsize=13)

plt.show()
#Plotting bar plots of top 20 Not-Bad Books as per their total ratings

pl.figure(figsize =(15,10))

bb_top10 = data[data['RatingCategory']=='Not-Bad Books'].sort_values('ratings_count',ascending=False).head(20).set_index('title')

subplot = bb_top10['ratings_count'].sort_values().plot('barh')

pl.ylabel('Not-Bad Books', fontsize=13)

pl.xlabel('Total Ratings', fontsize=13)

pl.title('Top 20 Not-Bad Books & Total Ratings', fontsize=15)

for i in subplot.patches:

    subplot.text(i.get_width()+3, i.get_y()+.15, str(i.get_width()), fontsize=13)

plt.show()
#Data Transformations

encode = LabelEncoder()

encode.fit(['Best Books', 'Good Books', 'Not-Bad Books', 'Lowest Rated Books'])

data['RatingCategory'] = encode.transform(data['RatingCategory'])

data['# num_pages']=pd.to_numeric(data['# num_pages'])
#Dropping irrelevant columns to my analysis

data = data.drop(columns=['title','authors','index','isbn', 'isbn13'])
#Correlation matrix & Heatmap

pl.figure(figsize =(10,10))

corrmat = data.corr()

sns.heatmap(corrmat, annot=True, fmt='.4f', vmin=0, vmax=1, square=True);
#Pairplot of parameters

pl.figure(figsize =(10,10))

sns.pairplot(data, kind="reg")

plt.show()
#Labels and featureSet columns

columns = data.columns.tolist()

columns = [c for c in columns if c not in ['RatingCategory']]

target = 'RatingCategory'



X = data[columns]

y = data[target]
#Splitting data into training and testing sets

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=1)



print("Training FeatureSet:", X_train.shape)

print("Training Labels:", y_train.shape)

print("Testing FeatureSet:", X_test.shape)

print("Testing Labels:", y_test.shape)
#Using random forrest Model

#Initializing the model with some parameters.

model = RandomForestClassifier(n_estimators=100, min_samples_leaf=10, random_state=1)

#Fitting the model to the data.

model.fit(X_train, y_train)

#Generating predictions for the test set.

predictions = model.predict(X_test)

#Computing the Model Accuracy

print("Random Forrest Accuracy:",round((metrics.accuracy_score(y_test, predictions))*100,2))

#Computing the error.

print("Mean Absoulte Error:",round((mean_absolute_error(predictions, y_test))*100,2))

#Computing classification Report

print("Classification Report:\n", classification_report(y_test, predictions))

#Plotting confusion matrix

print("Confusion Matrix:")

df = pd.DataFrame(

    confusion_matrix(y_test, predictions),

    index = [['actual', 'actual','actual', 'actual'], ['0','1','2','3']],

    columns = [['predicted', 'predicted','predicted', 'predicted'], ['0', '1','2','3']])

print(df)