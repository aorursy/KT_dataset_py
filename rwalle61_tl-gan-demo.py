""" change working directory """

import os



os.chdir('/kaggle/input/tf-gan-code-20181007/transparent_latent_gan_kaggle_2018_1007/transparent_latent_gan_kaggle_2018_1007')

print('current working directory is {}'.format(os.getcwd()))

""" import packages """



import os

import glob

import sys

import numpy as np

import pickle

import tensorflow as tf

import PIL

import ipywidgets

import io

import itertools

from IPython.display import HTML, display



import src.tf_gan.generate_image as generate_image

import src.tf_gan.feature_axis as feature_axis

import src.tf_gan.feature_celeba_organize as feature_celeba_organize





""" load learnt feature axis directions """

path_feature_direction = './asset_results/pg_gan_celeba_feature_direction_40'



pathfile_feature_direction = glob.glob(os.path.join(path_feature_direction, 'feature_direction_*.pkl'))[-1]



with open(pathfile_feature_direction, 'rb') as f:

    feature_direction_name = pickle.load(f)



feature_direction = feature_direction_name['direction']

feature_names = feature_direction_name['name']

num_features = feature_direction.shape[1]



feature_names = feature_celeba_organize.feature_name_celeba_rename

feature_direction = feature_direction_name['direction']* feature_celeba_organize.feature_reverse[None, :]

""" ========== start tf session and load GAN model ========== """



# path to model code and weight

path_pg_gan_code = './src/model/pggan'

path_model = './asset_model/karras2018iclr-celebahq-1024x1024.pkl'

sys.path.append(path_pg_gan_code)





""" create tf session """

yn_CPU_only = False



if yn_CPU_only:

    config = tf.ConfigProto(device_count = {'GPU': 0}, allow_soft_placement=True)

else:

    config = tf.ConfigProto(allow_soft_placement=True)

    config.gpu_options.allow_growth = True



sess = tf.InteractiveSession(config=config)



try:

    with open(path_model, 'rb') as file:

        G, D, Gs = pickle.load(file)

except FileNotFoundError:

    print('before running the code, download pre-trained model to project_root/asset_model/')

    raise



len_z = Gs.input_shapes[0][1]

z_sample = np.random.randn(len_z)

x_sample = generate_image.gen_single_img(z_sample, Gs=Gs)



""" ========== ipywigets gui interface ========== """



height_px = 512

width_px = height_px*3/2

button_height = height_px/10

button_width = width_px/4



def img_to_bytes(x_sample):

    """ tool funcion to code image for using ipywidgets.widgets.Image plotting function """

    imgObj = PIL.Image.fromarray(x_sample)

    imgByteArr = io.BytesIO()

    imgObj.save(imgByteArr, format='PNG')

    imgBytes = imgByteArr.getvalue()

    return imgBytes



# a random sample of latent space noise

z_sample = np.random.randn(len_z)

# the generated image using this noise patter

x_sample = generate_image.gen_single_img(z=z_sample, Gs=Gs)



w_img = ipywidgets.widgets.Image(

    value=img_to_bytes(x_sample), 

    format='png', 

    width=height_px,

    height=height_px,

    layout=ipywidgets.Layout(height=f'{height_px}px', width=f'{width_px}px')

)

w_imgs = []



base_latents = {

    'lighter_female': [0.726223323343503, 1.661612088228405, -1.5518274645058903, 1.0364707538012505, -0.2933219885498964, -0.7426865214542139, 1.109547611047703, 0.6258914793523002, -1.505775678432803, 0.8756901775578089, -1.325918726840643, 0.669804901076221, 0.3915241120705964, 1.643683970028139, 3.004499174979858, 1.9986898348299256, -1.3193811828749067, 1.528640310690557, -0.930396282041723, -0.6826489109219814, -1.0345936858887008, 0.03488571278017921, -1.2403778112619104, -0.0017983984089693875, 0.9136390877040067, -1.1181059664180764, 0.13229206077925762, 0.1010432730336609, -1.6887527787284216, 0.8364589386814779, -0.046765765708589896, -0.2670153809606632, -0.7262923627385749, -1.1054756016967875, -1.536779506463381, 1.9567483654341356, 0.5348720969234985, 0.25797982107226286, 1.3569185700859594, 1.1581495570306415, 0.3929453060808751, -0.8021374277307664, -1.9570008480806607, 0.1252814854864659, -0.000496506458044044, -0.7350526622891121, -1.7475999098561774, -0.14404471741818864, 0.17466870026388115, -1.5265238354392645, -0.6814423861291844, -1.6166202674943, 0.32211923025218336, -0.0418423351262477, -0.5841132109365876, 2.0970679415760185, 0.2155240619132407, -0.8365195969507419, 1.064308424090327, -0.20552023984823825, -0.2722240372865016, 1.438084204520528, 0.2786688502925844, 0.24386076976844137, -2.1924547799769765, 0.19437905123078314, -0.1148661001946, 1.4050096476619274, 0.13076984501953867, -0.2209541174601824, -0.26799213251964077, 1.3964392994949395, -0.2172356167274282, -1.2015909608609396, 2.2052591920378672, 0.6790658124154189, 0.33157906610657234, 0.22774304799620662, -1.289725210371405, -0.7467526400495046, 0.017144645307676665, 1.85180767718368, -2.257661724075555, -0.9713485532092562, 0.6315221315064203, 0.35587156158780625, -0.6457015690305008, 1.2048217740719702, 0.21829001685692392, -0.3850888230759848, 0.305696181127264, -0.39214272548729534, 0.926877647844493, -0.7278554558701288, -0.13679765905633512, -0.8851659046923821, 0.31831262827389006, -0.3011354252856815, 0.3110976278259966, -0.1591856293844663, 1.3693862607472507, -0.056283256715083045, 0.8994943900570287, -0.06444109714043993, -0.6099306052037247, -0.37069614213293955, -1.0657277442545967, -0.41680388354253445, 0.5566916450898449, 1.6017874448508254, 0.026775242400756613, -0.31963683471720955, -1.7403086189632044, 1.3313562828614245, 0.844476881245101, 1.2073331601115587, -1.3431560786035184, -0.5688300554842892, -0.42880372280514145, -0.10838434743922347, 1.185004121407779, -1.5156010502958956, -1.044350137694538, 0.10708280856563382, 0.07907733635939102, 0.6536667807450425, -0.33697368428654245, -0.48019997764142625, 1.2033733049841495, -1.4023485292184594, 0.5992073422423855, 0.42688596445562066, 2.30268847602429, 1.6028844960526745, 0.16106886821010888, -0.34194325089691396, 0.010962129860754647, -0.10427342682039405, -1.0472695458031924, 0.3728632735893456, -1.309654769610919, -1.4099314061361539, -0.6944426855329197, 0.2959413008566683, -0.09376051979175726, 1.6513981960290278, -0.42485309222221784, 0.8966900889828432, -0.8224762877015308, -0.8321823605056721, -1.3297445690015897, 0.1702824807343811, 0.7646893111634513, -2.7157816574207008, -1.6473557459023802, 0.288091957045258, -0.460590890337556, -0.543738472466684, -0.11486677131311405, 0.20327637698408, -1.744387105062258, -0.834462755479446, -0.4292839648135587, 0.055526271754596956, -1.3834213546937535, -1.7436912412174888, -0.26602456965667837, 0.6962263978664884, -0.8376754828628402, 1.881822170315508, -0.31214673966168477, -0.9599091487659435, 1.466443931928945, 0.2638037894527548, 0.918139352416741, 0.6031068083220666, 2.0263460755927287, -0.8269514144188794, -1.34206686065652, -1.2994541517591458, 0.4304371626880722, -0.6244814312621766, -1.3000606052992196, -0.07647436799899741, 1.0125531357996682, -1.0673752411807607, -0.9546245244623779, -0.7241484959406647, 1.4405518442468408, -0.20347420932439564, 0.0397695394172311, 0.5560588271953643, 0.8366174868741315, 1.4867710321443979, -0.4207170699569013, -0.5586225920180085, -2.2278762935911747, -0.44081269130234924, -0.1973918043092032, -0.8440456057506057, 0.3051818181280766, 0.7103784964893209, 0.013133678079081603, -0.5139478509949634, 0.4044498188310283, -0.6822799746369891, 0.10647754996667318, 0.058935177245620515, 0.31482175725654626, 1.8006799695104174, 0.11415325142186022, 0.7378169663846251, -1.8676129505303172, 0.7094218389825253, -1.2014379499764252, 0.9583966234099687, -0.4905521543703387, -1.6547237094989817, -0.7673814212500703, -0.42063626957479877, -0.6291712104897904, -0.17248583424740563, 0.01979662062396881, -0.5439386876581683, -0.6695301230613551, -0.03900966382457642, 1.5235670554960599, 0.8597251838414672, 0.9788465470351546, -0.02422489467516358, 0.9017792481689437, 0.030776942099656483, -0.15382520290944746, 0.2616217323976613, -1.7376166157157393, 0.9015414411265663, 0.3815284426999789, -0.9758277395254416, 0.5881217850312919, 0.08843759500978575, -0.5324998658244268, -1.121759702632606, 0.408647086288183, -0.2641871799862745, -1.2639768327246117, 1.1753404607013285, 0.14581048449802606, -0.44343337653498116, -0.8017704696915253, 0.038772006111197466, 0.11065243635733701, 0.7655133150098009, -0.48098750011431607, -0.33586316713651276, -0.673947227649558, 1.0643146583907859, -0.24789502667587143, -0.025667502984157414, -1.1390883299515304, -1.102406536341501, 0.361020776003516, -1.0037114880281004, -1.914989771521054, 1.9438547967376452, 1.171987906728424, -1.1272516884732764, -1.0053008277342175, 0.9389623132860606, 0.22688248821241802, -0.06947667179646358, 0.8799830633123642, 0.9493614673539834, -1.253745604193385, 0.46205458079999107, 1.1130972745074756, -0.043571090101000465, 0.05884103477035234, -1.1530450497906757, 0.5704867280581296, -1.925805721917751, -1.7370201600500457, 0.9329910717745763, 1.4127083260013609, -0.3862884146355042, -0.8622089814970081, 1.4746984912562038, -2.17125684341469, -1.5878916716366476, 0.30146923063579567, 0.2459696102487449, 1.358417985206074, -3.3648108961086964, -0.9697319043322205, -0.31312463385481837, -0.7352055209865783, -0.4838683216610866, 0.9341370357755607, -0.7313977689953352, 0.20410393786427167, -1.170091470414025, 0.9748386673294982, -1.3938863952097982, -1.4374107240640996, -1.014106054995605, -1.4610438242436512, -1.118806295343599, -1.2794895483894209, -0.16389660117334037, -2.5797186658348896, 0.5721068869139279, 0.03604837018538346, 0.47410128487609104, -0.6423722923918601, 0.561299848963072, 0.03256398727417632, -1.4819023056255103, 0.20640683351696418, 0.28246963946110965, 1.0119286443132092, 0.5392425431566872, -1.7124656302629142, 1.0910472189434821, -0.8753329743771843, 0.29106262174906594, 0.009583641776803195, -0.02069990794537742, 1.1068096640741962, 1.7003003127216942, -1.6730695854812243, -0.9251811315895204, -0.8237022889437072, -0.38330365523244864, 0.6458442535359505, 1.0336371546628935, -0.0585312222071886, 0.8150402080443259, 0.41413180402764005, 1.4597185340548102, 0.7813000805419278, 0.13711931896224056, -0.8502030643854032, 0.44987536005520246, -0.15622124645709354, -1.229234369574562, 0.385907877715723, -0.9136924051521962, 0.49362722904441797, -0.6798471921038094, 0.6692017080920131, -0.4845468551441234, 1.4577906561141283, 0.5098789994860933, -0.8972009250419374, -0.12630230009128499, 0.30704255815821907, -1.0065923506817975, -0.3029484627139864, 0.7537911045510465, 1.5792116953196484, -0.8045148887902125, -1.0369136529236016, -0.14900151973216444, 0.2502759940038035, -0.43194001865294446, -0.527614236892694, -0.6134665346740654, 0.17882318414441375, -1.3009193115913311, -0.7176382372240875, -1.3380587611967885, 0.2273884803233152, -0.9340372587399477, -0.5472708341073663, -0.124750029955099, 1.105105472695695, 2.0506925575123676, 0.1490940221185557, 0.6234737130842865, -1.3274251995577333, -0.6312660378925654, -0.038338171208660635, 0.15028463765161576, 0.08673320078984616, -1.9622718584514796, -0.23954704916370023, 1.1193045467678027, 1.21218629138807, -0.8495983134875789, 0.08643656673449292, -0.40717537882847915, -0.54182437326631, -0.20292780746693767, -0.4981207063183252, -0.6594067497524823, -0.42946760893078534, -0.032752741793653846, 0.617743969279452, -0.1936472187613556, 0.4917659786463147, -1.3072775107869576, -0.16548589463025218, 0.965155534014898, -0.8309639211841222, 1.4975733405805653, 1.0699302823100072, 1.4808263136342992, -0.4541283795747922, -0.7870757553923277, -0.600240755780945, -1.022114810058168, -0.02662157943179721, 2.273344419102697, 0.011926158641668945, 0.012356203109848904, -0.24414386429917284, -1.7855940955462395, -1.5578443664534969, -0.020698050732927943, -0.6963341891770267, 0.34311359019559745, 0.5961288760549176, -0.3498782173136292, 0.16757284111647028, -2.1611302609101, 1.3382180401053865, -0.3775102010918591, 0.9254803976812647, 1.1649073844079183, 0.22079928984297148, -1.3043271161457806, -1.338710446284837, -0.9635624242534502, -2.546737933212483, 0.711799856109992, 1.8773100179970923, 1.0174223969677672, -0.2763501461380272, 0.8178421189854354, -0.05002281335432768, -1.064262630576012, 0.5241674555200022, -1.3883460637201468, -0.6967674331833618, 0.9789963186774315, 0.009545181619492613, 0.5694234216675551, 1.5398732335867114, 0.003705971514173833, 1.2891336351653937, -0.031011534876386967, 0.6081106472909681, 0.8648665804189262, 0.18205392367545148, -1.8466505296467721, -1.27795536601011, 0.8124568154568047, 0.27198750179216735, -0.5473626290094138, -0.5918755905912254, -1.3370791721660211, -0.5620849880360519, -1.931757884077783, -0.6593410669787262, 0.5366247939109247, -0.03878740735487422, -1.0956759401783023, -0.9088733204740095, 0.19637274239435587, 0.7951722890052727, -0.6841540368124124, -0.6864819385455386, -0.6357288905922148, 0.036716504472871496, -0.3613050531090555, 0.7212076242268853, 0.8280476350736519, -0.11546498362597253, -0.5133653870374034, -0.10224639106236191, -1.143902243370188, 0.4204939411878056, 0.08986488556822023, 1.6401202346964232, 1.0725124322699175, -1.093388337764703, -0.5914149996802882, 0.5552801317691132, -0.8578751631456811, 0.940438830497258, -0.3439171999529227, 0.7100759635323248, 0.792724834138928, -0.8315292967861748, 0.5266577498376164, 0.7482600474968967, -2.300597793946354, -0.07759405482157064, 0.4482078611287748, 0.23498068915061635, -0.91259892122855, 0.43813492516247426, 1.0667061704733578, -0.9600742844431503, 0.25935991961527494, -1.1433766935823344, 0.7085079698953372, 2.0176514390032376, -0.37060516227529344, 0.07468305428774338, 0.2683321804050227, 1.0638515161851398, -1.0566404144649508],

    'middle_female': [0.6486254317538155, 1.6324282021063456, -1.7521247639541129, 1.0124846458941028, -0.340687948524159, -0.6782964288779741, 1.1875688181767867, 0.7003024629430913, -1.6378550816575606, 0.7466093375595522, -1.3529199902784377, 0.6750438088612998, 0.3425517761464049, 1.4721554332411722, 3.1291917836431025, 2.071722775848648, -1.329790603591243, 1.5812412789150123, -0.8329146338408171, -0.47271964012143713, -1.0464039699282797, -0.0831429929237435, -1.2875689319682548, -0.06239693680643426, 0.9172528603923532, -0.9920989188217739, 0.06939479551049688, 0.20053044975549528, -1.6370228051516549, 0.8779146138598136, -0.032621891694737566, -0.2899491065788284, -0.6151759910742312, -1.0727606400083383, -1.574816769337313, 1.871500768598507, 0.5638688862386786, 0.30090760734179967, 1.3323076632219695, 1.1491913019237778, 0.33692658660911456, -0.9177880155166372, -1.9536288641130115, 0.0792352036654268, 0.0901973480190779, -0.7848212543945764, -1.768506412097198, -0.15199843985773503, 0.15651386571142076, -1.5378427308547844, -0.7866556983819976, -1.6835382916086605, 0.3509258576889208, -0.024665368100001403, -0.7690342784852005, 2.1673300351024127, 0.3302543076295641, -0.6591258323670552, 1.135540507747177, -0.19126086629294925, -0.3624541237849917, 1.2867510554781267, 0.18656884932718734, 0.22166683216459357, -2.310796722432515, 0.2253423710889432, -0.05863191143292508, 1.3333831979134714, 0.09490782524914629, -0.09472033273883432, -0.42110431107421564, 1.4000387823229776, -0.19013210519903687, -1.1407865692987165, 2.2534183017561853, 0.6581519884097349, 0.34844173343182727, 0.10831214159695235, -1.2305047374506168, -0.7740144801136085, 0.12152173556702152, 1.7964177367058, -2.240368703745188, -0.9262484455187954, 0.42826333590536764, 0.3062171495339517, -0.5662205144086324, 1.3791231196246538, 0.09629516064852037, -0.3587351638198096, 0.2636332188167882, -0.3468173189400255, 1.0459664154222266, -0.7635162659557551, -0.17475335093075495, -0.9070784252884637, 0.3162614409495404, -0.3747824889776037, 0.1668701582074733, -0.138463771153932, 1.4158901593694304, -0.010529464978957383, 0.7877865913327013, 0.10867526615781185, -0.5409456044061416, -0.4368659480216549, -1.2508618231732291, -0.5782490505375311, 0.5507859256941289, 1.608082107375896, 0.017667749513188308, -0.40054911106394253, -1.7390907883642621, 1.1768685533048124, 0.7852587841576748, 1.0932699304523228, -1.2675394463195504, -0.515707759573004, -0.4868726281203569, -0.21891413262468773, 1.1206201443056456, -1.5036835654824297, -0.9496564108816683, 0.15988600697054484, 0.12410771995554291, 0.6341545047699798, -0.32887973526132774, -0.4426958398113346, 1.1933230635111458, -1.4780315073224497, 0.7032843916526978, 0.4337045461398097, 2.3870852245757503, 1.4996366949804207, 0.23545192808028467, -0.19765708093184403, 0.05845846079347451, -0.15526556948466902, -1.1741876337768447, 0.2852544795299292, -1.2504716491080488, -1.2944822452804916, -0.5931632998096327, 0.1817913457234574, -0.10891787973273746, 1.8024835826717742, -0.16911110168881538, 0.8982051428491535, -0.7507618855081668, -0.6498073823056488, -1.3605543549642753, 0.21938299669418676, 0.6257832906114693, -2.537722260932149, -1.59299179631716, 0.29108107220312956, -0.4804746962429282, -0.6824140181584559, -0.015878467741115163, 0.09668263378289223, -1.7367706240681648, -0.9390347138348564, -0.5517593133974013, 0.07190996934955732, -1.426853536671331, -1.624529231736596, -0.17575626698136146, 0.6686245036451537, -0.8394935883766304, 1.9214934337044232, -0.20393872971432175, -1.0312183628689433, 1.38038448899606, -0.008820502547778386, 0.8990445290091965, 0.6086946300736524, 2.0836859239826313, -0.933003778274069, -1.217820129835229, -1.2252179148833082, 0.4474614184266117, -0.5989352410926835, -1.1879206988818025, 0.003240863670244981, 0.998148020925958, -0.9841543414739348, -1.018307523422745, -0.7850175593335131, 1.46729130620894, -0.05031695518024834, -0.030157855829481744, 0.5714523603076576, 0.799212442655802, 1.4658629362127389, -0.3953548416496162, -0.5298092539056354, -2.1264049590106677, -0.4411357182643195, -0.1881806650569041, -0.9240021289107163, 0.19976278431338487, 0.856654747575678, -0.014179737904078562, -0.4789624078440717, 0.3733678814681002, -0.6989900362211529, 0.04929758962387558, 0.06007191626978109, 0.2778212649086524, 1.803632630963427, 0.0067393015430620845, 0.7768807783827087, -1.8545578088290076, 0.6769105877940408, -1.145790396604207, 0.8696543936545014, -0.4911314505088595, -1.6519148337108123, -0.7511185142303752, -0.47611395928718736, -0.6420818456054551, -0.17926685257876215, 0.11238753617228442, -0.5647485346655127, -0.7375055423696751, 0.011168216487939836, 1.5130550522361792, 0.9911644577654322, 0.9360560901574045, 0.02502744496826608, 1.0622874957604265, 0.04653084064840807, -0.2765129369917351, 0.2325098659963751, -1.7491393023214366, 0.8716013871517324, 0.36985156240196065, -1.050574851034085, 0.5911043470379257, 0.10468328754279493, -0.5143929233007494, -1.019663004808853, 0.389113508939014, -0.14384706761422514, -1.109991163024939, 1.2522926464580737, 0.16548593607732, -0.4269817275814296, -0.8288287664045684, 0.08229583600933416, 0.2064181875454012, 0.76386390066711, -0.5409037652980516, -0.2988439304162064, -0.7305770512763524, 1.1796893830927115, -0.2988247665044655, -0.19409579865806859, -1.1103215218841413, -1.093031568325704, 0.3573170398535674, -1.0310545988961746, -2.05540448810692, 2.037152720819711, 1.1909417445352237, -1.1920212693928087, -1.1020192646330977, 0.7857893626980542, 0.11841757476385854, -0.23529066156184442, 0.8209354294389466, 0.981053433698746, -1.198939519855394, 0.4289266251397908, 1.1404008176959213, -0.1280288123995917, 0.09340201530541402, -1.2015552502942768, 0.5107217201939035, -1.9711685485025772, -1.6669306876196865, 0.798063615681337, 1.4318889812646616, -0.4326676403085855, -0.6998410238614499, 1.449328001687664, -2.2325047574098136, -1.5909140634194752, 0.20826705660726247, 0.11640397139265221, 1.2680537447966036, -3.2863342162228344, -0.8794375578030922, -0.38386506939025156, -0.8420592263041023, -0.5777661083241448, 1.0386377072382955, -0.6653545111504786, 0.3068517073592727, -1.2601738508561664, 0.9875875677094175, -1.562080403098112, -1.3680876341612684, -1.1732899011307165, -1.4665692697091663, -0.8858913165311303, -1.1932802924174475, -0.22000168239536536, -2.6458161435741236, 0.5907603214878541, 0.1702212395833902, 0.4116801723177004, -0.6127780175792734, 0.479686842379518, -0.048060677158428974, -1.4762425018654557, 0.15086464826288554, 0.28263322325579854, 1.0276536979729471, 0.44300598017333337, -1.5875139974357944, 1.0729462983265272, -0.8828209491077926, 0.27419313368920906, 0.0995872355929056, 0.011411889909744587, 1.009029322094607, 1.5894126265027202, -1.5767223843999758, -0.9785397190548426, -0.6266410580438079, -0.4227898512758299, 0.5307429068357509, 1.115057068718719, -0.13807872957493306, 0.7451205573084965, 0.38100223651763665, 1.3999761948681522, 0.7118967369655134, 0.1792746135155422, -0.847532428219836, 0.6416741605990306, -0.07564291866356504, -1.1940691649153699, 0.4204040630924993, -0.9732013500027527, 0.5919846957585887, -0.6647920371376984, 0.6958734260508924, -0.4162293807347438, 1.609009717610101, 0.4556483900743586, -1.0119264169249274, -0.1492876602296646, 0.34852208005757124, -1.0240074011160805, -0.32316036615375154, 0.9115942456775011, 1.6712272873419534, -0.8515592548631016, -1.0201361112416238, -0.10903858277276239, 0.3394492264183145, -0.4725283833227921, -0.5259479298273593, -0.5234569744333932, 0.3059034821136095, -1.2052165491095732, -0.6685483050888037, -1.4879502108907765, 0.22471954240176914, -1.0672761582246408, -0.6537062226879868, 0.034038372545552906, 1.128287811652499, 2.178614734073339, -0.037022184308785594, 0.7967159264730675, -1.248969547087457, -0.5167275080383942, -0.020534680319463476, 0.24929965688464353, 0.004705436684325159, -1.9407744035575778, -0.0200050898126998, 1.097160113013713, 1.2295178293177258, -0.7575799071675853, 0.11122371655661001, -0.3868065525515969, -0.5563971735969733, -0.09326050869751287, -0.5176975140117404, -0.6034668905770998, -0.6047394256036759, -0.21189016383918527, 0.48283742545456954, -0.2839731328429129, 0.40937576103653694, -1.3125561757485293, -0.19890940222437126, 0.9635474050065292, -0.6403008899716933, 1.5311843870308912, 1.0338409329579, 1.3713953022822352, -0.3663680775542687, -0.7776948407937785, -0.6400186746813371, -0.9812765501396505, -0.057873704039290944, 2.1399279565829596, 0.04709525235151538, 0.03555640024767374, -0.31411949640219583, -1.9593265036752736, -1.601108362720987, -0.09475228870923658, -0.7572127925172257, 0.24946242762255944, 0.639115268362925, -0.3537140085832191, 0.09588835691054239, -2.3162293279178696, 1.4480454965441178, -0.3677256950194997, 0.9566611197040329, 1.213889673310931, 0.1526436181859693, -1.1826329253206356, -1.3962868358247609, -0.9240211115341063, -2.4906728968879044, 0.6156000241927246, 2.0645093891560804, 0.8680456295353616, -0.22322572528653256, 0.730817344920773, -0.02902543898985756, -1.1626803354497317, 0.6964828326815445, -1.5479408524483131, -0.711225126029172, 0.9742205399989452, -0.05124571163704997, 0.5738590045678406, 1.6406303023158066, -0.002679844795864523, 1.4382521024936663, -0.031123834067352932, 0.8195611894874089, 0.7844111942007255, 0.15936500629497669, -1.9381319982917065, -1.4344989618529842, 0.7817233340302546, 0.1698745697570317, -0.5097553499648774, -0.5469948222799071, -1.3860754585307344, -0.7007460075977019, -2.043251194341315, -0.7568169459266858, 0.5863724860836884, -0.21024194513130262, -1.1117705793112114, -0.8699833828854039, 0.3186320563599153, 0.8023403224947343, -0.7038709921912523, -0.6143435474214795, -0.5251298722701623, -0.03715380896013765, -0.39884561634130783, 0.660330973827053, 0.9793931170663155, -0.0432287296100142, -0.38517892055003494, -0.18500624335379495, -1.1980451717566336, 0.2684781930276965, 0.30440729464810956, 1.5864123248240871, 1.0925130361422872, -1.107546080095089, -0.573755422749637, 0.5758735376788027, -0.9030460447352766, 0.7084408013546947, -0.4332146030729364, 0.6120832493644566, 0.775182480932974, -0.8700350807018657, 0.7053173915477442, 0.7799582677409247, -2.3232406975553874, -0.015443560743251955, 0.4619639115097045, 0.21949808060005954, -0.999288890610028, 0.4944807249805095, 1.0957947812433249, -0.9069718379703641, 0.2907832174117707, -1.2902531717966772, 0.5716479144214116, 1.9680502016267643, -0.4726199710826915, -0.08085084242719992, 0.11674235908771016, 1.019413198616723, -1.245997184188694],

}

latents_of_0s_face = base_latents['middle_female']

unrelated_features = ['Male', 'Age', 'Skin_Tone']

out_dirpath = '/kaggle/working'  # has to be this to see output in UI (e.g. https://www.kaggle.com/rwalle61/tl-gan-demo/output)

step_size = 5



def get_feature_step_size(feature_name, mod_sequence):

    if (feature_name == 'Eyeglasses') and (('Male', 1) in mod_sequence):

        return 3

    if (feature_name == 'Skin_Tone'):

        return 7  # set with caution. This tool seems to struggle with darker faces (probably due to the dataset being of Western celebrities). So, depends how light `latents_of_0s_face` is. 



    return step_size



def get_feature_index_from_name(feature_name):

    [index] = [i for i, name in enumerate(feature_names) if name == feature_name]

    return index



def save_latents_as_img(latents, img_name):

    dirpath = './created_imgs'

    x_sample = generate_image.gen_single_img(z=latents, Gs=Gs)

    pil_img = PIL.Image.fromarray(x_sample)

    filename = f'{img_name}.png'

    filepath = f'{out_dirpath}/{filename}'

    pil_img.save(filepath)

#     print(f'Saved img to {filepath}')

#     display(create_download_link(filename))



    

def ensure_dir(dirpath):

    if not os.path.exists(dirpath):

        os.mkdir(dirpath)

#     print(f"{out_dirpath} does{'' if os.path.exists(out_dirpath) else ' NOT'} exist")

    

# def create_download_link(filename):  

#     html = '<a href={filename}>{title}</a>'

#     html = html.format(title=f'Download {filename}',filename=filename)

#     return HTML(html)





class GuiCallback(object):

    """ call back functions for button click behaviour """

    counter = 0

    def __init__(self):

        self.latents = np.copy(latents_of_0s_face)  # originally: `self.latents = z_sample`

        self.feature_direction = feature_direction

        self.feature_lock_status = np.zeros(num_features).astype('bool') # unlock all features

        self.feature_direction_disentangled = feature_axis.disentangle_feature_axis_by_idx(

            self.feature_direction,

            idx_base=np.flatnonzero(self.feature_lock_status)

        )

        self.lock_unrelated_features()

        

#     Print out to reuse as inputs in future        

    def print_latents(self): 

        print('self.latents', self.latents.tolist())



    def random_gen(self, event):

        self.latents = np.random.randn(len_z)

        self.update_img()



    def set_features_to_n(self, event, feature_names, n):

        self.latents = np.copy(latents_of_0s_face)

        for feature_name in feature_names:

            step_direction = n

            self.modify_feature(event, feature_name, step_size, step_direction)

        

    def generate_faces(self, event):

        ensure_dir(out_dirpath)

        

#         Available features: [

#            'Male', 'Skin_Tone', 'Age', 'Bangs', 'Hairline', 'Bald', 'Big_Nose', 'Pointy_Nose', 

#            'Makeup', 'Smiling', 'Mouth_Open', 'Wavy_Hair', 'Beard', 'Goatee', 'Sideburns', 'Blond_Hair', 

#            'Black_Hair', 'Gray_Hair', 'Eyeglasses', 'Earrings', 'Necktie'

#         ]

#         Useful features_to_modify (in order): ['Male', 'Skin_Tone', 'Age', 'Bangs', 'Wavy_Hair', 'Makeup', 'Eyeglasses']

#         Modification to all other features are not consistently isolated across genders, skin tones, age, etc.

        features_to_modify = ['Male', 'Skin_Tone', 'Age', 'Bangs', 'Wavy_Hair', 'Makeup', 'Eyeglasses']

#         features_to_modify = ['Male', 'Skin_Tone', 'Age', 'Eyeglasses', 'Wavy_Hair']

#         features_to_modify = ['Male', 'Skin_Tone', 'Eyeglasses', 'Mouth_Open']

#         features_to_modify = ['Male', 'Eyeglasses']

#         features_to_modify = ['Skin_Tone']

        self.set_features_to_n(event, features_to_modify, -0.5) # Set to -0.5 so that when we step up by 1, we get photos representing -0.5 and 0.5. (Remember, 1 represents the position on the spectrum; step_size represents the length)

        latents_of_minus1s_face = np.copy(self.latents)



        permutations = itertools.product([1,0], repeat=len(features_to_modify))

        modifications = [zip(features_to_modify, sequence) for sequence in permutations]  # Remember, zip objects disappear once used!

        

        print('len(modifications)', len(modifications))

#         print('modifications', list(modifications))

        for mod_sequence in modifications:

            self.latents = np.copy(latents_of_minus1s_face)

            mod_sequence = list(mod_sequence)

            print('mod_sequence', mod_sequence)



            img_name = ''

            for (feature_name, step_direction) in mod_sequence:                

                feature_step_size = get_feature_step_size(feature_name, mod_sequence)

#                 print('feature_step_size', feature_step_size)

                self.modify_feature(event, feature_name, feature_step_size, step_direction)

                img_name += str(step_direction)

            self.update_img()

            save_latents_as_img(self.latents, img_name)

        

    def modify_feature(self, event, feature_name, step_size, step_direction):

        feature_index = get_feature_index_from_name(feature_name)

        self.modify_along_feature(None, feature_index, step_size*step_direction)

    

    def modify_along_feature(self, event, feature_index, step_size):

        self.latents += self.feature_direction_disentangled[:, feature_index] * step_size



    def modify_along_feature_and_update_img(self, event, feature_index, step_size):

        self.modify_along_feature(event, feature_index, step_size)

        self.update_img()

#         self.print_latents()  # print out to reuse as inputs in future



    # @param {bool} set_to

    def set_single_feature_lock(self, event, feature_index, set_to=None):

        if set_to is None: 

            # just toggle the lock

            self.feature_lock_status[feature_index] = np.logical_not(self.feature_lock_status[feature_index])

        else:

            self.feature_lock_status[feature_index] = set_to

            

        print(f"{feature_names[feature_index]}: {'locked' if self.feature_lock_status[feature_index] else 'unlocked'}")

        

        self.feature_direction_disentangled = feature_axis.disentangle_feature_axis_by_idx(

            self.feature_direction, 

            idx_base=np.flatnonzero(self.feature_lock_status)

        )

    

    def set_unrelated_features_lock(self, event, set_to=None):

        feature_indexes = [i for i, name in enumerate(feature_names) if name in unrelated_features]

        for index in feature_indexes:

            self.set_single_feature_lock(event, index, set_to)

            

    def lock_unrelated_features(self):

        self.set_unrelated_features_lock(None, set_to=True)

            

    def update_img(self):

        x_sample = generate_image.gen_single_img(z=self.latents, Gs=Gs)

        x_byte = img_to_bytes(x_sample)

        w_img.value = x_byte



        w_imgs.append(w_img)

        



guicallback = GuiCallback()



def create_button_group(feature_index, width=button_width, height=button_height):

    """ function to built button groups for one feature """   

    w_name_toggle = ipywidgets.widgets.ToggleButton(

        value=False, 

        description=f'{feature_names[feature_index]}',

        tooltip=f'Press down to lock this feature (feature_index: {feature_index})',

        layout=ipywidgets.Layout(height='{:.0f}px'.format(height/2), 

                                 width='{:.0f}px'.format(width*4/7),

                                 margin='2px 2px 2px 2px')

    )



    w_neg = ipywidgets.widgets.Button(description=f'-{step_size}',

                                      layout=ipywidgets.Layout(height='{:.0f}px'.format(height/2), 

                                                               width='{:.0f}px'.format(width/2),

                                                               margin='1px 1px 5px 1px'))

    w_pos = ipywidgets.widgets.Button(description=f'{step_size}',

                                      layout=ipywidgets.Layout(height='{:.0f}px'.format(height/2), 

                                                               width='{:.0f}px'.format(width/2),

                                                               margin='1px 1px 5px 1px'))

    

    w_name_toggle.observe(lambda event: 

        guicallback.set_single_feature_lock(event, feature_index)

    )

    w_neg.on_click(lambda event: 

        guicallback.modify_along_feature_and_update_img(event, feature_index, -step_size)

    )

    w_pos.on_click(lambda event: 

        guicallback.modify_along_feature_and_update_img(event, feature_index, step_size)

    )

            

    button_group = ipywidgets.VBox(

        [

            w_name_toggle,

            ipywidgets.Box([w_neg, w_pos])

        ],

        layout=ipywidgets.Layout(border='1px solid gray')

    )

    

    return button_group

  



button_groups = [create_button_group(i) for i in range(num_features)]



yn_button_select = True

def arrange_button_groups(button_groups, yn_button_select=True, ncol=4):

    num_groups = len(button_groups)

    if yn_button_select:

        feature_celeba_layout = feature_celeba_organize.feature_celeba_layout

        layout_all_buttons = ipywidgets.VBox([ipywidgets.Box([button_groups[item] for item in row]) for row in feature_celeba_layout])

    else:

        layout_all_buttons = ipywidgets.VBox([ipywidgets.Box(button_groups[i*ncol:(i+1)*ncol]) for i in range(num//ncol+int(num%ncol>0))])

    return layout_all_buttons

    



guicallback.update_img()

w_button_random = ipywidgets.widgets.Button(

    description='Random face',

    button_style='success',

    layout=ipywidgets.Layout(

        height=f'{button_height}px',

        width=f'{button_width}px',

        margin='1px 1px 5px 1px'

    )

)

# w_toggle_unrelated_features = ipywidgets.widgets.ToggleButton(

#     value=False, 

#     description=f'Lock unrelated features',

#     tooltip=f'Toggle lock of unrelated features: {unrelated_features}',

#     layout=ipywidgets.Layout(

#         height=f'{button_height}px',

#         width=f'{button_width}px',

#         margin='1px 1px 5px 1px'

#     )

# )

w_button_generate_faces = ipywidgets.widgets.Button(

    description='Generate faces',

    tooltip=f'Generate faces',

    layout=ipywidgets.Layout(

        height=f'{button_height}px',

        width=f'{button_width}px',

        margin='1px 1px 5px 1px'

    )

)



w_button_random.on_click(guicallback.random_gen)

w_button_generate_faces.on_click(guicallback.generate_faces)

# w_toggle_unrelated_features.observe(lambda event: 

#               guicallback.set_unrelated_features_lock(event))



w_box = ipywidgets.Box(

    [

        ipywidgets.GridBox(w_imgs),

#         w_img,

        ipywidgets.VBox([

            ipywidgets.Box([w_button_random, w_button_generate_faces]),

#             w_button_random,

            arrange_button_groups(button_groups, yn_button_select=True)

        ])

    ], 

    layout=ipywidgets.Layout(height=f'{height_px}px', width=f'{width_px}px')

)



print('INSTRUCTION: press +/- to adjust feature, toggle feature name to lock the feature')

display(w_box)



guicallback.generate_faces(None)



#################################################################################

# To export images, make sure you create a non-image file (e.g. .zip) in /kaggle/working,

# then the Kaggle UI will provide an option to download files in /kaggle/working



from zipfile import ZipFile

import os



os.chdir(out_dirpath)

print('current working directory is {}'.format(os.getcwd()))



# filepaths = ['1111.png', '0000.png']



zip_file = ZipFile('images.zip', 'w')

# with zip_file:

#     for file in filepaths:

#         zip_file.write(file)

#         print(f'Zipped {file}')

#################################################################################