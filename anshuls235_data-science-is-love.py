#List the Input Directory

import os

for dirname, _, filenames in os.walk('/kaggle/input'):

    for filename in filenames:

        print(os.path.join(dirname, filename))
#Libraries to be imported

import pandas as pd

import numpy as np

import matplotlib as mpl

import matplotlib.pyplot as plt

mpl.style.use(['fivethirtyeight'])

import seaborn as sns
df_schema = pd.read_csv('/kaggle/input/kaggle-survey-2019/survey_schema.csv')

df_schema.head()  
ques_nos = np.arange(1,35,1) #An array representing the question numbers

cols = list(map(str, ['Q' + str(ques_no) for ques_no in ques_nos])) #To get the question wise counts

df_schema = df_schema[cols].iloc[0:2,:] #Just select the number of respondants

df_schema = df_schema.transpose()

df_schema[1] = df_schema[1].astype(int)

df_schema.reset_index(inplace=True)

df_schema.rename(columns={'index':'Question_no', 0:'Question_txt', 1:'no_of_respondants'}, inplace=True)

df_schema.head()
plt.figure(figsize=(35,22))

ax = sns.barplot(x='Question_txt', y='no_of_respondants', data=df_schema)

ax.set_title('Number of Respondants per Question', fontsize=30)

ax.set_xlabel('Questions', fontsize=20)

ax.set_ylabel('No. of Respondants', fontsize=20)

ax.set_xticklabels(ax.get_xticklabels(), rotation=40, ha="right")

for p in ax.patches:

    width, height = p.get_width(), p.get_height()

    x, y = p.get_xy() 

    ax.annotate('{}'.format(int(height)), (x - 0.05, y + height + 100))

plt.tight_layout()

plt.show()
df = pd.read_csv('/kaggle/input/kaggle-survey-2019/multiple_choice_responses.csv', low_memory=False)

df.head()
#Distribution of Time

times = df.iloc[1:,0].reset_index(drop=True)

times = times.astype(int)

plt.figure(figsize=(20,4))

ax = sns.boxplot(x=times)

ax.set_title('Distribution of Time taken to complete the survey', fontsize=20)

plt.show()
print('Average time taken to complete the survey: {} seconds'.format(np.mean(times)))

print('Median time taken to complete the survey: {} seconds'.format(np.median(times)))
#Removing the outliers

Q1 = np.percentile(times, 25) #25th percentile

Q3 = np.percentile(times, 75) #75th percentile

IQR = Q3 - Q1 #Inter-quartile range

times = times[times < (Q3 + 1.5*IQR)]

plt.figure(figsize=(20,4))

ax = sns.boxplot(x=times)

ax.set_title('Distribution of Time taken to complete the survey (After removing outliers)', fontsize=20)

plt.show()
#Removing the question

df = df.iloc[1:,:].reset_index(drop=True)

df.head()
#Just select the age, gender and country

pd.set_option('mode.chained_assignment', None)

df1 = df.iloc[:,[1,2,4]]

df1.rename(columns={'Q1':'age_group', 'Q2':'gender', 'Q3':'country'}, inplace=True)

df1.head()
plt.figure(figsize=(20,12))

ax = sns.countplot(y='age_group', hue='gender', data=df1)

ax.set_title('Age Group wrt Gender', fontsize=30)

ax.set_ylabel('Age Group', fontsize=20)

ax.set_xlabel('Count', fontsize=20)

ax.set_yticklabels(ax.get_yticklabels(), fontsize=20)

for p in ax.patches:

    width, height = p.get_width(), p.get_height()

    x, y = p.get_xy() 

    ax.annotate('{}'.format(width), (x + width + 5 , y + 0.15), fontsize=14)

plt.legend(loc=1, prop={'size': 16})

plt.tight_layout()

plt.show()
plt.figure(figsize=(20,8))

ax = df1['country'].value_counts()[:20].plot(kind='barh')

ax.set_title('No. of Respondants per Country(Top 20)', fontsize=30)

ax.set_xlabel('No. of Respondants', fontsize=20)

ax.set_yticklabels(ax.get_yticklabels(), fontsize=20)

#For annotations

for p in ax.patches:

    width, height = p.get_width(), p.get_height()

    x, y = p.get_xy() 

    ax.annotate('{}'.format(width), (x + width + 10 , y), fontsize=14)

plt.show()
def draw_pie_chart(df, figsize, explode_list, colors_list, title, subplots=False):

    """This Function can be used to draw a customizable pie chart for a dataframe. """

    df.plot(kind='pie', 

            subplots=subplots,

            figsize=figsize,

            autopct='%1.1f%%',

            startangle=90,

            shadow=True,

            labels=None,         # turn off labels on pie chart

            pctdistance=1.15,    # the ratio between the center of each pie slice and the start of the text generated by autopct

            colors=colors_list,  # add custom colors

            explode=explode_list # 'explode' lowest 4 degrees

           )

    # scale the title up by 15% to match pctdistance

    plt.title(title, y=1.15) 

    plt.axis('equal') 

    # add legend

    plt.legend(labels=df.index, loc='lower right',fontsize=8)

    plt.yticks([])#To turn-off the y-axis label

    plt.show()
explode_list = [0, 0, 0, 0.1, 0.2, 0.3, 0.4] # ratio for each continent with which to offset each wedge.

colors_list = ['#ff9999','#66b3ff','#99ff99','#ffcc99', '#c2c2f0','#ffb3e6', '#c2c2cc']
draw_pie_chart(df['Q4'].value_counts(), (20,6), explode_list, colors_list, 'Distribution of Highest level of Formal Education')

draw_pie_chart(df[df['Q2']=='Female']['Q4'].value_counts(), (20,6), explode_list, colors_list, 'Distribution of Highest level of Formal Education(Females)')

draw_pie_chart(df[df['Q2']=='Male']['Q4'].value_counts(), (20,6), explode_list, colors_list, 'Distribution of Highest level of Formal Education(Males)')
draw_pie_chart(df[(df['Q2']=='Male') & (df['Q3']=='India')]['Q4'].value_counts(), (20,6), explode_list, colors_list, 'Distribution of Highest level of Formal Education(Indian Males)')

draw_pie_chart(df[(df['Q2']=='Female') & (df['Q3']=='India')]['Q4'].value_counts(), (20,6), explode_list, colors_list, 'Distribution of Highest level of Formal Education(Indian Females)')
df2 = df.loc[:,['Q1','Q2','Q4']]

df2.rename(columns={'Q1':'AgeGroup', 'Q2':'Gender', 'Q4':'Degree'}, inplace=True)

df2 = df2[(df2['Gender']=='Male') | (df2['Gender']=='Female')]

ax = sns.FacetGrid(df2, col ='Gender', hue = 'Degree', height = 6, aspect=1)

ax.map(sns.countplot,'AgeGroup', order=df2.AgeGroup.unique()).add_legend()

ax.set_xticklabels(fontsize=8)

plt.show()
df_salary = df.loc[:,['Q5','Q6','Q10']]

df_salary.rename(columns={'Q5':'Job', 'Q6':'No_of_employees', 'Q10':'Salary'}, inplace=True)

df_salary.dropna(how='all', axis=0, inplace=True) #Remove the rows containing all the null values

df_salary.head()
explode_list = [0, 0, 0, 0, 0, 0, 0, 0, 0.1, 0.2, 0.3, 0.4] # ratio for each continent with which to offset each wedge.

colors_list = ['#ff9999','#66b3ff','#39ff99','#ffcc99', '#c2c2f0','#ffb3e6', '#c2c8cc', '#9ff999', '#ffcccc', '#7713ff', '#8883ff', '#1cb3e6']

draw_pie_chart(df_salary['Job'].value_counts(), (20,6), explode_list, colors_list, 'Distribution of Jobs of the respondants')
#Incresing order of salaries

order = ['$0-999','1,000-1,999','2,000-2,999','3,000-3,999','4,000-4,999','5,000-7,499','7,500-9,999','10,000-14,999','15,000-19,999','20,000-24,999','25,000-29,999','30,000-39,999','40,000-49,999','50,000-59,999','60,000-69,999','70,000-79,999','80,000-89,999','90,000-99,999','100,000-124,999','125,000-149,999','150,000-199,999','200,000-249,999','250,000-299,999','> $500,000']



def draw_countplot(df, figsize, job):

    plt.figure(figsize=figsize)

    ax = sns.countplot(x='Salary', data=df, order=order)

    ax.set_title(job + ' Salary distribution', fontsize=20)

    ax.set_xticklabels(ax.get_xticklabels(), rotation=40, ha="right")

    ax.set_yticks(np.arange(0,401,50))

    for p in ax.patches:

        width, height = p.get_width(), p.get_height()

        x, y = p.get_xy() 

        ax.annotate('{}'.format(int(height)), (x + 0.1, y + height + 2), fontsize=15)

    plt.tight_layout()

    plt.show()
jobs = ['Data Scientist', 'Data Analyst', 'Business Analyst', 'Software Engineer']

for job in jobs:

    draw_countplot(df_salary[df_salary['Job'] == job], (20,4), job)
employee_order = ['0-49 employees', '50-249 employees', '250-999 employees', '1000-9,999 employees', '> 10,000 employees']

g = sns.FacetGrid(df_salary, col ='No_of_employees', hue = 'Salary', col_wrap = 3,col_order = employee_order, hue_order = order, height = 5, aspect=1)

g.map(sns.countplot,'Job', order=df_salary.Job.unique()).add_legend()

plt.subplots_adjust(top=0.9)

g.fig.suptitle('Distribution of Salary & Job with respect to number of employees', fontsize=14) 

for ax in g.axes.flat:

    for label in ax.get_xticklabels():

        label.set_rotation(40)

        label.set_ha('right')

        label.set_fontsize(8)

plt.show()
def get_all_answers(df, column, filter_dict, columns):

    """Get all the answer counts by sending in the question number and also filter values based upon the dictionary"""

    if filter_dict:

        for clm, val in filter_dict.items():

            df = df[df[clm]==val]

    d = {}

    cols = [col for col in df.columns if column + '_Part' in col]

    for col in cols:

        d[' '.join(map(str, df[col].value_counts().index.tolist()))] = df[col].value_counts()[0]

    df_ans = pd.DataFrame(list(d.items()), columns=columns)

    df_ans.set_index(df_ans.columns[0], inplace=True)

    return df_ans
explode_list = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.4, 0] # ratio for each reporter of Data Science

colors_list = ['#ff9999','#66b3ff','#39ff99','#ffcc99', '#c2c2f0','#ffb3e6', '#c2c8cc', '#9ff999', '#ffcccc', '#7713ff', '#8883ff', '#1cb3e6']

columns = ['Media Sources reporting on Data Science', 'Counts']
df_rep = get_all_answers(df, 'Q12', {}, columns=columns)

draw_pie_chart(df_rep, (20,5), explode_list, colors_list, 'Data Science Reporters', subplots=True)
df_rep = get_all_answers(df, 'Q12', {'Q3':'India'}, columns=columns)

draw_pie_chart(df_rep, (20,5), explode_list, colors_list, 'Data Science Reporters(India)', subplots=True)
df_rep = get_all_answers(df, 'Q12', {'Q5':'Data Scientist'}, columns=columns)

draw_pie_chart(df_rep, (20,5), explode_list, colors_list, 'Data Science Reporters(Data Scientist)', subplots=True)