# This Python 3 environment comes with many helpful analytics libraries installed

# It is defined by the kaggle/python docker image: https://github.com/kaggle/docker-python

# For example, here's several helpful packages to load in 



import numpy as np # linear algebra

import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)

import matplotlib.pyplot as plt



# Input data files are available in the "../input/" directory.

# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory



import os

for dirname, _, filenames in os.walk('/kaggle/input'):

    for filename in filenames:

        print(os.path.join(dirname, filename))



# Any results you write to the current directory are saved as output.
ov_tier1_phone = [0.9790665751544269, 1.1029512697323267, 1.0039464653397392, 1.151509951956074, 1.2872340425531914, 1.0427247769389156, 1.1902882635552505, 1.3208647906657516, 1.0427247769389156, 1.238675360329444, 1.4162663006177076, 1.3050789293067948, 1.318805765271105, 1.3443719972546329, 1.2258064516129032, 1.3294440631434454, 1.3625600549073438, 1.3128002745367193, 1.2815717227179135, 1.2815717227179135, 1.2815717227179135, 1.2532601235415237, 1.1240562800274536, 1.1290322580645162, 1.1240562800274536, 1.1290322580645162, 1.1340082361015786, 1.1290322580645162, 1.1340082361015786, 1.138984214138641][1:30]

ov_tier1_car = [0.55044612216884, 0.700754975978037, 0.851063829787234, 1.001372683596431, 1.126458476321208, 1.276767330130405, 1.427076183939602, 1.3556966369251888, 1.5060054907343858, 1.6463623884694578, 1.178448867536033, 1.3738846945778997, 1.3965339739190117, 1.436684969114619, 1.5905971173644475, 1.659917638984214, 1.398592999313658, 1.3172614962251201, 1.2860329444063143, 1.2843170899107756, 1.2843170899107756, 1.2510295126973232, 1.127659574468085, 1.127659574468085, 1.127659574468085, 1.127659574468085, 1.127659574468085, 1.127659574468085, 1.127659574468085, 1.127659574468085][1:30]

ov_tier2_phone = [0.568805765271105, 0.6865133836650652, 0.5746396705559369, 0.6969800960878517, 0.809025394646534, 0.6973232669869595, 0.820178448867536, 0.9317089910775567, 0.8200068634179821, 0.9420041180507893, 1.0454701441317775, 1.0144131777625258, 0.9535003431708992, 0.9044269045984901, 0.8790322580645161, 0.9272477693891558, 0.9692862045298559, 0.9320521619766644, 0.9008236101578586, 0.9008236101578586, 0.9008236101578586, 0.9044269045984901, 0.9094028826355525, 0.914378860672615, 0.9094028826355525, 0.914378860672615, 0.9193548387096774, 0.914378860672615, 0.9193548387096774, 0.9243308167467399][1:30]

ov_tier2_car = [0.2868544600938967, 0.3502347417840376, 0.4136150234741784, 0.47699530516431926, 0.4915492957746479, 0.5549295774647888, 0.6183098591549295, 0.6112676056338028, 0.6746478873239437, 0.7258215962441315, 0.6342723004694836, 0.6103286384976526, 0.6356807511737089, 0.6629107981220658, 0.680281690140845, 0.6338028169014085, 0.6154929577464788, 0.6178403755868545, 0.6187793427230047, 0.6154929577464788, 0.6154929577464788, 0.6154929577464788, 0.6154929577464788, 0.6154929577464788, 0.6154929577464788, 0.6154929577464788, 0.6154929577464788, 0.6154929577464788, 0.6154929577464788, 0.6154929577464788][1:30]

ov_tier3_phone =[0.41678105696636925, 0.5343170899107755, 0.46019217570350035, 0.5823610157858614, 0.6942347288949897, 0.5823610157858614, 0.7045298558682224, 0.8164035689773507, 0.7045298558682224, 0.8268702814001373, 0.924159231297186, 0.8934454358270418, 0.8263555250514756, 0.8270418668496912, 0.7886067261496225, 0.8184625943719973, 0.8706245710363761, 0.8337336993822924, 0.8025051475634866, 0.8025051475634866, 0.8025051475634866, 0.8074811256005491, 0.8124571036376115, 0.817433081674674, 0.8124571036376115, 0.817433081674674, 0.8224090597117364, 0.817433081674674, 0.8224090597117364, 0.8273850377487989][1:30]

ov_tier3_car = [0.22465314834578443, 0.26520811099252933, 0.3057630736392743, 0.3463180362860192, 0.36019210245464245, 0.4007470651013874, 0.4413020277481323, 0.4434364994663821, 0.483991462113127, 0.5183208822483102, 0.4352543578797581, 0.4631803628601921, 0.4759871931696905, 0.4887940234791889, 0.5010672358591248, 0.4724297403059409, 0.4688722874421914, 0.43881181074350767, 0.4391675560298826, 0.43792244752757026, 0.43792244752757026, 0.43792244752757026, 0.43792244752757026, 0.43792244752757026, 0.43792244752757026, 0.43792244752757026, 0.43792244752757026, 0.43792244752757026, 0.43792244752757026, 0.43792244752757026][1:30]

ppv_tier1_mall = [33887040, 34399692, 34912332, 35424984, 35937624, 36450276, 36962916, 37475568, 37988220, 38500860, 39013512, 39526152, 40038804, 40551444, 41064096, 41576748, 42089388, 42602040, 43114680, 43627332, 44139972, 44652624, 45165264, 45677916, 46190568, 46703208, 47215860, 47728500, 48241152, 48753792, 49266444][:29]

ppv_tier2_mall = [36086904, 37572408, 39057924, 40543428, 42028932, 43514448, 44999952, 46485456, 47970960, 49456476, 50941980, 52427484, 53912988, 55398504, 56884008, 58369512, 59855028, 61340532, 62826036, 64311540, 65797056, 67282560, 68768064, 70253568, 71739084, 73224588, 74710092, 76195596, 77681112, 79166616, 80652120][:29]

ppv_tier3_mall = [33572460, 34271532, 34970592, 35669652, 36368712, 37067784, 37766844, 38465904, 39164964, 39864036, 40563096, 41262156, 41961216, 42660288, 43359348, 44058408, 44757468, 45456540, 46155600, 46854660, 47553720, 48252792, 48951852, 49650912, 50349972, 51049044, 51748104, 52447164, 53146224, 53845296, 54544356][:29]

ppv_tier1_airport = [26390136, 14712492, 24949668, 27110376, 29271072, 16633116, 27830604, 29991300, 32151996, 18553728, 30711528, 32872236, 35032932, 20474352, 33592464, 35753160, 37913856, 22394976, 36473388, 38634096, 40794792, 24315588, 39354324, 41515020, 43675716, 26236212, 42235248, 44395956, 46556652, 28156836, 45116184][:29]

ppv_tier2_airport = [8403420, 4376004, 7790280, 8709984, 9629688, 5193516, 9016560, 9936264, 10855968, 6011040, 10242828, 11162532, 12082236, 6828552, 11469096, 12388812, 13308516, 7646064, 12695376, 13615080, 14534784, 8463576, 13921644, 14841348, 15761064, 9281100, 15147924, 16067628, 16987332, 10098612, 16374192][:29]

ppv_tier3_airport = [11555844, 4891632, 10149708, 12258912, 14368104, 6766476, 12961968, 15071172, 17180364, 8641308, 15774228, 17883432, 19992624, 10516152, 18586488, 20695692, 22804884, 12390996, 21398748, 23507952, 25617144, 14265828, 24211008, 26320212, 28429404, 16140672, 27023268, 29132472, 31241664, 18015516, 29835528][:29]

ppv_tier1_university = [69338400, 69371640, 69404880, 69438120, 69471360, 69504600, 69537840, 69571080, 69604320, 69637560, 69670800, 69704040, 69737280, 69770520, 69803760, 69837000, 69870240, 69903480, 69936720, 69969960, 70003200, 70036440, 70069680, 70102920, 70136160, 70169400, 70202640, 70235880, 70269120, 70302360, 70335600][:29]

ppv_tier2_university = [25163196, 25174488, 25185768, 25197060, 25208340, 25219632, 25230912, 25242204, 25253496, 25264776, 25276068, 25287348, 25298640, 25309920, 25321212, 25332504, 25343784, 25355076, 25366356, 25377648, 25388928, 25400220, 25411500, 25422792, 25434084, 25445364, 25456656, 25467936, 25479228, 25490508, 25501800][:29]

def sigmoid(x, kd=10000, sc=30, bias=0):

    return sc/(1+np.exp(-x/kd))+bias



def sigmoid2(x, kd=5*1e14, sc=100, bias=0):

    return sc/(1+np.exp(-x/kd))+bias





utotal = 10000

coef = 100

t1cm = np.floor(utotal*sigmoid((coef*(np.array(ov_tier1_car)) * sigmoid2(np.array(ppv_tier1_mall)))))

#t1cm = utotal*sigmoid(coef*(np.array(ov_tier1_car)) * sigmoid2(np.array(ppv_tier1_mall)))

t2cm = np.floor(utotal*sigmoid((coef*(np.array(ov_tier2_car)) * sigmoid2(np.array(ppv_tier2_mall)))))

t3cm = np.floor(utotal*sigmoid((coef*(np.array(ov_tier3_car)) * sigmoid2(np.array(ppv_tier3_mall)))))

cm = (t1cm+t2cm+t3cm)

t1pm = np.floor(utotal*sigmoid((coef*(np.array(ov_tier1_phone)) * sigmoid2(np.array(ppv_tier1_mall)))))

t2pm = np.floor(utotal*sigmoid((coef*(np.array(ov_tier2_phone)) * sigmoid2(np.array(ppv_tier2_mall)))))

t3pm = np.floor(utotal*sigmoid((coef*(np.array(ov_tier3_phone)) * sigmoid2(np.array(ppv_tier3_mall)))))

pm = (t1pm+t2pm+t3pm)



t1ca = np.floor(utotal*sigmoid((coef*(np.array(ov_tier1_car)) * sigmoid2(np.array(ppv_tier1_airport)))))

#t1ca = utotal*sigmoid(coef*(np.array(ov_tier1_car)) * sigmoid2(np.array(ppv_tier1_airport)))

t2ca = np.floor(utotal*sigmoid((coef*(np.array(ov_tier2_car)) * sigmoid2(np.array(ppv_tier2_airport)))))

t3ca = np.floor(utotal*sigmoid((coef*(np.array(ov_tier3_car)) * sigmoid2(np.array(ppv_tier3_airport)))))

ca = (t1ca+t2ca+t3ca)

t1pa = np.floor(utotal*sigmoid((coef*(np.array(ov_tier1_phone)) * sigmoid2(np.array(ppv_tier1_airport)))))

t2pa = np.floor(utotal*sigmoid((coef*(np.array(ov_tier2_phone)) * sigmoid2(np.array(ppv_tier2_airport)))))

t3pa = np.floor(utotal*sigmoid((coef*(np.array(ov_tier3_phone)) * sigmoid2(np.array(ppv_tier3_airport)))))

pa = (t1pa+t2pa+t3pa)



t1cu = np.floor(utotal*sigmoid((coef*(np.array(ov_tier1_car)) * sigmoid2(np.array(ppv_tier1_university)))))

t2cu = np.floor(utotal*sigmoid((coef*(np.array(ov_tier2_car)) * sigmoid2(np.array(ppv_tier2_university)))))

cu = (t1cu+t2cu)

t1pu = np.floor(utotal*sigmoid((coef*(np.array(ov_tier1_phone)) * sigmoid2(np.array(ppv_tier1_university)))))

t2pu = np.floor(utotal*sigmoid((coef*(np.array(ov_tier2_phone)) * sigmoid2(np.array(ppv_tier2_university)))))

pu = (t1pu+t2pu)

print("cm:");print(cm)

print("pm:");print(pm)

print("ca:");print(ca)

print("pa:");print(pa)

print("cu:");print(cu)

print("pu:");print(cu)

xs = [x for x in range(29)]

fig = plt.figure(figsize=(16,10))

ax = fig.add_subplot(231)

ax.plot(xs,cm, color='mediumseagreen')

ax = fig.add_subplot(232)

ax.plot(xs,pm)

ax = fig.add_subplot(233)

ax.plot(xs,ca, color='mediumseagreen')

ax = fig.add_subplot(234)

ax.plot(xs,pa)

ax = fig.add_subplot(235)

ax.plot(xs,cu, color='mediumseagreen')

ax = fig.add_subplot(236)

ax.plot(xs,pu)

plt.show()
print(t1cm)

print()

print(t2cm)

print()

print(t3cm)
print(t1pm)

print()

print(t2pm)

print()

print(t3pm)
print(t1ca)

print()

print(t2ca)

print()

print(t3ca)
print(t1pa)

print()

print(t2pa)

print()

print(t3pa)
print(t1cu)

print()

print(t2cu)
print(t1pu)

print()

print(t2pu)