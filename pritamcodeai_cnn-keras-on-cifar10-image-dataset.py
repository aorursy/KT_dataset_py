from __future__ import print_function

import keras

from keras.datasets import cifar10

from keras.preprocessing.image import ImageDataGenerator

from keras.models import Sequential

from keras.layers import Dense, Dropout, Activation, Flatten

from keras.layers import Conv2D, MaxPooling2D

import os
batch_size = 32

num_classes = 10

epochs = 200

data_augmentation = True

num_predictions = 20

save_dir = os.path.join(os.getcwd(), 'saved_models')

model_name = 'keras_cifar10_trained_model.h5'
# The data, split between train and test sets:

(x_train, y_train), (x_test, y_test) = cifar10.load_data()

print('x_train shape:', x_train.shape)

print(x_train.shape[0], 'train samples')

print(x_test.shape[0], 'test samples')
# Convert class vectors to binary class matrices.

y_train = keras.utils.to_categorical(y_train, num_classes)

y_test = keras.utils.to_categorical(y_test, num_classes)
model = Sequential()

model.add(Conv2D(32, (3, 3), padding='same', input_shape=x_train.shape[1:]))

model.add(Activation('relu'))

model.add(Conv2D(16, (2, 2)))

model.add(Activation('relu'))

model.add(MaxPooling2D(pool_size=(2, 2)))

model.add(Dropout(0.3))

model.add(Flatten())

model.add(Dense(1024))

model.add(Activation('relu'))

model.add(Dropout(0.6))

model.add(Dense(num_classes))

model.add(Activation('softmax'))
# initiate RMSprop optimizer

opt = keras.optimizers.rmsprop(lr=0.0001, decay=1e-6)



# Let's train the model using RMSprop

model.compile(loss='categorical_crossentropy',

              optimizer=opt,

              metrics=['accuracy'])



x_train = x_train.astype('float32')

x_test = x_test.astype('float32')

x_train /= 255

x_test /= 255
data_augmentation = False

if not data_augmentation:

    print('Not using data augmentation.')

    model.fit(x_train, y_train,

              batch_size=batch_size,

              epochs=epochs,

              validation_data=(x_test, y_test), verbose=2, 

              shuffle=True)

else:

    print('Using real-time data augmentation.')

    # This will do preprocessing and realtime data augmentation:

    datagen = ImageDataGenerator(

        featurewise_center=True,  # set input mean to 0 over the dataset

        samplewise_center=True,  # set each sample mean to 0

        featurewise_std_normalization=False,  # divide inputs by std of the dataset

        samplewise_std_normalization=True,  # divide each input by its std

        zca_whitening=True,  # apply ZCA whitening

        zca_epsilon=1e-08,  # epsilon for ZCA whitening

        rotation_range=82,  # randomly rotate images in the range (degrees, 0 to 180)

        # randomly shift images horizontally (fraction of total width)

        width_shift_range=0.1,

        # randomly shift images vertically (fraction of total height)

        height_shift_range=0.1,

        shear_range=0.3,  # set range for random shear

        zoom_range=0.6,  # set range for random zoom

        channel_shift_range=0.33,  # set range for random channel shifts

        # set mode for filling points outside the input boundaries

        fill_mode='nearest',

        cval=0.82,  # value used for fill_mode = "constant"

        horizontal_flip=True,  # randomly flip images

        vertical_flip=True,  # randomly flip images

        # set rescaling factor (applied before any other transformation)

        rescale=1.0/255,

        # set function that will be applied on each input

        preprocessing_function=None,

        # image data format, either "channels_first" or "channels_last"

        data_format="channels_last"

        )



    # Compute quantities required for feature-wise normalization

    # (std, mean, and principal components if ZCA whitening is applied).

    datagen.fit(x_train)



    # Fit the model on the batches generated by datagen.flow().

    model.fit_generator(datagen.flow(x_train, y_train,batch_size=batch_size), 

                        steps_per_epoch = len(datagen.flow(x_train, y_train,batch_size=batch_size)), 

                        epochs=epochs,

                        validation_data=(x_test, y_test), 

                        workers=4, verbose=2)
# Save model and weights

if not os.path.isdir(save_dir):

    os.makedirs(save_dir)

model_path = os.path.join(save_dir, model_name)

model.save(model_path)

print('Saved trained model at %s ' % model_path)
# Score trained model.

scores = model.evaluate(x_test, y_test, verbose=1)

print('Test loss:', scores[0])

print('Test accuracy:', scores[1])
!pip install wget==3.2     
import wget

url = "https://upload.wikimedia.org/wikipedia/commons/a/a3/June_odd-eyed-cat.jpg"

wget.download(url)
os.listdir()
from IPython.display import Image



from IPython.display import Image

Image(filename="June_odd-eyed-cat.jpg")
from keras.preprocessing.image import load_img

from keras.preprocessing.image import img_to_array

from keras.models import load_model
def image_processing(image_file_path):

	image1 = load_img(image_file_path, target_size=(32, 32))

	image1 = img_to_array(image1)

	image1 = image1.reshape(1, 32, 32, 3)

	image1 = image1.astype('float32')

	image1 = image1 / 255.0

	return image1
import pickle



# Load label names to use in prediction results



label_list_path = "datasets/cifar-10-batches-py/batches.meta"

keras_dir = os.path.expanduser(os.path.join("~", ".keras"))

datadir_base = os.path.expanduser(keras_dir)

if not os.access(datadir_base, os.W_OK):

    datadir_base = os.path.join("/tmp", ".keras")

label_list_path = os.path.join(datadir_base, label_list_path)

with open(label_list_path, mode="rb") as f:

    labels = pickle.load(f)
import numpy as np

def output_prediction():

	processed_image_loaded = image_processing('June_odd-eyed-cat.jpg')

	trained_model = load_model('saved_models/keras_cifar10_trained_model.h5')

	output_prediction_1 = labels["label_names"][np.argmax(trained_model.predict(processed_image_loaded))]

	print(output_prediction_1)
output_prediction()