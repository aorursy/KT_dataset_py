# This Python 3 environment comes with many helpful analytics libraries installed
# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python
# For example, here's several helpful packages to load

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)

# Input data files are available in the read-only "../input/" directory
# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory

import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

# You can write up to 5GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using "Save & Run All" 
# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session
print("Задание №1")
def summa_Q(n=1): # Создаем функцию с параметром n для подсчета сумммы квадрата чисел от 1 до n включительно
    """
    Эта функция (с одним параметром n) принимает целое неотрицательное число и
    подсчитывает сумму квадратов от 1 до этого числа включительно.
    По умолчанию параметр функции n равен 1.
    """
    counter = 0 # Переменная, в которую записывается сумма квадратов
    for i in range(n+1): # Цикл от 0 до n (не включительно)
        counter+= i**2 # Подсчет квадрата числа и его сложение к уже имеющейся сумме
    return counter # Возвращение результата работы функции
print(summa_Q.__doc__) # Вывод на экран справочной информации о функции. Справочная информация заключена в тройные кавычки
#help(summa_Q) Эта команда эквивалентна команде summa_Q.__doc__
print(summa_Q()) # Вызов функции без параметров (будет использован параметр по умолчанию)
print(summa_Q(3)) # Вызов функции с параметром 3
print(summa_Q(5)) # Вызов функции с параметром 5
print(summa_Q(10)) # Вызов функции с параметром 10
print("Задание №2")
def square(a=1,b=0,c=0):# Создаем функцию для вычисления корней квадратного уравнения
    """
    Функция принимает 3 параметра (a,b,c):
        а - коэффициент перед x**2 (по умолчанию а = 1)
        b - коэффициент перед x (по умолчанию b = 0)
        с - свободный член уравнения (по умолчанию c = 0)
    Функция вычисляет дискриминант квадратного уравнения и возвращает следующие значения:
        None - если дискриминант строго меньше нуля
        Root - единственное решение, именуемое корнем, квадратного уравнения, если дискриминант равен нулю
        [Root_1,Root_2] - оба корня квадратного уравнения, если дискриминант строго больше нуля
    
    """
    import math # Импортируем библиотеку math
    discriminant = b**2-4*a*c # Вычисляем дискриминант квадратного уравнения
    if discriminant<0: # Условие - если дискриминант меньше нулю, то выполняется дальнейший программый код по условию. Если условие не выполнется, то осуществляется переход к следующему условию
        return None # Возвращение значения None
    elif discriminant==0: # Условие - если дискриминант равен нулю, то выполняется дальнейший программый код по условию. Если условие не выполнется, то осуществляется переход к ветке else
        root = (-b)/(2*a) # Вычисление корня квадратного уравнения
        return int(root) # Возвращение корня квадратного уравнения
    else: # Эта ветка выполняется, если ни одно условие не выполнилось
        root_1 = (-b + math.sqrt(discriminant))/(2*a) # Вычисление корня квадратного уравнения
        root_2 = (-b - math.sqrt(discriminant))/(2*a) # Вычисление корня квадратного уравнения
        return [int(root_1), int(root_2)] #  Возвращение корней квадратного уравнения
print(square.__doc__) # Вывод на экран справочной информации о функции. Справочная информация заключена в тройные кавычки
print(square(-1,-2,15)) # Вызов функции с параметрами, при которых квадратное уравнение имеет два решения
print(square(1,-6,9)) # Вызов функции с параметрами, при которых квадратное уравнение имеет одно решение
print(square(5,2,3)) # Вызов функции с параметрами, при которых квадратное уравнение не имеет решений
print(square()) # Вызов функции без параметров (будет использован параметр по умолчанию)
print("Задание №3")
def fib(param = 1):# Создаем функцию для вычисления n-ого члена последовательности Фибоначчи
    """
    Эта функция (с одним параметром param) вычисляет число Фибоначчи по его номеру в последовательности Фибоначчи.
    При попытке использовать в качестве аргумента функции число меньшее или равное нулю,
    функция вернет сообщение о том, что последовательность начинается с 1 элемента.
    По умолчанию параметр функции param равен 1.
    """
    if param <=0: # Условие - если член последовательности меньше или равен нулю, то выполняется дальнейший программый код по условию
        return "Последовательность элементов начинается с 1" # Возвращает на экран сообщение
    fib_1 = 1 # Первый элемент в последовательности Фибоначчи
    fib_2 = 1 # Второй элемент в последовательности Фибоначчи
    for i in range(2,param): # Цикл, начинающийся с 2 до необходимого пользователю элемента
        fib_2+=fib_1 # Запись в переменную следующего числа Фибоначчи
        fib_1=fib_2-fib_1 # Запись в переменную числа, которое было в переменной fib_2 в рамках этой итерации цикла
    return fib_2 # Возвращает искомое число Фибоначчи
print(fib.__doc__) # Вывод на экран справочной информации о функции. Справочная информация заключена в тройные кавычки
print(fib(0)) # Вызов функции с параметром 0
print(fib(12)) # Вызов функции с параметром 12
print(fib()) # Вызов функции без параметров (будет использован параметр по умолчанию)
print("Задание №4")
def fact(n=1): # Создаем функцию для вычисления n-ого члена последовательности Фибоначчи
    """
    Эта функция (с одним параметром n) вычисляет факториал числа пользователя.
    Факториал возможно вычислить только для целых неотрицательных чисел!
    Функция построена на основе рекурсии (поэтому на больших числах может работать
    медленнее, чем её аналоги, реализованные через циклы!)
    По умолчанию параметр функции n равен 1.
    """
    if n<0: # Условие - если параметр меньше нуля, то выполняется дальнейший программый код по условию. Если условие не выполняется, то происходит переход к следующему условию.
        return "Факториал определен только для целых неотрицательных чисел!" # Возвращает на экран сообщение
    elif n==0: # Условие - если пераметр равен нулю, то выполняется дальнейший программый код по условию. Если условие не выполняется, то происходит переход к следующему условию.
        return 1 # # Возвращение 1
    elif n==1: # Условие - если параметр равен единице, то выполняется дальнейший программый код по условию. Если условие не выполняется, то происходит переход к else.
        return 1 # Возвращение 1
    else: # Эта ветка выполняется, есди ни одно условие не было выполнено
        return fact(n-1)*n # # Возвращение результата работы функции
print(fact.__doc__) # Вывод на экран справочной информации о функции. Справочная информация заключена в тройные кавычки
print(fact(-2)) # Вызов функции с параметром -2
print(fact(0)) # Вызов функции с параметром 0
print(fact(5)) # Вызов функции с параметром 5
print(fact()) # Вызов функции без параметров (будет использован параметр по умолчанию)