# -*- coding: utf-8 -*-

"""Prediction-Covid-Exercise.ipynb



Automatically generated by Colaboratory.



Original file is located at

    https://colab.research.google.com/drive/1wY2puKXbvL3quvFAmkItJEg364hL3z6k



# Prediction Exercise



Predict the number of cases n-days after from the 1st reported infection.



Use the data available in the below file, provided by JHU CSSE.



https://github.com/prabindh/COVID-19/blob/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv

"""



import pandas as pd



from urllib.request import urlopen

numbers_csv = urlopen("https://raw.githubusercontent.com/prabindh/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv")

numbers_df = pd.read_csv(numbers_csv)

numbers_df.head()



"""Lets find the details of this dataset."""



numbers_df["Country/Region"].describe()



"""Treating the various provinces, countries as independent features, get only the numeric count for all rows."""



count_df = numbers_df.iloc[:, 4:]

count_df.head()



count_df.describe()



"""Get the country with maximum numbers the last day of record."""



max_count = count_df.iloc[:, -1].max()

max_count



max_index = count_df['4/2/20'].idxmax()

max_index



numbers_df.iloc[max_index]



usa_data = numbers_df[numbers_df["Country/Region"] == "US"]

usa_data



china_data = numbers_df[numbers_df["Country/Region"] == "China"]

china_data



"""How does India fare ?"""



india_data = numbers_df[numbers_df["Country/Region"] == "India"]

india_data



"""## Visualisation of the rates"""



# Take only the numerical values

counts = india_data.iloc[0:1, range(4, len(india_data.columns))]



startCol = 0

for columnName in counts:

  if counts[columnName].values > 0:

    break

  startCol = startCol + 1

counts = counts.iloc[0:1, range(startCol, len(counts.columns))]



counts



"""## Converting to np array"""



counts_np = counts.to_numpy()



counts_np.shape



import numpy as np

counts_np = np.squeeze(counts_np)



import numpy as np

counts_np



"""## Visualisation of the data"""



import matplotlib.pyplot as plt

plt.plot(list(range(0,counts_np.shape[0])),counts_np)

plt.xlabel("Days from 1st infection") 

plt.ylabel("Number of infections") 

plt.show()



"""## Formulate the data-set"""



x_days = np.array(list(range(0, len(counts_np))))

x_days



y_infections_india = counts_np

y_infections_india



"""## Obtaining data for any country



Note the changes, to add up all provinces/regions within a country, if found. For example, there are more than one regions in China.

"""



def get_covidian_count(country_name):

  country_data = numbers_df[numbers_df["Country/Region"] == country_name]

  rows = country_data.shape[0]

  counts = country_data.iloc[0:rows, range(4, len(country_data.columns))]

  counts = counts.sum()

  startCol = 0

  for column in counts:

    if column > 0:

      break

    startCol = startCol + 1

  counts = counts.iloc[range(startCol, len(counts))]

  np_arr = np.squeeze(counts.to_numpy())

  x_days = np.array(list(range(0, len(np_arr))))

  return np.array([x_days, np_arr])



infections_usa = get_covidian_count("US")

infections_india = get_covidian_count("India")

infections_china = get_covidian_count("China")

infections_india



np.savetxt("usa.csv",  np.transpose([infections_usa[0],infections_usa[1]]), fmt="%d,%d", header="Days, Count")

np.savetxt("india.csv",  np.transpose([infections_india[0],infections_india[1]]), fmt="%d,%d", header="Days, Count")

np.savetxt("china.csv",  np.transpose([infections_china[0],infections_china[1]]), fmt="%d,%d", header="Days, Count")



"""To confirm the data is proper, load the data back and check."""



test_np = np.loadtxt("usa.csv", delimiter=',', skiprows=1, dtype='int,int')

test_np



"""## Given x, predict y"""