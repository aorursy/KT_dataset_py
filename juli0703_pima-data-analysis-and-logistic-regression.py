import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
%matplotlib inline
diabetes = pd.read_csv('../input/diabetes.csv')
diabetes.shape
diabetes.info()
diabetes.describe()
diabetes.head()
sns.heatmap(diabetes.isnull(),yticklabels=False,cbar=False,cmap='plasma')
diabetes.duplicated().value_counts()
diabetes[diabetes['Glucose']==0]
print('Number of zero values for pregnancies: ' + str(len(diabetes[diabetes['Pregnancies']==0])))
print('Number of zero values for glucose: ' + str(len(diabetes[diabetes['Glucose']==0])))
print('Number of zero values for BloodPressure: ' + str(len(diabetes[diabetes['BloodPressure']==0])))
print('Number of zero values for SkinThickness: ' + str(len(diabetes[diabetes['SkinThickness']==0])))
print('Number of zero values for Insulin: ' + str(len(diabetes[diabetes['Insulin']==0])))
print('Number of zero values for BMI: ' + str(len(diabetes[diabetes['BMI']==0])))
plt.figure(figsize=(10,6))
sns.distplot(diabetes['Pregnancies'],kde=False,bins=50)
plt.title('Pregnancies per Person on Pima People')
plt.ylabel('Number of People')
plt.show()
print('Average amount of children had by a Pima woman: ' + str(diabetes['Pregnancies'].mean()))
plt.figure(figsize=(10,6))
sns.distplot(diabetes['Glucose'],kde=False,bins=50)
plt.title('Glucose per Person on Pima People')
plt.ylabel('Number of People')
plt.show()
plt.figure(figsize=(10,6))
sns.distplot(diabetes['BloodPressure'],kde=False,bins=50)
plt.title('Blood Pressure of Pima Indian People')
plt.ylabel('Number of People')
plt.show()
plt.figure(figsize=(10,6))
sns.distplot(diabetes['SkinThickness'],kde=False,bins=50)
plt.title('Skin Thickness of Pima Indian People')
plt.ylabel('Number of People')
plt.show()
plt.figure(figsize=(10,6))
sns.distplot(diabetes['Insulin'],kde=False,bins=50)
plt.title('Insulin of Pima Indian People')
plt.ylabel('Number of People')
plt.show()
plt.figure(figsize=(10,6))
sns.distplot(diabetes['BMI'],kde=False,bins=50)
plt.title('BMI of Pima Indian People')
plt.ylabel('Number of People')
plt.show()
print('Average BMI of a Pima Person: ' + str(diabetes['BMI'].mean()))
plt.figure(figsize=(10,6))
sns.distplot(diabetes['DiabetesPedigreeFunction'],kde=False,bins=50)
plt.title('Diabetes Pedigree Function of Pima Indian People')
plt.ylabel('Number of People')
plt.show()
plt.figure(figsize=(10,6))
sns.distplot(diabetes['Age'],kde=False,bins=50)
plt.title('Age of Pima Indian People')
plt.ylabel('Number of People')
plt.show()
plt.figure(figsize=(8,6))
sns.countplot(x='Outcome',data=diabetes)
plt.title('Positive Outcome to Diabetes in Dataset')
plt.ylabel('Number of People')
plt.show()
print('Ratio of Population with Diabetes: ' + str(len(diabetes[diabetes['Outcome']==1])/len(diabetes)))
plt.figure(figsize=(10,6))
sns.heatmap(diabetes.corr(),cmap='YlGn',annot=True)
plt.show()
sns.pairplot(diabetes,hue='Outcome')
g = sns.FacetGrid(diabetes, col="Outcome",size=5)
g = g.map(plt.hist, "Glucose",bins=30)
g = sns.FacetGrid(diabetes, col="Outcome",size=5)
g = g.map(plt.hist, "BMI",bins=30)
print('Average Body Mass Index of a Pima woman without diabetes: ' + str(diabetes[diabetes['Outcome']==0]['BMI'].mean()))
print('Average Body Mass Index of a Pima woman with diabetes: ' + str(diabetes[diabetes['Outcome']==1]['BMI'].mean()))
plt.figure(figsize=(10,6))
sns.barplot(data=diabetes,x='Outcome',y='Pregnancies')
plt.title('Pregnancies Among Diabetes Outcomes.')
plt.show()
plt.figure(figsize=(10,6))
sns.countplot(x='Pregnancies',data=diabetes,hue='Outcome')
plt.title('Diabetes Outcome to Pregnancies')
plt.show()
print('Average number of pregnancies for positive outcomes: ' + str(diabetes[diabetes['Outcome']==1]['Pregnancies'].mean()))
print('Average number of pregnancies for negative outcomes: ' + str(diabetes[diabetes['Outcome']==0]['Pregnancies'].mean()))
plt.figure(figsize=(13,6))
sns.countplot(x='Age',data=diabetes,hue='Outcome')
plt.title('Diabetes Outcome to Age')
plt.show()
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, confusion_matrix
X = diabetes.drop(['Outcome'],axis=1)
y = diabetes['Outcome']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=101)
lr = LogisticRegression()
lr.fit(X_train,y_train)
pred = lr.predict(X_test)
print(classification_report(y_test,pred))
label = ['0','1']
sns.heatmap(confusion_matrix(y_test,pred),annot=True,xticklabels=label,yticklabels=label,cmap='coolwarm')
X = diabetes.drop(['Outcome','Insulin','SkinThickness'],axis=1)
y = diabetes['Outcome']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=101)
lr = LogisticRegression()
lr.fit(X_train,y_train)
prediction = lr.predict(X_test)
print(classification_report(y_test,prediction))
sns.heatmap(confusion_matrix(y_test,prediction),annot=True,xticklabels=label,yticklabels=label,cmap='coolwarm')