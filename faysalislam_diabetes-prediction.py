import pandas as pd

import numpy as np

import seaborn as sns





# In[2]:





#read diabetes data 

data = pd.read_csv('../input/diabetes.csv',encoding='latin1')

data.head()
#Statistically find relationship between variables using correlation

#and visualize the correlations using a heatmap.

VarCorr = data.corr()

print(VarCorr)

sns.heatmap(VarCorr,xticklabels=VarCorr.columns,yticklabels=VarCorr.columns)

import numpy as np # linear algebra

import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)

import matplotlib.pyplot as plt #for visualization and plot

import csv,sklearn



from subprocess import check_output
data = pd.read_csv('../input/diabetes.csv',encoding='latin1')

data.head()
data['Output'] = data['Glucose'].apply(lambda x: 'diabetes' if x > 125 else 'prediabetes' if x > 99 and x <= 125 else 'normal' if x > 70 else 'diabetes')

data.head()
data['Output'] = data['Output'].replace(['normal','prediabetes', 'diabetes'],[0,1,2])

data.head()



#save data

data.to_csv('diabetes2.csv',index=False, header=True)
data= data[data['Insulin'] == 0]



#perform descriptive analysis

data.describe()
data = data[['Glucose','Output']]

data.head()
data= data[data['Glucose'] != 0]

data.describe()
data.to_csv('diabetestest2.csv',index=False, header=True)

import numpy as np # linear algebra

import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)

import matplotlib.pyplot as plt #for visualization and plot

import csv,sklearn



from subprocess import check_output
data = pd.read_csv('diabetes2.csv',encoding='latin1')

data.head()
data = data[['Glucose','Insulin','Output']]

data.head()
data= data[data['Insulin'] != 0]

data= data[data['Glucose'] != 0]
data.to_csv('diabetesNonzero.csv', index=False)

data.describe()
from sklearn.model_selection import train_test_split

splitRatio = 0.2



train , test = train_test_split(data,test_size = splitRatio,random_state = 123)



X_train = train[[x for x in train.columns if x not in ["Insulin"]]]

y_train = train[["Insulin"]]



X_test  = test[[x for x in test.columns if x not in ["Insulin"]]]

y_test  = test[["Insulin"]]
from sklearn.model_selection import train_test_split 

#X_train,X_test,y_train,y_test = train_test_split(X,y,random_state=0)



print(X_train.shape)

print(y_train.shape)

print(X_test.shape)

print(y_test.shape)
from sklearn.linear_model import LinearRegression

from sklearn.linear_model import Lasso

from sklearn.linear_model import Ridge

from sklearn.metrics import mean_squared_error, r2_score

from sklearn.metrics import accuracy_score



#model = Ridge()

#model = Lasso()

#best model

model =  LinearRegression()

model.fit(X_train,y_train)

prediction = model.predict(X_test)
#visualize train and test accuracy

#from sklearn.metrics import score



#print("Train acc: " , model.score(X_train, y_train))

#print("Test acc: ", model.score(X_test, y_test))



# The mean squared error

print("Mean squared error: %.2f" % mean_squared_error(y_test, prediction))

# Explained variance score: 1 is perfect prediction

print('Variance score: %.2f' % r2_score(y_test, prediction))
new_df = pd.DataFrame([[144,2]])



# We predict insulin

prediction = model.predict(new_df)





print(prediction.astype(int))
new_df = pd.read_csv('diabetestest2.csv',encoding='latin1')



# We predict the outcome

prediction = model.predict(new_df)

prediction = prediction.astype(int)
out=pd.DataFrame(prediction, columns=['Insulin'])

out.to_csv('diabetespredresult.csv',index=False, header=True)
import numpy as np # linear algebra

import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)

import matplotlib.pyplot as plt #for visualization and plot

import csv,sklearn



from subprocess import check_output
df1 = pd.read_csv('diabetestest2.csv',encoding='latin1')



#predicted insulin values

df2 = pd.read_csv('diabetespredresult.csv',encoding='latin1')
data = pd.concat([df1, df2], axis = 1)



#rearrange columns

data = data[['Glucose','Insulin','Output']]
df3 = pd.read_csv('diabetesNonzero.csv',encoding='latin1')

data.head(20)
frames = [data, df3]



data = pd.concat(frames)

data.head()
data.describe()

#save final merged data

#convert DataFrame to csv file. NB: index is automatically generated by Pandas while converting to CSV file. So, use index=False to stop it

data.to_csv('diabetesmerge.csv', index=False)
data = pd.read_csv('diabetesmerge.csv',encoding='latin1')
from sklearn.model_selection import train_test_split

splitRatio = 0.2



train , test = train_test_split(data,test_size = splitRatio,random_state = 123)



X_train = train[[x for x in train.columns if x not in ["Output"]]]

y_train = train[["Output"]]



X_test  = test[[x for x in test.columns if x not in ["Output"]]]

y_test  = test[["Output"]]
from sklearn.model_selection import train_test_split 

#X_train,X_test,y_train,y_test = train_test_split(X,y,random_state=0)



print(X_train.shape)

print(y_train.shape)

print(X_test.shape)

print(y_test.shape)
from sklearn.linear_model import LinearRegression

from sklearn.linear_model import LogisticRegression

from sklearn.naive_bayes import GaussianNB

from sklearn.neighbors import KNeighborsClassifier

from sklearn.metrics import accuracy_score

model = KNeighborsClassifier()

#model = LogisticRegression()

#model = GaussianNB()

#model =  LinearRegression()



model.fit(X_train,y_train)

prediction = model.predict(X_test)

accuracy_score(y_test,prediction)
new_df = pd.DataFrame([[160,30]])



# We predict the outcome

prediction = model.predict(new_df)



print(prediction)
new = model.predict_proba(new_df)[:]

msg = ''



if prediction == 0:

    msg = 'Normal'

elif prediction == 1:

    msg = 'Prediabetic'

else:

    msg = 'Diabetic'



Proba = int(((new[:,2])) * 100)

print('Your daibetes status is:' , msg, 'and you have {}%'.format(Proba), 'chances of being diabetic')
import numpy as np # linear algebra

import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)

import matplotlib.pyplot as plt #for visualization and plot

import csv,sklearn



from subprocess import check_output
data = pd.read_csv('diabetesmerge.csv',encoding='latin1')

data.head()
#where Output == 2 change to 2 if Insulin < 30 elif change to 3 if insulin > 0

def myfunc(x,y):

    if x <= 30 and y == 2:

        return y

    elif x > 30 and y == 2:

        return y + 1

    else:

        return y

    

data['Output'] = data.apply(lambda x: myfunc(x.Insulin, x.Output), axis=1)
data.to_csv('diabetestype.csv', index=False)

data = pd.read_csv('diabetestype.csv',encoding='latin1')
data.head(50)
data.describe()
from sklearn.model_selection import train_test_split

splitRatio = 0.2



train , test = train_test_split(data,test_size = splitRatio,random_state = 123)



X_train = train[[x for x in train.columns if x not in ["Output"]]]

y_train = train[["Output"]]



X_test  = test[[x for x in test.columns if x not in ["Output"]]]

y_test  = test[["Output"]]
from sklearn.model_selection import train_test_split 

#X_train,X_test,y_train,y_test = train_test_split(X,y,random_state=0)



print(X_train.shape)

print(y_train.shape)

print(X_test.shape)

print(y_test.shape)
from sklearn.linear_model import LinearRegression

from sklearn.linear_model import LogisticRegression

from sklearn.naive_bayes import GaussianNB

from sklearn.neighbors import KNeighborsClassifier

from sklearn.metrics import accuracy_score



model = KNeighborsClassifier()

#model = LogisticRegression()

#model = GaussianNB()

#model =  LinearRegression()



#X_train = X_train.reshape(-1,1)

#X_test = X_test.reshape(-1,1)



model.fit(X_train,y_train)

prediction = model.predict(X_test)

accuracy_score(y_test,prediction)
print("Train acc: " , model.score(X_train, y_train))

print("Test acc: ", model.score(X_test, y_test))
new_df = pd.DataFrame([[123,71]])

#new_df = pd.read_csv('input/diabetestest.csv',encoding='latin1')



# We predict the outcome

prediction = model.predict(new_df)



if prediction == 2:

    print('Type 1 diabetes')

elif prediction == 3:

    print('Type 2 diabetes')