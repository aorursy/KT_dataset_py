# This Python 3 environment comes with many helpful analytics libraries installed
# It is defined by the kaggle/python docker image: https://github.com/kaggle/docker-python
# For example, here's several helpful packages to load in 

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)

# Input data files are available in the "../input/" directory.
# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory

import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

# Any results you write to the current directory are saved as output.
print("Задача №1") 
list_1 = list() # Создаем пустой список
for i in range(10): # Создаем цикл на 10 итераций
    word = input("Введите слово: ") # Считываем слово с клавиатуры
    list_1.append(word) # Добавляем слово в конец списка
print(list_1) # Выводим на экран весь список
print("Задача №2")
list_2 = list() # Создаем пустой список
for i in range(10): # Создаем цикл на 10 итераций
    number = int(input("Введите число: ")) # Считываем число с клавиатуры
    list_2.append(number) # Добавляем число в конец списка
print(list_2) # Выводим на экран весь список
print("Задача №3")
import random # Импортируем библиотеку Random
list_39 = list() # Создаем пустой список
for i in range(10): # Создаем цикл на 10 итераций
    number = random.randint(-30,30) # Записываем случайное число от -30 до 30 в переменную
    list_39.append(number) # Добавляем число в конец списка
print(list_39) # Выводим на экран весь список в прямой последовательности
print("Задача №4")
print(list_39[::-1]) # Выводим на экран весь список в обратной последоваельности
list_39.sort() # Сортируем список в порядке возрастания
print(list_39) # Выводим на экран весь список в порядке возрастания
list_39.reverse() # Изменяем порядок расположения элементов в списке на обратный
print(list_39) # Выводим на экран весь список в порядке убывания
print("Задача №5")
n = int(input("Введите начало среза: ")) # Считываем первую границу среза
m = int(input("Введите конец среза: ")) # Считываем вторую границу среза
print(list_39[n:m]) # Выводим на экран срез списка
print("Задача №6")
for i in list_39: # Создаем цикл, проходящий по элементам списка list_39
    if i>=0: # Если элемент списка больше нуля, то условие верно и происходит выполнение дальнейшего кода в условии
        print(i, end=" ") # Вывод на экран положительного элемента списка list_39
print("Задача №7")
print(list_39[::2]) # Вывод элементов списка list_39, стоящих на четных позициях
print("Задача №8")
for i in list_39: # Создаем цикл, проходящий по элементам списка list_39
    if i%2==0: # Если элемент списка нацело делится на 2, то условие верно и происходит выполнение дальнейшего кода в условии
        print(i, end=" ") # Вывод на экран четного элемента из списка list_39
print() # Выводим на экран пустую строку
for i in list_39[::2]: # Создаем цикл, проходящий по элементам list_39, стоящих на четных позициях
    if i%2==0: # Если элемент списка нацело делится на 2, то условие верно и происходит выполнение дальнейшего кода в условии
        print(i, end=" ") # Вывод на экран четного элемента из среза списка list_39
print("Задача №9")
n = int(input("Введите число, которое необходимо найти: ")) # Считываем число, которое необходимо найти
if n not in list_39: # Условие истинно, если число пользователя отсутствует в списке list_39; происходит выполнение дальнейшего кода по условию
    print("Такого числа нет в этом списке!") # Вывод сообщения на экран
else: # Эта ветка выполняется, если число пользователя присутсвует в списке list_39 (условие выше - ложь)
    for i in range (len(list_39)):#Создаем цикл с количеством итераций, равным количеству элементов в списке list_39
        if int(list_39[i])==n: # Проводим сравнение элемента списка и числа пользователя, если условие верно, то происходит выполнение дальнейшего кода по условию 
            print("Позиция элемента в списке -",i) # Вывод сообщения на экран о позиции числа пользователя в списке list_39
            break # Прерывание работы цикла  
print("Задача №10")
list_10 = list() # Создаем пустой список
for i in range(20): # Создаем цикл на 20 итераций
    number = random.randint(-3,3) # Записываем случайное число от -3 до 3 в переменную
    list_10.append(number) # Добавляем число в конец списка
print(list_10) # Выводим на экран весь список
l = list() # Создаем вспомогательный список
for i in range(20): # Создаем цикл на 20 итераций
    if list_10[i]==0: # Проводим сравнение элемента списка с нулем, если условие верно, то происходит выполнение дальнейшего кода по условию 
        l.append(i) # Добавляем позицию элемента во вспомогательный список
for _ in range (len(l)): # Создаем цикл с количеством итераций, равным количеству элементов во вспомогательном списке
    list_10.remove(0) # Удаляем один элемент со значением ноль
print(list_10) # Выводим на экран весь список нулевых значений в нем
print("Задача №11")
list_11 = list() # Создаем пустой список
for i in range(20): # Создаем цикл на 20 итераций
    number = random.randint(-3,3) # Записываем случайное число от -3 до 3 в переменную
    list_11.append(number) # Добавляем число в конец списка
print(list_11) # Выводим на экран весь список
i = 0 # Создаем переменную для управления индексом элементов в списке
while i !=len(list_11): # Создаем цикл с условием - пока номер элемента не достиг конца списка, цикл будет работать
    if i != int(len(list_11)): # Пока номер элемента не достиг конца списка, условие верно. Если условие верно, то происходит выполнение дальнейшего кода по условию
        if list_11[i]<0: # Условие, если элемент отрицательный, то происходит выполнение дальнейшего кода по условию
            del list_11[i] # Удаление элемента из списка
            i = 0 # Перевод индекса элемента в начальную позицию
            continue # Переход на следующую итерацию цикла
        i+= 1 # Перевод индекса элемента в следующую позицию
    else: # Эта ветка выполняется, если индекса элемента достиг конца списка
        break # Прерывание работы цикла     
print(list_11) # Выводим на экран весь список без отрицательных элементов в нём
        