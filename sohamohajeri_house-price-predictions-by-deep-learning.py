import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
%matplotlib inline
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from sklearn import metrics
df=pd.read_csv('../input/housesalesprediction/kc_house_data.csv')
df.head()
df.shape
df.info()
df.describe().transpose()
df.drop(['id'],axis=1, inplace=True)
df['date']=pd.to_datetime(df['date'])
df['year']=df['date'].apply(lambda x: x.year)
df['month']=df['date'].apply(lambda x: x.month)
df.drop(['date'], axis=1,inplace=True)
df['zipcode'].nunique()
le=LabelEncoder()
le.fit(df['zipcode'])
df['zipcode']=le.transform(df['zipcode'])
df['yr_renovated'].value_counts()
df['renovated']=df['yr_renovated'].apply(lambda x: 0 if x==0 else 1)
df.drop(['yr_renovated'], axis=1,inplace=True)
plt.figure(figsize=(10,6))
plt.hist(x='price', bins=100, data=df, edgecolor='w',color='black')
plt.title('Price Distribution', fontsize=15)
plt.xlabel('Price', fontsize=12)
plt.ylabel('Frequency', fontsize=12)
plt.show()
plt.figure(figsize=(10,6))
sns.countplot(x='bedrooms',data=df)
plt.title('Number of Bedrooms', fontsize=15)
plt.xlabel('Bedrooms', fontsize=12)
plt.ylabel('Count', fontsize=12)
plt.show()
cor=df.corr()['price'].sort_values(ascending=False).drop(['price', 'zipcode'])
plt.figure(figsize=(8,6))
plt.bar(x=list(cor.index), height=list(cor.values), color='teal')
plt.xticks(rotation=90)
plt.xlabel('Feature', fontsize=12)
plt.ylabel('Correlation', fontsize=12)
plt.title('Correlation of Features with Price', fontsize=15)
plt.show()
new=sns.PairGrid(df,x_vars=['sqft_living', 'sqft_above'], y_vars=['price'],height=5,aspect=1)
new.map(plt.scatter)
plt.show()
plt.figure(figsize=(22,6))
plt.subplot(1,2,1)
sns.boxplot(x='bedrooms', y='price', data=df)
plt.subplot(1,2,2)
sns.boxplot(x='bathrooms', y='price', data=df)
plt.show()
plt.figure(figsize=(15,6))
plt.subplot(1,2,1)
sns.scatterplot( x='lat',y='price', data=df)
plt.subplot(1,2,2)
sns.scatterplot( x='long',y='price', data=df)
plt.ylabel('')
plt.show()
plt.figure(figsize=(15,6))
plt.scatter(x='long',y='lat',data=df, c='price',cmap='RdYlGn')
plt.xlabel('Longitude', fontsize=12)
plt.ylabel('Lattitude', fontsize=12)
plt.title('The Geographical Properties of the Houses', fontsize=15)
plt.show()
df.shape
21597*0.01
df_new=df.sort_values(by='price', ascending=False).iloc[216:]
df_new.head()
plt.figure(figsize=(15,6))
plt.scatter(x='long',y='lat',data=df_new, c='price',cmap='RdYlGn')
plt.xlabel('Longitude', fontsize=12)
plt.ylabel('Lattitude', fontsize=12)
plt.title('The Geographical Properties of the Houses with Lower Prices', fontsize=15)
plt.show()
plt.figure(figsize=(8,6))
sns.boxplot(x='waterfront', y='price',data=df, palette='winter')
plt.xlabel('Waterfront', fontsize=12)
plt.ylabel('Price', fontsize=12)
plt.title('The Distribution of Prices Versus Waterfront', fontsize=15)
plt.show()
plt.figure(figsize=(8,6))
sns.boxplot(x='month',y='price',data=df)
plt.xlabel('Month', fontsize=12)
plt.ylabel('Price', fontsize=12)
plt.title('The Variation of House Prices Versus Month', fontsize=15)
plt.show()
plt.figure(figsize=(8,6))
df.groupby('month').mean()['price'].plot(color='m')
plt.xlabel('Month', fontsize=12)
plt.ylabel('Mean Price', fontsize=12)
plt.title('The Variation of Mean Prices Versus Month', fontsize=15)
plt.show()
plt.figure(figsize=(8,6))
sns.boxplot(x='year',y='price',data=df, palette='cubehelix_r')
plt.xlabel('Year', fontsize=12)
plt.ylabel('Price', fontsize=12)
plt.title('The Variation of House Prices Versus Year', fontsize=15)
plt.show()
plt.figure(figsize=(8,6))
df.groupby('year').mean()['price'].plot(color='c')
plt.xlabel('Month', fontsize=12)
plt.ylabel('Mean Price', fontsize=12)
plt.title('The Variation of Mean Prices Versus Year', fontsize=15)
plt.show()
X=df.drop(['price'],axis=1).values
y=df['price'].values
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=101)
mms=MinMaxScaler()
mms.fit(X_train)
X_train=mms.transform(X_train)
X_test=mms.transform(X_test)
X_test.shape
model=Sequential()

model.add(Dense(20,activation='relu'))
model.add(Dense(20,activation='relu'))
model.add(Dense(20,activation='relu'))
model.add(Dense(20,activation='relu'))

model.add(Dense(1))

model.compile(optimizer='adam',loss='mse')
model.fit(X_train,y_train, validation_data=(X_test,y_test), batch_size=128, epochs=400 )
loss_df=pd.DataFrame(model.history.history)
loss_df.plot(figsize=(7,6), colormap='RdBu_r')
plt.title('Training Loss Per Epoch', fontsize=15)
plt.xlabel('Epoch', fontsize=12)
plt.ylabel('Loss', fontsize=12)
plt.show()
model.evaluate(X_test,y_test,verbose=0)
model.evaluate(X_train,y_train,verbose=0)
prediction=model.predict(X_test)
plt.figure(figsize=(8,6))
plt.plot(y_test,y_test, color='b')
plt.scatter(y_test,prediction,color='r')
plt.xlabel('Actual Price', fontsize=12)
plt.ylabel('Predicted Price', fontsize=12)
plt.title('Predicted Versus Actual Prices', fontsize=15)
plt.show()
print('MAE= ', metrics.mean_absolute_error(y_test,prediction))
print('MSE= ', metrics.mean_squared_error(y_test,prediction))
print('RMSE= ', np.sqrt(metrics.mean_squared_error(y_test,prediction)))
print('R2 Score= ', metrics.r2_score(y_test,prediction))
df['price'].mean()
metrics.mean_absolute_error(y_test,prediction)/df['price'].mean()
new=df.drop(['price'],axis=1).iloc[0]
new.values
X_train.shape
new=new.values.reshape(-1,20)
new
new=mms.transform(new)
model.predict(new)
df['price'].iloc[0]